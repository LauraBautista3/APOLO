
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         00000850  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000018  00000850  00000850  000008a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         0000001c  00000868  00000868  000008bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000014  00000884  00000884  000008d8  2**2
                  ALLOC
  4 .debug_abbrev 000003fc  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a41  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000641  00000000  00000000  00001715  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000130  00000000  00000000  00001d58  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000001a9  00000000  00000000  00001e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 000000ce  00000000  00000000  00002031  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000060  00000000  00000000  000020ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000212  00000000  00000000  0000215f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  00002371  2**0
                  CONTENTS, READONLY
 13 .debug_loc    0000031f  00000000  00000000  00002382  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000a0  00000000  00000000  000026a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 75 	calli 2a0 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 08 90 	ori gp,gp,0x890
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 08 84 	ori r1,r1,0x884
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 08 98 	ori r3,r3,0x898

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
#include "soc-hw.h"
#include "txdmx.h"


int main()
{
 208:	37 9c ff ec 	addi sp,sp,-20
 20c:	5b 8b 00 14 	sw (sp+20),r11
 210:	5b 8c 00 10 	sw (sp+16),r12
 214:	5b 8d 00 0c 	sw (sp+12),r13
 218:	5b 8e 00 08 	sw (sp+8),r14
 21c:	5b 9d 00 04 	sw (sp+4),ra
	config_dmx();
 220:	f8 00 01 23 	calli 6ac <config_dmx>
	gpio0->dir = 0xFF;
 224:	78 01 00 00 	mvhi r1,0x0
 228:	38 21 08 70 	ori r1,r1,0x870
 22c:	28 21 00 00 	lw r1,(r1+0)
 230:	34 02 00 ff 	mvi r2,255
 234:	78 0e 00 00 	mvhi r14,0x0
 238:	58 22 00 08 	sw (r1+8),r2
 23c:	78 0d 00 00 	mvhi r13,0x0
 240:	78 0c 00 00 	mvhi r12,0x0
 244:	78 0b 00 00 	mvhi r11,0x0
	gpio0->write = 0xFF;
 248:	58 22 00 04 	sw (r1+4),r2
 24c:	39 ce 08 78 	ori r14,r14,0x878
 250:	39 ad 08 7c 	ori r13,r13,0x87c
 254:	39 8c 08 84 	ori r12,r12,0x884
 258:	39 6b 08 68 	ori r11,r11,0x868
//	irq_set_mask(0x02);
//	irq_enable();

	for(;;)
	{
			dmx_init_send();
 25c:	f8 00 01 72 	calli 824 <dmx_init_send>
			sleept1();
 260:	f8 00 01 09 	calli 684 <sleept1>
			dmx_channel_send(v_ch1);
 264:	41 c1 00 03 	lbu r1,(r14+3)
 268:	f8 00 01 3d 	calli 75c <dmx_channel_send>
			sleept1();
 26c:	f8 00 01 06 	calli 684 <sleept1>
			dmx_channel_send(v_ch2);
 270:	41 a1 00 03 	lbu r1,(r13+3)
 274:	f8 00 01 3a 	calli 75c <dmx_channel_send>
			sleept1();
 278:	f8 00 01 03 	calli 684 <sleept1>
			dmx_channel_send(v_ch3);
 27c:	41 81 00 03 	lbu r1,(r12+3)
 280:	f8 00 01 37 	calli 75c <dmx_channel_send>
			sleept1();
 284:	f8 00 01 00 	calli 684 <sleept1>
			if ( uart0->ucr & UART_DR)
 288:	29 61 00 00 	lw r1,(r11+0)
 28c:	28 21 00 00 	lw r1,(r1+0)
 290:	20 21 00 01 	andi r1,r1,0x1
 294:	44 20 ff f2 	be r1,r0,25c <main+0x54>
				leer_datos();
 298:	f8 00 00 7a 	calli 480 <leer_datos>
 29c:	e3 ff ff f0 	bi 25c <main+0x54>

000002a0 <irq_handler>:
 */

void irq_handler(uint32_t pending)
{

	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2a0:	78 01 00 00 	mvhi r1,0x0
 2a4:	38 21 08 6c 	ori r1,r1,0x86c
 2a8:	28 21 00 00 	lw r1,(r1+0)
 2ac:	34 02 00 0e 	mvi r2,14
 2b0:	58 22 00 00 	sw (r1+0),r2
//	pwm(PIN_R, v_ch1);
//	pwm(PIN_G, v_ch2);
//	pwm(PIN_B, v_ch3);

 //	}
}
 2b4:	c3 a0 00 00 	ret

000002b8 <pwm>:


void pwm(uint8_t PINRGB, int Valor_C)
{
	if (contador < Valor_C)
 2b8:	78 03 00 00 	mvhi r3,0x0
 2bc:	38 63 08 94 	ori r3,r3,0x894
 2c0:	28 63 00 00 	lw r3,(r3+0)
 //	}
}


void pwm(uint8_t PINRGB, int Valor_C)
{
 2c4:	20 21 00 ff 	andi r1,r1,0xff
	if (contador < Valor_C)
 2c8:	4c 62 00 08 	bge r3,r2,2e8 <pwm+0x30>
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 2cc:	78 02 00 00 	mvhi r2,0x0
 2d0:	38 42 08 70 	ori r2,r2,0x870
 2d4:	28 42 00 00 	lw r2,(r2+0)
 2d8:	28 43 00 00 	lw r3,(r2+0)
 2dc:	b8 23 08 00 	or r1,r1,r3
 2e0:	58 41 00 04 	sw (r2+4),r1
 2e4:	c3 a0 00 00 	ret
	else
		gpio0->write = gpio0->read & (~npin);
 2e8:	78 02 00 00 	mvhi r2,0x0
 2ec:	38 42 08 70 	ori r2,r2,0x870
 2f0:	28 42 00 00 	lw r2,(r2+0)
 2f4:	a4 20 08 00 	not r1,r1
 2f8:	28 43 00 00 	lw r3,(r2+0)
 2fc:	a0 23 08 00 	and r1,r1,r3
 300:	58 41 00 04 	sw (r2+4),r1
 304:	c3 a0 00 00 	ret

00000308 <tic_init0>:
 */


void tic_init0()
{
	timer0->compare0 = (FCPU/1000000)*10;
 308:	78 01 00 00 	mvhi r1,0x0
 30c:	38 21 08 6c 	ori r1,r1,0x86c
 310:	28 22 00 00 	lw r2,(r1+0)
 314:	34 01 03 e8 	mvi r1,1000
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR| TIMER_IRQEN;
 318:	34 03 00 0e 	mvi r3,14
 */


void tic_init0()
{
	timer0->compare0 = (FCPU/1000000)*10;
 31c:	58 41 00 04 	sw (r2+4),r1
	timer0->counter0 = 0;
 320:	58 40 00 08 	sw (r2+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR| TIMER_IRQEN;
	contador=0;
 324:	78 01 00 00 	mvhi r1,0x0

void tic_init0()
{
	timer0->compare0 = (FCPU/1000000)*10;
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR| TIMER_IRQEN;
 328:	58 43 00 00 	sw (r2+0),r3
	contador=0;
 32c:	38 21 08 94 	ori r1,r1,0x894
 330:	58 20 00 00 	sw (r1+0),r0
}
 334:	c3 a0 00 00 	ret

00000338 <set_pin>:
/**********************************************************
 * GPIO Functions
 */

void set_pin(uint8_t value, uint8_t npin)
{
 338:	20 21 00 ff 	andi r1,r1,0xff
 33c:	20 42 00 ff 	andi r2,r2,0xff
     if (value)
 340:	5c 20 00 09 	bne r1,r0,364 <set_pin+0x2c>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 344:	78 01 00 00 	mvhi r1,0x0
 348:	38 21 08 70 	ori r1,r1,0x870
 34c:	28 21 00 00 	lw r1,(r1+0)
 350:	a4 40 10 00 	not r2,r2
 354:	28 23 00 00 	lw r3,(r1+0)
 358:	a0 43 10 00 	and r2,r2,r3
 35c:	58 22 00 04 	sw (r1+4),r2
 360:	c3 a0 00 00 	ret
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 364:	78 01 00 00 	mvhi r1,0x0
 368:	38 21 08 70 	ori r1,r1,0x870
 36c:	28 21 00 00 	lw r1,(r1+0)
 370:	28 23 00 00 	lw r3,(r1+0)
 374:	b8 43 10 00 	or r2,r2,r3
 378:	58 22 00 04 	sw (r1+4),r2
 37c:	c3 a0 00 00 	ret

00000380 <set_pinDMX>:
		gpio0->write = gpio0->read & (~npin);

}

void set_pinDMX(uint8_t value)
{
 380:	20 21 00 ff 	andi r1,r1,0xff
     if (value)
 384:	5c 20 00 08 	bne r1,r0,3a4 <set_pinDMX+0x24>
		gpio0->write = gpio0->read | 0x01;
	else
		gpio0->write = gpio0->read & 0xFE;
 388:	78 01 00 00 	mvhi r1,0x0
 38c:	38 21 08 70 	ori r1,r1,0x870
 390:	28 21 00 00 	lw r1,(r1+0)
 394:	28 22 00 00 	lw r2,(r1+0)
 398:	20 42 00 fe 	andi r2,r2,0xfe
 39c:	58 22 00 04 	sw (r1+4),r2
 3a0:	c3 a0 00 00 	ret
}

void set_pinDMX(uint8_t value)
{
     if (value)
		gpio0->write = gpio0->read | 0x01;
 3a4:	78 01 00 00 	mvhi r1,0x0
 3a8:	38 21 08 70 	ori r1,r1,0x870
 3ac:	28 21 00 00 	lw r1,(r1+0)
 3b0:	28 22 00 00 	lw r2,(r1+0)
 3b4:	38 42 00 01 	ori r2,r2,0x1
 3b8:	58 22 00 04 	sw (r1+4),r2
 3bc:	c3 a0 00 00 	ret

000003c0 <pin_inv>:
}

void pin_inv(uint8_t npin)
{
	uint32_t val;
	val = (~gpio0->read) & npin;
 3c0:	78 02 00 00 	mvhi r2,0x0
 3c4:	38 42 08 70 	ori r2,r2,0x870
 3c8:	28 42 00 00 	lw r2,(r2+0)
		gpio0->write = gpio0->read & 0xFE;

}

void pin_inv(uint8_t npin)
{
 3cc:	20 21 00 ff 	andi r1,r1,0xff
	uint32_t val;
	val = (~gpio0->read) & npin;
 3d0:	28 43 00 00 	lw r3,(r2+0)
 3d4:	a4 60 18 00 	not r3,r3
 * GPIO Functions
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
 3d8:	a0 23 18 00 	and r3,r1,r3
 3dc:	5c 60 00 06 	bne r3,r0,3f4 <pin_inv+0x34>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 3e0:	28 43 00 00 	lw r3,(r2+0)
 3e4:	a4 20 08 00 	not r1,r1
 3e8:	a0 23 08 00 	and r1,r1,r3
 3ec:	58 41 00 04 	sw (r2+4),r1
 3f0:	c3 a0 00 00 	ret
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 3f4:	28 43 00 00 	lw r3,(r2+0)
 3f8:	b8 23 08 00 	or r1,r1,r3
 3fc:	58 41 00 04 	sw (r2+4),r1
 400:	c3 a0 00 00 	ret

00000404 <uart_getchar>:
/***************************************************************************
 * UART Functions
 */

char uart_getchar()
{   
 404:	78 01 00 00 	mvhi r1,0x0
 408:	38 21 08 68 	ori r1,r1,0x868
 40c:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 410:	28 41 00 00 	lw r1,(r2+0)
 414:	20 21 00 01 	andi r1,r1,0x1
 418:	44 20 ff fe 	be r1,r0,410 <uart_getchar+0xc>
	return uart0->rxtx;
 41c:	28 41 00 04 	lw r1,(r2+4)
}
 420:	20 21 00 ff 	andi r1,r1,0xff
 424:	c3 a0 00 00 	ret

00000428 <uart_putchar>:

void uart_putchar(char c)
{
 428:	78 02 00 00 	mvhi r2,0x0
 42c:	38 42 08 68 	ori r2,r2,0x868
 430:	28 43 00 00 	lw r3,(r2+0)
 434:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 438:	28 62 00 00 	lw r2,(r3+0)
 43c:	20 42 00 10 	andi r2,r2,0x10
 440:	5c 40 ff fe 	bne r2,r0,438 <uart_putchar+0x10>
	uart0->rxtx = c;
 444:	58 61 00 04 	sw (r3+4),r1
}
 448:	c3 a0 00 00 	ret

0000044c <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 44c:	40 24 00 00 	lbu r4,(r1+0)
 450:	44 80 00 0b 	be r4,r0,47c <uart_putstr+0x30>
 454:	78 02 00 00 	mvhi r2,0x0
 458:	38 42 08 68 	ori r2,r2,0x868
 45c:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 460:	28 62 00 00 	lw r2,(r3+0)
 464:	20 42 00 10 	andi r2,r2,0x10
 468:	5c 40 ff fe 	bne r2,r0,460 <uart_putstr+0x14>
	uart0->rxtx = c;
 46c:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 470:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 474:	40 24 00 00 	lbu r4,(r1+0)
 478:	5c 82 ff fa 	bne r4,r2,460 <uart_putstr+0x14>
 47c:	c3 a0 00 00 	ret

00000480 <leer_datos>:
    		set_pin(0,PINRGB);     
}


void leer_datos()
{
 480:	37 9c ff ec 	addi sp,sp,-20
 484:	5b 8b 00 14 	sw (sp+20),r11
 488:	5b 8c 00 10 	sw (sp+16),r12
 48c:	5b 8d 00 0c 	sw (sp+12),r13
 490:	5b 8e 00 08 	sw (sp+8),r14
 494:	5b 9d 00 04 	sw (sp+4),ra
 498:	78 0b 00 00 	mvhi r11,0x0
 49c:	39 6b 08 68 	ori r11,r11,0x868
 4a0:	29 62 00 00 	lw r2,(r11+0)
 * UART Functions
 */

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 4a4:	28 41 00 00 	lw r1,(r2+0)
 4a8:	20 21 00 01 	andi r1,r1,0x1
 4ac:	44 20 ff fe 	be r1,r0,4a4 <leer_datos+0x24>
	return uart0->rxtx;
 4b0:	28 41 00 04 	lw r1,(r2+4)
}


void leer_datos()
{
	tmp_var=uart_getchar();
 4b4:	78 0c 00 00 	mvhi r12,0x0
 4b8:	39 8c 08 8c 	ori r12,r12,0x88c
 */

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
	return uart0->rxtx;
 4bc:	20 21 00 ff 	andi r1,r1,0xff
}


void leer_datos()
{
	tmp_var=uart_getchar();
 4c0:	31 81 00 00 	sb (r12+0),r1
	if(tmp_var=='<')
 4c4:	34 02 00 3c 	mvi r2,60
 4c8:	44 22 00 0d 	be r1,r2,4fc <leer_datos+0x7c>
				uart_putchar(v_ch2);
				uart_putchar(v_ch3);	
	
			}
		}
	else if (tmp_var=='>')
 4cc:	34 02 00 3e 	mvi r2,62
 4d0:	5c 22 00 04 	bne r1,r2,4e0 <leer_datos+0x60>
	{
	status=0;
 4d4:	78 01 00 00 	mvhi r1,0x0
 4d8:	38 21 08 88 	ori r1,r1,0x888
 4dc:	58 20 00 00 	sw (r1+0),r0
	}
//	status=0;
}
 4e0:	2b 9d 00 04 	lw ra,(sp+4)
 4e4:	2b 8b 00 14 	lw r11,(sp+20)
 4e8:	2b 8c 00 10 	lw r12,(sp+16)
 4ec:	2b 8d 00 0c 	lw r13,(sp+12)
 4f0:	2b 8e 00 08 	lw r14,(sp+8)
 4f4:	37 9c 00 14 	addi sp,sp,20
 4f8:	c3 a0 00 00 	ret
void leer_datos()
{
	tmp_var=uart_getchar();
	if(tmp_var=='<')
		{
			uart_putstr("\nok <\n");
 4fc:	78 01 00 00 	mvhi r1,0x0
 500:	38 21 08 50 	ori r1,r1,0x850
 504:	fb ff ff d2 	calli 44c <uart_putstr>
 508:	29 61 00 00 	lw r1,(r11+0)
 * UART Functions
 */

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 50c:	28 22 00 00 	lw r2,(r1+0)
 510:	20 42 00 01 	andi r2,r2,0x1
 514:	44 40 ff fe 	be r2,r0,50c <leer_datos+0x8c>
	return uart0->rxtx;
 518:	28 23 00 04 	lw r3,(r1+4)
{
	tmp_var=uart_getchar();
	if(tmp_var=='<')
		{
			uart_putstr("\nok <\n");
			tmp_num=uart_getchar();
 51c:	78 02 00 00 	mvhi r2,0x0
 520:	38 42 08 8d 	ori r2,r2,0x88d
 */

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
	return uart0->rxtx;
 524:	20 63 00 ff 	andi r3,r3,0xff
{
	tmp_var=uart_getchar();
	if(tmp_var=='<')
		{
			uart_putstr("\nok <\n");
			tmp_num=uart_getchar();
 528:	30 43 00 00 	sb (r2+0),r3
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 52c:	28 22 00 00 	lw r2,(r1+0)
 530:	20 42 00 10 	andi r2,r2,0x10
 534:	5c 40 ff fe 	bne r2,r0,52c <leer_datos+0xac>
	uart0->rxtx = c;
 538:	58 23 00 04 	sw (r1+4),r3
 * UART Functions
 */

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 53c:	28 22 00 00 	lw r2,(r1+0)
 540:	20 42 00 01 	andi r2,r2,0x1
 544:	44 40 ff fe 	be r2,r0,53c <leer_datos+0xbc>
	return uart0->rxtx;
 548:	28 24 00 04 	lw r4,(r1+4)
 54c:	20 84 00 ff 	andi r4,r4,0xff
	if(tmp_var=='<')
		{
			uart_putstr("\nok <\n");
			tmp_num=uart_getchar();
				uart_putchar(tmp_num);
			tmp_var=uart_getchar();
 550:	31 84 00 00 	sb (r12+0),r4
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 554:	28 22 00 00 	lw r2,(r1+0)
 558:	20 42 00 10 	andi r2,r2,0x10
 55c:	5c 40 ff fe 	bne r2,r0,554 <leer_datos+0xd4>
	uart0->rxtx = c;
 560:	58 24 00 04 	sw (r1+4),r4
			uart_putstr("\nok <\n");
			tmp_num=uart_getchar();
				uart_putchar(tmp_num);
			tmp_var=uart_getchar();
				uart_putchar(tmp_var);
			if (tmp_var == 'c')
 564:	34 01 00 63 	mvi r1,99
 568:	44 81 00 29 	be r4,r1,60c <leer_datos+0x18c>
			{
			if (tmp_num <= 3)
					channel = tmp_num;				
			}
			else if (tmp_var == 'w') 
 56c:	34 01 00 77 	mvi r1,119
 570:	5c 81 ff dc 	bne r4,r1,4e0 <leer_datos+0x60>
			{
				w_c = tmp_num;
	   			if (channel==1)
 574:	78 02 00 00 	mvhi r2,0x0
 578:	38 42 08 80 	ori r2,r2,0x880
			if (tmp_num <= 3)
					channel = tmp_num;				
			}
			else if (tmp_var == 'w') 
			{
				w_c = tmp_num;
 57c:	78 01 00 00 	mvhi r1,0x0
	   			if (channel==1)
 580:	40 42 00 00 	lbu r2,(r2+0)
			if (tmp_num <= 3)
					channel = tmp_num;				
			}
			else if (tmp_var == 'w') 
			{
				w_c = tmp_num;
 584:	38 21 08 90 	ori r1,r1,0x890
 588:	58 23 00 00 	sw (r1+0),r3
	   			if (channel==1)
 58c:	34 01 00 01 	mvi r1,1
 590:	44 41 00 25 	be r2,r1,624 <leer_datos+0x1a4>
					v_ch1 = w_c;
				else if (channel==2) 
 594:	34 01 00 02 	mvi r1,2
 598:	44 41 00 2b 	be r2,r1,644 <leer_datos+0x1c4>
					v_ch2 = w_c;
				else if (channel==3) 
 59c:	34 01 00 03 	mvi r1,3
 5a0:	44 41 00 31 	be r2,r1,664 <leer_datos+0x1e4>
 5a4:	78 0e 00 00 	mvhi r14,0x0
 5a8:	78 0d 00 00 	mvhi r13,0x0
 5ac:	78 0c 00 00 	mvhi r12,0x0
 5b0:	39 ce 08 78 	ori r14,r14,0x878
 5b4:	39 ad 08 7c 	ori r13,r13,0x87c
 5b8:	39 8c 08 84 	ori r12,r12,0x884
					v_ch3 = w_c;

				uart_putstr("\n asignacion \n");
 5bc:	78 01 00 00 	mvhi r1,0x0
 5c0:	38 21 08 58 	ori r1,r1,0x858
 5c4:	fb ff ff a2 	calli 44c <uart_putstr>
				uart_putchar(v_ch1);
 5c8:	41 c3 00 03 	lbu r3,(r14+3)
 5cc:	29 61 00 00 	lw r1,(r11+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 5d0:	28 22 00 00 	lw r2,(r1+0)
 5d4:	20 42 00 10 	andi r2,r2,0x10
 5d8:	5c 40 ff fe 	bne r2,r0,5d0 <leer_datos+0x150>
				else if (channel==3) 
					v_ch3 = w_c;

				uart_putstr("\n asignacion \n");
				uart_putchar(v_ch1);
				uart_putchar(v_ch2);
 5dc:	41 a4 00 03 	lbu r4,(r13+3)
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
	uart0->rxtx = c;
 5e0:	58 23 00 04 	sw (r1+4),r3
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 5e4:	28 22 00 00 	lw r2,(r1+0)
 5e8:	20 42 00 10 	andi r2,r2,0x10
 5ec:	5c 40 ff fe 	bne r2,r0,5e4 <leer_datos+0x164>
					v_ch3 = w_c;

				uart_putstr("\n asignacion \n");
				uart_putchar(v_ch1);
				uart_putchar(v_ch2);
				uart_putchar(v_ch3);	
 5f0:	41 83 00 03 	lbu r3,(r12+3)
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
	uart0->rxtx = c;
 5f4:	58 24 00 04 	sw (r1+4),r4
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 5f8:	28 22 00 00 	lw r2,(r1+0)
 5fc:	20 42 00 10 	andi r2,r2,0x10
 600:	5c 40 ff fe 	bne r2,r0,5f8 <leer_datos+0x178>
	uart0->rxtx = c;
 604:	58 23 00 04 	sw (r1+4),r3
 608:	e3 ff ff b6 	bi 4e0 <leer_datos+0x60>
				uart_putchar(tmp_num);
			tmp_var=uart_getchar();
				uart_putchar(tmp_var);
			if (tmp_var == 'c')
			{
			if (tmp_num <= 3)
 60c:	34 01 00 03 	mvi r1,3
 610:	54 61 ff b4 	bgu r3,r1,4e0 <leer_datos+0x60>
					channel = tmp_num;				
 614:	78 01 00 00 	mvhi r1,0x0
 618:	38 21 08 80 	ori r1,r1,0x880
 61c:	30 23 00 00 	sb (r1+0),r3
 620:	e3 ff ff b0 	bi 4e0 <leer_datos+0x60>
			}
			else if (tmp_var == 'w') 
			{
				w_c = tmp_num;
	   			if (channel==1)
					v_ch1 = w_c;
 624:	78 0e 00 00 	mvhi r14,0x0
 628:	39 ce 08 78 	ori r14,r14,0x878
 62c:	78 0d 00 00 	mvhi r13,0x0
 630:	78 0c 00 00 	mvhi r12,0x0
 634:	59 c3 00 00 	sw (r14+0),r3
 638:	39 ad 08 7c 	ori r13,r13,0x87c
 63c:	39 8c 08 84 	ori r12,r12,0x884
 640:	e3 ff ff df 	bi 5bc <leer_datos+0x13c>
				else if (channel==2) 
					v_ch2 = w_c;
 644:	78 0d 00 00 	mvhi r13,0x0
 648:	39 ad 08 7c 	ori r13,r13,0x87c
 64c:	78 0e 00 00 	mvhi r14,0x0
 650:	78 0c 00 00 	mvhi r12,0x0
 654:	59 a3 00 00 	sw (r13+0),r3
 658:	39 ce 08 78 	ori r14,r14,0x878
 65c:	39 8c 08 84 	ori r12,r12,0x884
 660:	e3 ff ff d7 	bi 5bc <leer_datos+0x13c>
				else if (channel==3) 
					v_ch3 = w_c;
 664:	78 0c 00 00 	mvhi r12,0x0
 668:	39 8c 08 84 	ori r12,r12,0x884
 66c:	78 0e 00 00 	mvhi r14,0x0
 670:	78 0d 00 00 	mvhi r13,0x0
 674:	59 83 00 00 	sw (r12+0),r3
 678:	39 ce 08 78 	ori r14,r14,0x878
 67c:	39 ad 08 7c 	ori r13,r13,0x87c
 680:	e3 ff ff cf 	bi 5bc <leer_datos+0x13c>

00000684 <sleept1>:


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 684:	78 01 00 00 	mvhi r1,0x0
 688:	38 21 08 6c 	ori r1,r1,0x86c
 68c:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr1 = TIMER_EN;
 690:	34 01 00 08 	mvi r1,8


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 694:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 698:	58 41 00 0c 	sw (r2+12),r1
	do {
 		tcr = timer0->tcr1;
 69c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 6a0:	20 21 00 01 	andi r1,r1,0x1
 6a4:	44 20 ff fe 	be r1,r0,69c <sleept1+0x18>
}
 6a8:	c3 a0 00 00 	ret

000006ac <config_dmx>:


void config_dmx()
{
//configurar pin DMX_PIN como pin de salida 
	gpio0->dir |= DMX_PIN;
 6ac:	78 01 00 00 	mvhi r1,0x0
 6b0:	38 21 08 70 	ori r1,r1,0x870
 6b4:	28 21 00 00 	lw r1,(r1+0)
    //   gpio0->dir = gpio0->dir  | DMX_PIN;
    // config Use timer 1
	timer0->compare1 = (FCPU/1000000)*(TBIT); // for usecond
 6b8:	78 02 00 00 	mvhi r2,0x0
 6bc:	38 42 08 6c 	ori r2,r2,0x86c


void config_dmx()
{
//configurar pin DMX_PIN como pin de salida 
	gpio0->dir |= DMX_PIN;
 6c0:	28 23 00 08 	lw r3,(r1+8)
    //   gpio0->dir = gpio0->dir  | DMX_PIN;
    // config Use timer 1
	timer0->compare1 = (FCPU/1000000)*(TBIT); // for usecond
 6c4:	28 42 00 00 	lw r2,(r2+0)


void config_dmx()
{
//configurar pin DMX_PIN como pin de salida 
	gpio0->dir |= DMX_PIN;
 6c8:	38 63 00 01 	ori r3,r3,0x1
 6cc:	58 23 00 08 	sw (r1+8),r3
    //   gpio0->dir = gpio0->dir  | DMX_PIN;
    // config Use timer 1
	timer0->compare1 = (FCPU/1000000)*(TBIT); // for usecond
 6d0:	34 03 01 90 	mvi r3,400
 6d4:	58 43 00 10 	sw (r2+16),r3
	gpio0->write = gpio0->read | DMX_PIN;
 6d8:	28 22 00 00 	lw r2,(r1+0)
 6dc:	38 42 00 01 	ori r2,r2,0x1
 6e0:	58 22 00 04 	sw (r1+4),r2
 
}
 6e4:	c3 a0 00 00 	ret

000006e8 <pin_inv_old>:


void pin_inv_old(uint32_t num)
{
 6e8:	37 9c ff f8 	addi sp,sp,-8
 6ec:	5b 8b 00 08 	sw (sp+8),r11
 6f0:	5b 9d 00 04 	sw (sp+4),ra
	uint32_t i;
	uint32_t pin_act;
	pin_act = (~gpio0->read) & DMX_PIN;
 6f4:	78 02 00 00 	mvhi r2,0x0
 6f8:	38 42 08 70 	ori r2,r2,0x870
 6fc:	28 43 00 00 	lw r3,(r2+0)
 
}


void pin_inv_old(uint32_t num)
{
 700:	b8 20 58 00 	mv r11,r1
	uint32_t i;
	uint32_t pin_act;
	pin_act = (~gpio0->read) & DMX_PIN;
     set_pin(pin_act, DMX_PIN);
 704:	34 02 00 01 	mvi r2,1

void pin_inv_old(uint32_t num)
{
	uint32_t i;
	uint32_t pin_act;
	pin_act = (~gpio0->read) & DMX_PIN;
 708:	28 61 00 00 	lw r1,(r3+0)
 70c:	20 21 00 01 	andi r1,r1,0x1
     set_pin(pin_act, DMX_PIN);
 710:	18 21 00 01 	xori r1,r1,0x1
 714:	fb ff ff 09 	calli 338 <set_pin>
	for(i=0;i<num;i++)
 718:	45 60 00 0d 	be r11,r0,74c <pin_inv_old+0x64>
 71c:	78 01 00 00 	mvhi r1,0x0
 720:	38 21 08 6c 	ori r1,r1,0x86c
 724:	28 23 00 00 	lw r3,(r1+0)
 728:	34 04 00 00 	mvi r4,0

void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN;
 72c:	34 01 00 08 	mvi r1,8


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 730:	58 60 00 14 	sw (r3+20),r0
	timer0->tcr1 = TIMER_EN;
 734:	58 61 00 0c 	sw (r3+12),r1
	do {
 		tcr = timer0->tcr1;
 738:	28 62 00 0c 	lw r2,(r3+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 73c:	20 42 00 01 	andi r2,r2,0x1
 740:	44 40 ff fe 	be r2,r0,738 <pin_inv_old+0x50>
{
	uint32_t i;
	uint32_t pin_act;
	pin_act = (~gpio0->read) & DMX_PIN;
     set_pin(pin_act, DMX_PIN);
	for(i=0;i<num;i++)
 744:	34 84 00 01 	addi r4,r4,1
 748:	55 64 ff fa 	bgu r11,r4,730 <pin_inv_old+0x48>
		sleept1();
}
 74c:	2b 9d 00 04 	lw ra,(sp+4)
 750:	2b 8b 00 08 	lw r11,(sp+8)
 754:	37 9c 00 08 	addi sp,sp,8
 758:	c3 a0 00 00 	ret

0000075c <dmx_channel_send>:
 }



void dmx_channel_send(uint8_t value)
{
 75c:	37 9c ff ec 	addi sp,sp,-20
 760:	5b 8b 00 14 	sw (sp+20),r11
 764:	5b 8c 00 10 	sw (sp+16),r12
 768:	5b 8d 00 0c 	sw (sp+12),r13
 76c:	5b 8e 00 08 	sw (sp+8),r14
 770:	5b 9d 00 04 	sw (sp+4),ra
 774:	78 0d 00 00 	mvhi r13,0x0
 778:	20 2c 00 ff 	andi r12,r1,0xff
	uint8_t bit, i;
     pin_inv_old(1); // bita start
 77c:	34 01 00 01 	mvi r1,1
 780:	fb ff ff da 	calli 6e8 <pin_inv_old>
 784:	34 0b 00 08 	mvi r11,8
 788:	39 ad 08 6c 	ori r13,r13,0x86c

void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN;
 78c:	34 0e 00 08 	mvi r14,8
     pin_inv_old(1); // bita start
 	//nsleep(4000);
	for(i=0;i<8;i++)
	{
		bit=value & 0x01;
 		set_pinDMX(bit);	
 790:	21 81 00 01 	andi r1,r12,0x1
 794:	fb ff fe fb 	calli 380 <set_pinDMX>


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 798:	29 a2 00 00 	lw r2,(r13+0)
 	//nsleep(4000);
	for(i=0;i<8;i++)
	{
		bit=value & 0x01;
 		set_pinDMX(bit);	
		value=value>>1;
 79c:	01 8c 00 01 	srui r12,r12,1


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 7a0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 7a4:	58 4e 00 0c 	sw (r2+12),r14
	do {
 		tcr = timer0->tcr1;
 7a8:	28 43 00 0c 	lw r3,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 7ac:	20 63 00 01 	andi r3,r3,0x1
 7b0:	44 60 ff fe 	be r3,r0,7a8 <dmx_channel_send+0x4c>
 7b4:	35 6b ff ff 	addi r11,r11,-1
 7b8:	21 6b 00 ff 	andi r11,r11,0xff
void dmx_channel_send(uint8_t value)
{
	uint8_t bit, i;
     pin_inv_old(1); // bita start
 	//nsleep(4000);
	for(i=0;i<8;i++)
 7bc:	5d 60 ff f5 	bne r11,r0,790 <dmx_channel_send+0x34>
		bit=value & 0x01;
 		set_pinDMX(bit);	
		value=value>>1;
		sleept1();
        }
	gpio0->write = gpio0->read | DMX_PIN;
 7c0:	78 01 00 00 	mvhi r1,0x0
 7c4:	38 21 08 70 	ori r1,r1,0x870
 7c8:	28 21 00 00 	lw r1,(r1+0)
 7cc:	28 23 00 00 	lw r3,(r1+0)
 7d0:	38 63 00 01 	ori r3,r3,0x1
 7d4:	58 23 00 04 	sw (r1+4),r3


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 7d8:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 7dc:	34 01 00 08 	mvi r1,8
 7e0:	58 41 00 0c 	sw (r2+12),r1
	do {
 		tcr = timer0->tcr1;
 7e4:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 7e8:	20 21 00 01 	andi r1,r1,0x1
 7ec:	44 20 ff fe 	be r1,r0,7e4 <dmx_channel_send+0x88>


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 7f0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 7f4:	34 01 00 08 	mvi r1,8
 7f8:	58 41 00 0c 	sw (r2+12),r1
	do {
 		tcr = timer0->tcr1;
 7fc:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 800:	20 21 00 01 	andi r1,r1,0x1
 804:	44 20 ff fe 	be r1,r0,7fc <dmx_channel_send+0xa0>
		sleept1();
        }
	gpio0->write = gpio0->read | DMX_PIN;
	sleept1();
	sleept1();
}
 808:	2b 9d 00 04 	lw ra,(sp+4)
 80c:	2b 8b 00 14 	lw r11,(sp+20)
 810:	2b 8c 00 10 	lw r12,(sp+16)
 814:	2b 8d 00 0c 	lw r13,(sp+12)
 818:	2b 8e 00 08 	lw r14,(sp+8)
 81c:	37 9c 00 14 	addi sp,sp,20
 820:	c3 a0 00 00 	ret

00000824 <dmx_init_send>:
}



void dmx_init_send()
{
 824:	37 9c ff fc 	addi sp,sp,-4
 828:	5b 9d 00 04 	sw (sp+4),ra
	pin_inv_old(22);
 82c:	34 01 00 16 	mvi r1,22
 830:	fb ff ff ae 	calli 6e8 <pin_inv_old>
	pin_inv_old(2);
 834:	34 01 00 02 	mvi r1,2
 838:	fb ff ff ac 	calli 6e8 <pin_inv_old>
	dmx_channel_send(0);    	
 83c:	34 01 00 00 	mvi r1,0
 840:	fb ff ff c7 	calli 75c <dmx_channel_send>
 }
 844:	2b 9d 00 04 	lw ra,(sp+4)
 848:	37 9c 00 04 	addi sp,sp,4
 84c:	c3 a0 00 00 	ret
