
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         000008a8  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000018  000008a8  000008a8  000008fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         0000001c  000008c0  000008c0  00000914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000010  000008dc  000008dc  00000930  2**2
                  ALLOC
  4 .debug_abbrev 000003fc  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a22  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000688  00000000  00000000  0000174e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000130  00000000  00000000  00001dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000019e  00000000  00000000  00001f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 000000ce  00000000  00000000  000020a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000060  00000000  00000000  00002174  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000218  00000000  00000000  000021d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  000023ec  2**0
                  CONTENTS, READONLY
 13 .debug_loc    0000031f  00000000  00000000  000023fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000a0  00000000  00000000  0000271c  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 89 	calli 2f0 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 08 e0 	ori gp,gp,0x8e0
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 08 dc 	ori r1,r1,0x8dc
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 08 ec 	ori r3,r3,0x8ec

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
#include "soc-hw.h"
#include "txdmx.h"


int main()
{
 208:	37 9c ff ec 	addi sp,sp,-20
 20c:	5b 8b 00 14 	sw (sp+20),r11
 210:	5b 8c 00 10 	sw (sp+16),r12
 214:	5b 8d 00 0c 	sw (sp+12),r13
 218:	5b 8e 00 08 	sw (sp+8),r14
 21c:	5b 9d 00 04 	sw (sp+4),ra
	config_dmx();
 220:	f8 00 01 39 	calli 704 <config_dmx>
	gpio0->dir = 0xFF;
 224:	78 01 00 00 	mvhi r1,0x0
 228:	38 21 08 c8 	ori r1,r1,0x8c8
 22c:	28 21 00 00 	lw r1,(r1+0)
 230:	34 02 00 ff 	mvi r2,255
 234:	78 0e 00 00 	mvhi r14,0x0
 238:	58 22 00 08 	sw (r1+8),r2
 23c:	78 0d 00 00 	mvhi r13,0x0
 240:	78 0c 00 00 	mvhi r12,0x0
 244:	78 0b 00 00 	mvhi r11,0x0
	gpio0->write = 0xFF;
 248:	58 22 00 04 	sw (r1+4),r2
 24c:	39 ce 08 d0 	ori r14,r14,0x8d0
 250:	39 ad 08 d4 	ori r13,r13,0x8d4
 254:	39 8c 08 dc 	ori r12,r12,0x8dc
 258:	39 6b 08 c0 	ori r11,r11,0x8c0
//	irq_set_mask(0x02);
//	irq_enable();

	for(;;)
	{
			dmx_init_send();
 25c:	f8 00 01 88 	calli 87c <dmx_init_send>
			sleept1();
 260:	f8 00 01 1f 	calli 6dc <sleept1>
			dmx_channel_send(v_ch1);
 264:	41 c1 00 03 	lbu r1,(r14+3)
 268:	f8 00 01 53 	calli 7b4 <dmx_channel_send>
			sleept1();
 26c:	f8 00 01 1c 	calli 6dc <sleept1>
			dmx_channel_send(v_ch2);
 270:	41 a1 00 03 	lbu r1,(r13+3)
 274:	f8 00 01 50 	calli 7b4 <dmx_channel_send>
			sleept1();
 278:	f8 00 01 19 	calli 6dc <sleept1>
			dmx_channel_send(v_ch3);
 27c:	41 81 00 03 	lbu r1,(r12+3)
 280:	f8 00 01 4d 	calli 7b4 <dmx_channel_send>
			sleept1();
 284:	f8 00 01 16 	calli 6dc <sleept1>
			if ( uart0->ucr & UART_DR)
 288:	29 61 00 00 	lw r1,(r11+0)
 28c:	28 21 00 00 	lw r1,(r1+0)
 290:	20 21 00 01 	andi r1,r1,0x1
 294:	44 20 ff f2 	be r1,r0,25c <main+0x54>
				leer_datos();				
 298:	f8 00 00 95 	calli 4ec <leer_datos>
 29c:	e3 ff ff f0 	bi 25c <main+0x54>

000002a0 <pwm>:
}


void pwm(uint8_t PINRGB, int Valor_C)
{
	if (contador < Valor_C)
 2a0:	78 03 00 00 	mvhi r3,0x0
 2a4:	38 63 08 e8 	ori r3,r3,0x8e8
 2a8:	28 63 00 00 	lw r3,(r3+0)

}


void pwm(uint8_t PINRGB, int Valor_C)
{
 2ac:	20 21 00 ff 	andi r1,r1,0xff
	if (contador < Valor_C)
 2b0:	4c 62 00 08 	bge r3,r2,2d0 <pwm+0x30>
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 2b4:	78 02 00 00 	mvhi r2,0x0
 2b8:	38 42 08 c8 	ori r2,r2,0x8c8
 2bc:	28 42 00 00 	lw r2,(r2+0)
 2c0:	28 43 00 00 	lw r3,(r2+0)
 2c4:	b8 23 08 00 	or r1,r1,r3
 2c8:	58 41 00 04 	sw (r2+4),r1
 2cc:	c3 a0 00 00 	ret
	else
		gpio0->write = gpio0->read & (~npin);
 2d0:	78 02 00 00 	mvhi r2,0x0
 2d4:	38 42 08 c8 	ori r2,r2,0x8c8
 2d8:	28 42 00 00 	lw r2,(r2+0)
 2dc:	a4 20 08 00 	not r1,r1
 2e0:	28 43 00 00 	lw r3,(r2+0)
 2e4:	a0 23 08 00 	and r1,r1,r3
 2e8:	58 41 00 04 	sw (r2+4),r1
 2ec:	c3 a0 00 00 	ret

000002f0 <irq_handler>:
/***************************************************************************
 * IRQ handling
 */

void irq_handler(uint32_t pending)
{
 2f0:	37 9c ff fc 	addi sp,sp,-4
 2f4:	5b 9d 00 04 	sw (sp+4),ra

	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     
	contador =contador+1;
 2f8:	78 01 00 00 	mvhi r1,0x0
 2fc:	38 21 08 e8 	ori r1,r1,0x8e8
 */

void irq_handler(uint32_t pending)
{

	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 300:	78 02 00 00 	mvhi r2,0x0
     
	contador =contador+1;
 304:	28 24 00 00 	lw r4,(r1+0)
 */

void irq_handler(uint32_t pending)
{

	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 308:	38 42 08 c4 	ori r2,r2,0x8c4
 30c:	28 43 00 00 	lw r3,(r2+0)
     
	contador =contador+1;
 310:	34 82 00 01 	addi r2,r4,1
 */

void irq_handler(uint32_t pending)
{

	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 314:	34 04 00 0e 	mvi r4,14
 318:	58 64 00 00 	sw (r3+0),r4
     
	contador =contador+1;
 31c:	58 22 00 00 	sw (r1+0),r2
     if (contador > 255)
 320:	34 03 00 ff 	mvi r3,255
 324:	4c 62 00 02 	bge r3,r2,32c <irq_handler+0x3c>
		contador =0;
 328:	58 20 00 00 	sw (r1+0),r0


	pwm(PIN_R, v_ch1);
 32c:	78 01 00 00 	mvhi r1,0x0
 330:	38 21 08 d0 	ori r1,r1,0x8d0
 334:	28 22 00 00 	lw r2,(r1+0)
 338:	34 01 00 02 	mvi r1,2
 33c:	fb ff ff d9 	calli 2a0 <pwm>
	pwm(PIN_G, v_ch2);
 340:	78 01 00 00 	mvhi r1,0x0
 344:	38 21 08 d4 	ori r1,r1,0x8d4
 348:	28 22 00 00 	lw r2,(r1+0)
 34c:	34 01 00 04 	mvi r1,4
 350:	fb ff ff d4 	calli 2a0 <pwm>
	pwm(PIN_B, v_ch3);
 354:	78 01 00 00 	mvhi r1,0x0
 358:	38 21 08 dc 	ori r1,r1,0x8dc
 35c:	28 22 00 00 	lw r2,(r1+0)
 360:	34 01 00 08 	mvi r1,8
 364:	fb ff ff cf 	calli 2a0 <pwm>


}
 368:	2b 9d 00 04 	lw ra,(sp+4)
 36c:	37 9c 00 04 	addi sp,sp,4
 370:	c3 a0 00 00 	ret

00000374 <tic_init0>:
 */


void tic_init0()
{
	timer0->compare0 = (FCPU/1000000)*40;
 374:	78 01 00 00 	mvhi r1,0x0
 378:	38 21 08 c4 	ori r1,r1,0x8c4
 37c:	28 22 00 00 	lw r2,(r1+0)
 380:	34 01 0f a0 	mvi r1,4000
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR| TIMER_IRQEN;
 384:	34 03 00 0e 	mvi r3,14
 */


void tic_init0()
{
	timer0->compare0 = (FCPU/1000000)*40;
 388:	58 41 00 04 	sw (r2+4),r1
	timer0->counter0 = 0;
 38c:	58 40 00 08 	sw (r2+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR| TIMER_IRQEN;
	contador=0;
 390:	78 01 00 00 	mvhi r1,0x0

void tic_init0()
{
	timer0->compare0 = (FCPU/1000000)*40;
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR| TIMER_IRQEN;
 394:	58 43 00 00 	sw (r2+0),r3
	contador=0;
 398:	38 21 08 e8 	ori r1,r1,0x8e8
 39c:	58 20 00 00 	sw (r1+0),r0
}
 3a0:	c3 a0 00 00 	ret

000003a4 <set_pin>:
/**********************************************************
 * GPIO Functions
 */

void set_pin(uint8_t value, uint8_t npin)
{
 3a4:	20 21 00 ff 	andi r1,r1,0xff
 3a8:	20 42 00 ff 	andi r2,r2,0xff
     if (value)
 3ac:	5c 20 00 09 	bne r1,r0,3d0 <set_pin+0x2c>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 3b0:	78 01 00 00 	mvhi r1,0x0
 3b4:	38 21 08 c8 	ori r1,r1,0x8c8
 3b8:	28 21 00 00 	lw r1,(r1+0)
 3bc:	a4 40 10 00 	not r2,r2
 3c0:	28 23 00 00 	lw r3,(r1+0)
 3c4:	a0 43 10 00 	and r2,r2,r3
 3c8:	58 22 00 04 	sw (r1+4),r2
 3cc:	c3 a0 00 00 	ret
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 3d0:	78 01 00 00 	mvhi r1,0x0
 3d4:	38 21 08 c8 	ori r1,r1,0x8c8
 3d8:	28 21 00 00 	lw r1,(r1+0)
 3dc:	28 23 00 00 	lw r3,(r1+0)
 3e0:	b8 43 10 00 	or r2,r2,r3
 3e4:	58 22 00 04 	sw (r1+4),r2
 3e8:	c3 a0 00 00 	ret

000003ec <set_pinDMX>:
		gpio0->write = gpio0->read & (~npin);

}

void set_pinDMX(uint8_t value)
{
 3ec:	20 21 00 ff 	andi r1,r1,0xff
     if (value)
 3f0:	5c 20 00 08 	bne r1,r0,410 <set_pinDMX+0x24>
		gpio0->write = gpio0->read | 0x01;
	else
		gpio0->write = gpio0->read & 0xFE;
 3f4:	78 01 00 00 	mvhi r1,0x0
 3f8:	38 21 08 c8 	ori r1,r1,0x8c8
 3fc:	28 21 00 00 	lw r1,(r1+0)
 400:	28 22 00 00 	lw r2,(r1+0)
 404:	20 42 00 fe 	andi r2,r2,0xfe
 408:	58 22 00 04 	sw (r1+4),r2
 40c:	c3 a0 00 00 	ret
}

void set_pinDMX(uint8_t value)
{
     if (value)
		gpio0->write = gpio0->read | 0x01;
 410:	78 01 00 00 	mvhi r1,0x0
 414:	38 21 08 c8 	ori r1,r1,0x8c8
 418:	28 21 00 00 	lw r1,(r1+0)
 41c:	28 22 00 00 	lw r2,(r1+0)
 420:	38 42 00 01 	ori r2,r2,0x1
 424:	58 22 00 04 	sw (r1+4),r2
 428:	c3 a0 00 00 	ret

0000042c <pin_inv>:
}

void pin_inv(uint8_t npin)
{
	uint32_t val;
	val = (~gpio0->read) & npin;
 42c:	78 02 00 00 	mvhi r2,0x0
 430:	38 42 08 c8 	ori r2,r2,0x8c8
 434:	28 42 00 00 	lw r2,(r2+0)
		gpio0->write = gpio0->read & 0xFE;

}

void pin_inv(uint8_t npin)
{
 438:	20 21 00 ff 	andi r1,r1,0xff
	uint32_t val;
	val = (~gpio0->read) & npin;
 43c:	28 43 00 00 	lw r3,(r2+0)
 440:	a4 60 18 00 	not r3,r3
 * GPIO Functions
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
 444:	a0 23 18 00 	and r3,r1,r3
 448:	5c 60 00 06 	bne r3,r0,460 <pin_inv+0x34>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 44c:	28 43 00 00 	lw r3,(r2+0)
 450:	a4 20 08 00 	not r1,r1
 454:	a0 23 08 00 	and r1,r1,r3
 458:	58 41 00 04 	sw (r2+4),r1
 45c:	c3 a0 00 00 	ret
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 460:	28 43 00 00 	lw r3,(r2+0)
 464:	b8 23 08 00 	or r1,r1,r3
 468:	58 41 00 04 	sw (r2+4),r1
 46c:	c3 a0 00 00 	ret

00000470 <uart_getchar>:
/***************************************************************************
 * UART Functions
 */

char uart_getchar()
{   
 470:	78 01 00 00 	mvhi r1,0x0
 474:	38 21 08 c0 	ori r1,r1,0x8c0
 478:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 47c:	28 41 00 00 	lw r1,(r2+0)
 480:	20 21 00 01 	andi r1,r1,0x1
 484:	44 20 ff fe 	be r1,r0,47c <uart_getchar+0xc>
	return uart0->rxtx;
 488:	28 41 00 04 	lw r1,(r2+4)
}
 48c:	20 21 00 ff 	andi r1,r1,0xff
 490:	c3 a0 00 00 	ret

00000494 <uart_putchar>:

void uart_putchar(char c)
{
 494:	78 02 00 00 	mvhi r2,0x0
 498:	38 42 08 c0 	ori r2,r2,0x8c0
 49c:	28 43 00 00 	lw r3,(r2+0)
 4a0:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 4a4:	28 62 00 00 	lw r2,(r3+0)
 4a8:	20 42 00 10 	andi r2,r2,0x10
 4ac:	5c 40 ff fe 	bne r2,r0,4a4 <uart_putchar+0x10>
	uart0->rxtx = c;
 4b0:	58 61 00 04 	sw (r3+4),r1
}
 4b4:	c3 a0 00 00 	ret

000004b8 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 4b8:	40 24 00 00 	lbu r4,(r1+0)
 4bc:	44 80 00 0b 	be r4,r0,4e8 <uart_putstr+0x30>
 4c0:	78 02 00 00 	mvhi r2,0x0
 4c4:	38 42 08 c0 	ori r2,r2,0x8c0
 4c8:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 4cc:	28 62 00 00 	lw r2,(r3+0)
 4d0:	20 42 00 10 	andi r2,r2,0x10
 4d4:	5c 40 ff fe 	bne r2,r0,4cc <uart_putstr+0x14>
	uart0->rxtx = c;
 4d8:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 4dc:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 4e0:	40 24 00 00 	lbu r4,(r1+0)
 4e4:	5c 82 ff fa 	bne r4,r2,4cc <uart_putstr+0x14>
 4e8:	c3 a0 00 00 	ret

000004ec <leer_datos>:
    		set_pin(0,PINRGB);     
}


void leer_datos()
{
 4ec:	37 9c ff ec 	addi sp,sp,-20
 4f0:	5b 8b 00 14 	sw (sp+20),r11
 4f4:	5b 8c 00 10 	sw (sp+16),r12
 4f8:	5b 8d 00 0c 	sw (sp+12),r13
 4fc:	5b 8e 00 08 	sw (sp+8),r14
 500:	5b 9d 00 04 	sw (sp+4),ra
 504:	78 0b 00 00 	mvhi r11,0x0
 508:	39 6b 08 c0 	ori r11,r11,0x8c0
 50c:	29 62 00 00 	lw r2,(r11+0)
 * UART Functions
 */

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 510:	28 41 00 00 	lw r1,(r2+0)
 514:	20 21 00 01 	andi r1,r1,0x1
 518:	44 20 ff fe 	be r1,r0,510 <leer_datos+0x24>
	return uart0->rxtx;
 51c:	28 41 00 04 	lw r1,(r2+4)
}


void leer_datos()
{
	tmp_var=uart_getchar();
 520:	78 0c 00 00 	mvhi r12,0x0
 524:	39 8c 08 e0 	ori r12,r12,0x8e0
 */

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
	return uart0->rxtx;
 528:	20 21 00 ff 	andi r1,r1,0xff
}


void leer_datos()
{
	tmp_var=uart_getchar();
 52c:	31 81 00 00 	sb (r12+0),r1
	if(tmp_var=='<')
 530:	34 02 00 3c 	mvi r2,60
 534:	44 22 00 08 	be r1,r2,554 <leer_datos+0x68>
				uart_putchar(v_ch2);
				uart_putchar(v_ch3);	
	
			}
		}
}
 538:	2b 9d 00 04 	lw ra,(sp+4)
 53c:	2b 8b 00 14 	lw r11,(sp+20)
 540:	2b 8c 00 10 	lw r12,(sp+16)
 544:	2b 8d 00 0c 	lw r13,(sp+12)
 548:	2b 8e 00 08 	lw r14,(sp+8)
 54c:	37 9c 00 14 	addi sp,sp,20
 550:	c3 a0 00 00 	ret
void leer_datos()
{
	tmp_var=uart_getchar();
	if(tmp_var=='<')
		{
			uart_putstr("\nok <\n");
 554:	78 01 00 00 	mvhi r1,0x0
 558:	38 21 08 a8 	ori r1,r1,0x8a8
 55c:	fb ff ff d7 	calli 4b8 <uart_putstr>
 560:	29 61 00 00 	lw r1,(r11+0)
 * UART Functions
 */

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 564:	28 22 00 00 	lw r2,(r1+0)
 568:	20 42 00 01 	andi r2,r2,0x1
 56c:	44 40 ff fe 	be r2,r0,564 <leer_datos+0x78>
	return uart0->rxtx;
 570:	28 23 00 04 	lw r3,(r1+4)
{
	tmp_var=uart_getchar();
	if(tmp_var=='<')
		{
			uart_putstr("\nok <\n");
			tmp_num=uart_getchar();
 574:	78 02 00 00 	mvhi r2,0x0
 578:	38 42 08 e1 	ori r2,r2,0x8e1
 */

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
	return uart0->rxtx;
 57c:	20 63 00 ff 	andi r3,r3,0xff
{
	tmp_var=uart_getchar();
	if(tmp_var=='<')
		{
			uart_putstr("\nok <\n");
			tmp_num=uart_getchar();
 580:	30 43 00 00 	sb (r2+0),r3
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 584:	28 22 00 00 	lw r2,(r1+0)
 588:	20 42 00 10 	andi r2,r2,0x10
 58c:	5c 40 ff fe 	bne r2,r0,584 <leer_datos+0x98>
	uart0->rxtx = c;
 590:	58 23 00 04 	sw (r1+4),r3
 * UART Functions
 */

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 594:	28 22 00 00 	lw r2,(r1+0)
 598:	20 42 00 01 	andi r2,r2,0x1
 59c:	44 40 ff fe 	be r2,r0,594 <leer_datos+0xa8>
	return uart0->rxtx;
 5a0:	28 24 00 04 	lw r4,(r1+4)
 5a4:	20 84 00 ff 	andi r4,r4,0xff
	if(tmp_var=='<')
		{
			uart_putstr("\nok <\n");
			tmp_num=uart_getchar();
				uart_putchar(tmp_num);
			tmp_var=uart_getchar();
 5a8:	31 84 00 00 	sb (r12+0),r4
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 5ac:	28 22 00 00 	lw r2,(r1+0)
 5b0:	20 42 00 10 	andi r2,r2,0x10
 5b4:	5c 40 ff fe 	bne r2,r0,5ac <leer_datos+0xc0>
	uart0->rxtx = c;
 5b8:	58 24 00 04 	sw (r1+4),r4
			uart_putstr("\nok <\n");
			tmp_num=uart_getchar();
				uart_putchar(tmp_num);
			tmp_var=uart_getchar();
				uart_putchar(tmp_var);
			if (tmp_var == 'c')
 5bc:	34 01 00 63 	mvi r1,99
 5c0:	44 81 00 29 	be r4,r1,664 <leer_datos+0x178>
			{
			if (tmp_num <= 3)
					channel = tmp_num;				
			}
			else if (tmp_var == 'w') 
 5c4:	34 01 00 77 	mvi r1,119
 5c8:	5c 81 ff dc 	bne r4,r1,538 <leer_datos+0x4c>
			{
				w_c = tmp_num;
	   			if (channel==1)
 5cc:	78 02 00 00 	mvhi r2,0x0
 5d0:	38 42 08 d8 	ori r2,r2,0x8d8
			if (tmp_num <= 3)
					channel = tmp_num;				
			}
			else if (tmp_var == 'w') 
			{
				w_c = tmp_num;
 5d4:	78 01 00 00 	mvhi r1,0x0
	   			if (channel==1)
 5d8:	40 42 00 00 	lbu r2,(r2+0)
			if (tmp_num <= 3)
					channel = tmp_num;				
			}
			else if (tmp_var == 'w') 
			{
				w_c = tmp_num;
 5dc:	38 21 08 e4 	ori r1,r1,0x8e4
 5e0:	58 23 00 00 	sw (r1+0),r3
	   			if (channel==1)
 5e4:	34 01 00 01 	mvi r1,1
 5e8:	44 41 00 25 	be r2,r1,67c <leer_datos+0x190>
					v_ch1 = w_c;
				else if (channel==2) 
 5ec:	34 01 00 02 	mvi r1,2
 5f0:	44 41 00 2b 	be r2,r1,69c <leer_datos+0x1b0>
					v_ch2 = w_c;
				else if (channel==3) 
 5f4:	34 01 00 03 	mvi r1,3
 5f8:	44 41 00 31 	be r2,r1,6bc <leer_datos+0x1d0>
 5fc:	78 0e 00 00 	mvhi r14,0x0
 600:	78 0d 00 00 	mvhi r13,0x0
 604:	78 0c 00 00 	mvhi r12,0x0
 608:	39 ce 08 d0 	ori r14,r14,0x8d0
 60c:	39 ad 08 d4 	ori r13,r13,0x8d4
 610:	39 8c 08 dc 	ori r12,r12,0x8dc
					v_ch3 = w_c;

				uart_putstr("\n asignacion \n");
 614:	78 01 00 00 	mvhi r1,0x0
 618:	38 21 08 b0 	ori r1,r1,0x8b0
 61c:	fb ff ff a7 	calli 4b8 <uart_putstr>
				uart_putchar(v_ch1);
 620:	41 c3 00 03 	lbu r3,(r14+3)
 624:	29 61 00 00 	lw r1,(r11+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 628:	28 22 00 00 	lw r2,(r1+0)
 62c:	20 42 00 10 	andi r2,r2,0x10
 630:	5c 40 ff fe 	bne r2,r0,628 <leer_datos+0x13c>
				else if (channel==3) 
					v_ch3 = w_c;

				uart_putstr("\n asignacion \n");
				uart_putchar(v_ch1);
				uart_putchar(v_ch2);
 634:	41 a4 00 03 	lbu r4,(r13+3)
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
	uart0->rxtx = c;
 638:	58 23 00 04 	sw (r1+4),r3
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 63c:	28 22 00 00 	lw r2,(r1+0)
 640:	20 42 00 10 	andi r2,r2,0x10
 644:	5c 40 ff fe 	bne r2,r0,63c <leer_datos+0x150>
					v_ch3 = w_c;

				uart_putstr("\n asignacion \n");
				uart_putchar(v_ch1);
				uart_putchar(v_ch2);
				uart_putchar(v_ch3);	
 648:	41 83 00 03 	lbu r3,(r12+3)
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
	uart0->rxtx = c;
 64c:	58 24 00 04 	sw (r1+4),r4
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 650:	28 22 00 00 	lw r2,(r1+0)
 654:	20 42 00 10 	andi r2,r2,0x10
 658:	5c 40 ff fe 	bne r2,r0,650 <leer_datos+0x164>
	uart0->rxtx = c;
 65c:	58 23 00 04 	sw (r1+4),r3
 660:	e3 ff ff b6 	bi 538 <leer_datos+0x4c>
				uart_putchar(tmp_num);
			tmp_var=uart_getchar();
				uart_putchar(tmp_var);
			if (tmp_var == 'c')
			{
			if (tmp_num <= 3)
 664:	34 01 00 03 	mvi r1,3
 668:	54 61 ff b4 	bgu r3,r1,538 <leer_datos+0x4c>
					channel = tmp_num;				
 66c:	78 01 00 00 	mvhi r1,0x0
 670:	38 21 08 d8 	ori r1,r1,0x8d8
 674:	30 23 00 00 	sb (r1+0),r3
 678:	e3 ff ff b0 	bi 538 <leer_datos+0x4c>
			}
			else if (tmp_var == 'w') 
			{
				w_c = tmp_num;
	   			if (channel==1)
					v_ch1 = w_c;
 67c:	78 0e 00 00 	mvhi r14,0x0
 680:	39 ce 08 d0 	ori r14,r14,0x8d0
 684:	78 0d 00 00 	mvhi r13,0x0
 688:	78 0c 00 00 	mvhi r12,0x0
 68c:	59 c3 00 00 	sw (r14+0),r3
 690:	39 ad 08 d4 	ori r13,r13,0x8d4
 694:	39 8c 08 dc 	ori r12,r12,0x8dc
 698:	e3 ff ff df 	bi 614 <leer_datos+0x128>
				else if (channel==2) 
					v_ch2 = w_c;
 69c:	78 0d 00 00 	mvhi r13,0x0
 6a0:	39 ad 08 d4 	ori r13,r13,0x8d4
 6a4:	78 0e 00 00 	mvhi r14,0x0
 6a8:	78 0c 00 00 	mvhi r12,0x0
 6ac:	59 a3 00 00 	sw (r13+0),r3
 6b0:	39 ce 08 d0 	ori r14,r14,0x8d0
 6b4:	39 8c 08 dc 	ori r12,r12,0x8dc
 6b8:	e3 ff ff d7 	bi 614 <leer_datos+0x128>
				else if (channel==3) 
					v_ch3 = w_c;
 6bc:	78 0c 00 00 	mvhi r12,0x0
 6c0:	39 8c 08 dc 	ori r12,r12,0x8dc
 6c4:	78 0e 00 00 	mvhi r14,0x0
 6c8:	78 0d 00 00 	mvhi r13,0x0
 6cc:	59 83 00 00 	sw (r12+0),r3
 6d0:	39 ce 08 d0 	ori r14,r14,0x8d0
 6d4:	39 ad 08 d4 	ori r13,r13,0x8d4
 6d8:	e3 ff ff cf 	bi 614 <leer_datos+0x128>

000006dc <sleept1>:


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 6dc:	78 01 00 00 	mvhi r1,0x0
 6e0:	38 21 08 c4 	ori r1,r1,0x8c4
 6e4:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr1 = TIMER_EN;
 6e8:	34 01 00 08 	mvi r1,8


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 6ec:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 6f0:	58 41 00 0c 	sw (r2+12),r1
	do {
 		tcr = timer0->tcr1;
 6f4:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 6f8:	20 21 00 01 	andi r1,r1,0x1
 6fc:	44 20 ff fe 	be r1,r0,6f4 <sleept1+0x18>
}
 700:	c3 a0 00 00 	ret

00000704 <config_dmx>:


void config_dmx()
{
//configurar pin DMX_PIN como pin de salida 
	gpio0->dir |= DMX_PIN;
 704:	78 01 00 00 	mvhi r1,0x0
 708:	38 21 08 c8 	ori r1,r1,0x8c8
 70c:	28 21 00 00 	lw r1,(r1+0)
    //   gpio0->dir = gpio0->dir  | DMX_PIN;
    // config Use timer 1
	timer0->compare1 = (FCPU/1000000)*(TBIT); // for usecond
 710:	78 02 00 00 	mvhi r2,0x0
 714:	38 42 08 c4 	ori r2,r2,0x8c4


void config_dmx()
{
//configurar pin DMX_PIN como pin de salida 
	gpio0->dir |= DMX_PIN;
 718:	28 23 00 08 	lw r3,(r1+8)
    //   gpio0->dir = gpio0->dir  | DMX_PIN;
    // config Use timer 1
	timer0->compare1 = (FCPU/1000000)*(TBIT); // for usecond
 71c:	28 42 00 00 	lw r2,(r2+0)


void config_dmx()
{
//configurar pin DMX_PIN como pin de salida 
	gpio0->dir |= DMX_PIN;
 720:	38 63 00 01 	ori r3,r3,0x1
 724:	58 23 00 08 	sw (r1+8),r3
    //   gpio0->dir = gpio0->dir  | DMX_PIN;
    // config Use timer 1
	timer0->compare1 = (FCPU/1000000)*(TBIT); // for usecond
 728:	34 03 01 90 	mvi r3,400
 72c:	58 43 00 10 	sw (r2+16),r3
	gpio0->write = gpio0->read | DMX_PIN;
 730:	28 22 00 00 	lw r2,(r1+0)
 734:	38 42 00 01 	ori r2,r2,0x1
 738:	58 22 00 04 	sw (r1+4),r2
 
}
 73c:	c3 a0 00 00 	ret

00000740 <pin_inv_old>:


void pin_inv_old(uint32_t num)
{
 740:	37 9c ff f8 	addi sp,sp,-8
 744:	5b 8b 00 08 	sw (sp+8),r11
 748:	5b 9d 00 04 	sw (sp+4),ra
	uint32_t i;
	uint32_t pin_act;
	pin_act = (~gpio0->read) & DMX_PIN;
 74c:	78 02 00 00 	mvhi r2,0x0
 750:	38 42 08 c8 	ori r2,r2,0x8c8
 754:	28 43 00 00 	lw r3,(r2+0)
 
}


void pin_inv_old(uint32_t num)
{
 758:	b8 20 58 00 	mv r11,r1
	uint32_t i;
	uint32_t pin_act;
	pin_act = (~gpio0->read) & DMX_PIN;
     set_pin(pin_act, DMX_PIN);
 75c:	34 02 00 01 	mvi r2,1

void pin_inv_old(uint32_t num)
{
	uint32_t i;
	uint32_t pin_act;
	pin_act = (~gpio0->read) & DMX_PIN;
 760:	28 61 00 00 	lw r1,(r3+0)
 764:	20 21 00 01 	andi r1,r1,0x1
     set_pin(pin_act, DMX_PIN);
 768:	18 21 00 01 	xori r1,r1,0x1
 76c:	fb ff ff 0e 	calli 3a4 <set_pin>
	for(i=0;i<num;i++)
 770:	45 60 00 0d 	be r11,r0,7a4 <pin_inv_old+0x64>
 774:	78 01 00 00 	mvhi r1,0x0
 778:	38 21 08 c4 	ori r1,r1,0x8c4
 77c:	28 23 00 00 	lw r3,(r1+0)
 780:	34 04 00 00 	mvi r4,0

void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN;
 784:	34 01 00 08 	mvi r1,8


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 788:	58 60 00 14 	sw (r3+20),r0
	timer0->tcr1 = TIMER_EN;
 78c:	58 61 00 0c 	sw (r3+12),r1
	do {
 		tcr = timer0->tcr1;
 790:	28 62 00 0c 	lw r2,(r3+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 794:	20 42 00 01 	andi r2,r2,0x1
 798:	44 40 ff fe 	be r2,r0,790 <pin_inv_old+0x50>
{
	uint32_t i;
	uint32_t pin_act;
	pin_act = (~gpio0->read) & DMX_PIN;
     set_pin(pin_act, DMX_PIN);
	for(i=0;i<num;i++)
 79c:	34 84 00 01 	addi r4,r4,1
 7a0:	55 64 ff fa 	bgu r11,r4,788 <pin_inv_old+0x48>
		sleept1();
}
 7a4:	2b 9d 00 04 	lw ra,(sp+4)
 7a8:	2b 8b 00 08 	lw r11,(sp+8)
 7ac:	37 9c 00 08 	addi sp,sp,8
 7b0:	c3 a0 00 00 	ret

000007b4 <dmx_channel_send>:
 }



void dmx_channel_send(uint8_t value)
{
 7b4:	37 9c ff ec 	addi sp,sp,-20
 7b8:	5b 8b 00 14 	sw (sp+20),r11
 7bc:	5b 8c 00 10 	sw (sp+16),r12
 7c0:	5b 8d 00 0c 	sw (sp+12),r13
 7c4:	5b 8e 00 08 	sw (sp+8),r14
 7c8:	5b 9d 00 04 	sw (sp+4),ra
 7cc:	78 0d 00 00 	mvhi r13,0x0
 7d0:	20 2c 00 ff 	andi r12,r1,0xff
	uint8_t bit, i;
     pin_inv_old(1); // bita start
 7d4:	34 01 00 01 	mvi r1,1
 7d8:	fb ff ff da 	calli 740 <pin_inv_old>
 7dc:	34 0b 00 08 	mvi r11,8
 7e0:	39 ad 08 c4 	ori r13,r13,0x8c4

void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN;
 7e4:	34 0e 00 08 	mvi r14,8
     pin_inv_old(1); // bita start
 	//nsleep(4000);
	for(i=0;i<8;i++)
	{
		bit=value & 0x01;
 		set_pinDMX(bit);	
 7e8:	21 81 00 01 	andi r1,r12,0x1
 7ec:	fb ff ff 00 	calli 3ec <set_pinDMX>


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 7f0:	29 a2 00 00 	lw r2,(r13+0)
 	//nsleep(4000);
	for(i=0;i<8;i++)
	{
		bit=value & 0x01;
 		set_pinDMX(bit);	
		value=value>>1;
 7f4:	01 8c 00 01 	srui r12,r12,1


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 7f8:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 7fc:	58 4e 00 0c 	sw (r2+12),r14
	do {
 		tcr = timer0->tcr1;
 800:	28 43 00 0c 	lw r3,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 804:	20 63 00 01 	andi r3,r3,0x1
 808:	44 60 ff fe 	be r3,r0,800 <dmx_channel_send+0x4c>
 80c:	35 6b ff ff 	addi r11,r11,-1
 810:	21 6b 00 ff 	andi r11,r11,0xff
void dmx_channel_send(uint8_t value)
{
	uint8_t bit, i;
     pin_inv_old(1); // bita start
 	//nsleep(4000);
	for(i=0;i<8;i++)
 814:	5d 60 ff f5 	bne r11,r0,7e8 <dmx_channel_send+0x34>
		bit=value & 0x01;
 		set_pinDMX(bit);	
		value=value>>1;
		sleept1();
        }
	gpio0->write = gpio0->read | DMX_PIN;
 818:	78 01 00 00 	mvhi r1,0x0
 81c:	38 21 08 c8 	ori r1,r1,0x8c8
 820:	28 21 00 00 	lw r1,(r1+0)
 824:	28 23 00 00 	lw r3,(r1+0)
 828:	38 63 00 01 	ori r3,r3,0x1
 82c:	58 23 00 04 	sw (r1+4),r3


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 830:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 834:	34 01 00 08 	mvi r1,8
 838:	58 41 00 0c 	sw (r2+12),r1
	do {
 		tcr = timer0->tcr1;
 83c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 840:	20 21 00 01 	andi r1,r1,0x1
 844:	44 20 ff fe 	be r1,r0,83c <dmx_channel_send+0x88>


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 848:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 84c:	34 01 00 08 	mvi r1,8
 850:	58 41 00 0c 	sw (r2+12),r1
	do {
 		tcr = timer0->tcr1;
 854:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 858:	20 21 00 01 	andi r1,r1,0x1
 85c:	44 20 ff fe 	be r1,r0,854 <dmx_channel_send+0xa0>
		sleept1();
        }
	gpio0->write = gpio0->read | DMX_PIN;
	sleept1();
	sleept1();
}
 860:	2b 9d 00 04 	lw ra,(sp+4)
 864:	2b 8b 00 14 	lw r11,(sp+20)
 868:	2b 8c 00 10 	lw r12,(sp+16)
 86c:	2b 8d 00 0c 	lw r13,(sp+12)
 870:	2b 8e 00 08 	lw r14,(sp+8)
 874:	37 9c 00 14 	addi sp,sp,20
 878:	c3 a0 00 00 	ret

0000087c <dmx_init_send>:
}



void dmx_init_send()
{
 87c:	37 9c ff fc 	addi sp,sp,-4
 880:	5b 9d 00 04 	sw (sp+4),ra
	pin_inv_old(22);
 884:	34 01 00 16 	mvi r1,22
 888:	fb ff ff ae 	calli 740 <pin_inv_old>
	pin_inv_old(2);
 88c:	34 01 00 02 	mvi r1,2
 890:	fb ff ff ac 	calli 740 <pin_inv_old>
	dmx_channel_send(0);    	
 894:	34 01 00 00 	mvi r1,0
 898:	fb ff ff c7 	calli 7b4 <dmx_channel_send>
 }
 89c:	2b 9d 00 04 	lw ra,(sp+4)
 8a0:	37 9c 00 04 	addi sp,sp,4
 8a4:	c3 a0 00 00 	ret
