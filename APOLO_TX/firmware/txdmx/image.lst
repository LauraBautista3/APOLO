
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         0000078c  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000028  0000078c  0000078c  000007e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000010  000007b4  000007b4  00000808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000008  000007c4  000007c4  00000818  2**2
                  ALLOC
  4 .debug_abbrev 0000034e  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000816  00000000  00000000  00000b66  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000061c  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000130  00000000  00000000  00001998  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000387  00000000  00000000  00001ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 0000017b  00000000  00000000  00001e4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 000000b7  00000000  00000000  00001fca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000060  00000000  00000000  00002081  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000020c  00000000  00000000  000020e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  000022ed  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000070  00000000  00000000  000022fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 01 34 	calli 59c <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 07 d0 	ori gp,gp,0x7d0
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 07 c4 	ori r1,r1,0x7c4
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 07 cc 	ori r3,r3,0x7cc

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
#include "txdmx.h"

#define DEBUG 

int main()
{
 208:	37 9c ff bc 	addi sp,sp,-68
 20c:	5b 8b 00 44 	sw (sp+68),r11
 210:	5b 8c 00 40 	sw (sp+64),r12
 214:	5b 8d 00 3c 	sw (sp+60),r13
 218:	5b 8e 00 38 	sw (sp+56),r14
 21c:	5b 8f 00 34 	sw (sp+52),r15
 220:	5b 90 00 30 	sw (sp+48),r16
 224:	5b 91 00 2c 	sw (sp+44),r17
 228:	5b 92 00 28 	sw (sp+40),r18
 22c:	5b 93 00 24 	sw (sp+36),r19
 230:	5b 94 00 20 	sw (sp+32),r20
 234:	5b 95 00 1c 	sw (sp+28),r21
 238:	5b 96 00 18 	sw (sp+24),r22
 23c:	5b 97 00 14 	sw (sp+20),r23
 240:	5b 98 00 10 	sw (sp+16),r24
 244:	5b 99 00 0c 	sw (sp+12),r25
 248:	5b 9b 00 08 	sw (sp+8),fp
 24c:	5b 9d 00 04 	sw (sp+4),ra
	#ifdef DEBUG
		uart_putstr("modo debug\n");	
 250:	78 01 00 00 	mvhi r1,0x0
 254:	38 21 07 8c 	ori r1,r1,0x78c
 258:	78 13 00 00 	mvhi r19,0x0
 25c:	78 19 00 00 	mvhi r25,0x0
 260:	f8 00 00 e7 	calli 5fc <uart_putstr>
	uint8_t tmp_var=0;
	uint8_t tmp_num=0;
	uint8_t channel=0;
	uint8_t v_ch1=0;
	uint8_t v_ch2=0;
	uint8_t v_ch3=0;
 264:	34 10 00 00 	mvi r16,0
int main()
{
	#ifdef DEBUG
		uart_putstr("modo debug\n");	
     	#endif
	config_dmx();
 268:	f8 00 00 fc 	calli 658 <config_dmx>
	uint8_t tmp_var=0;
	uint8_t tmp_num=0;
	uint8_t channel=0;
	uint8_t v_ch1=0;
	uint8_t v_ch2=0;
 26c:	34 0f 00 00 	mvi r15,0
     	#endif
	config_dmx();
	uint8_t tmp_var=0;
	uint8_t tmp_num=0;
	uint8_t channel=0;
	uint8_t v_ch1=0;
 270:	34 0e 00 00 	mvi r14,0
		uart_putstr("modo debug\n");	
     	#endif
	config_dmx();
	uint8_t tmp_var=0;
	uint8_t tmp_num=0;
	uint8_t channel=0;
 274:	34 15 00 00 	mvi r21,0
{
	#ifdef DEBUG
		uart_putstr("modo debug\n");	
     	#endif
	config_dmx();
	uint8_t tmp_var=0;
 278:	34 0b 00 00 	mvi r11,0
 27c:	34 0d 00 01 	mvi r13,1
 280:	34 0c 00 01 	mvi r12,1
 284:	3a 73 07 98 	ori r19,r19,0x798
 288:	3b 39 07 a0 	ori r25,r25,0x7a0
		
	for(;;)
	{
		while((tmp_var!='<')&&(tmp_var!='>'))
			tmp_var=uart_getchar();
		if(tmp_var=='<')
 28c:	34 11 00 3c 	mvi r17,60
			tmp_var=uart_getchar();
			#ifdef DEBUG
//				uart_putstr("\ndebug variable ");
				uart_putchar(tmp_var);	
		     #endif
			if (tmp_var == 'c')
 290:	34 14 00 63 	mvi r20,99
			{
			if (tmp_num <= 3)
					channel = tmp_num;				
			}
			else if (tmp_var == 'w') 
 294:	34 16 00 77 	mvi r22,119
			{
				w_c = tmp_num;

	   			if (channel==1) 
 298:	34 1b 00 01 	mvi fp,1
					v_ch1 = w_c;
				else if (channel==2) 
					v_ch2 = w_c;
				else if (channel==3) 
 29c:	34 18 00 03 	mvi r24,3
//	irq_enable();

		
	for(;;)
	{
		while((tmp_var!='<')&&(tmp_var!='>'))
 2a0:	a1 ac 10 00 	and r2,r13,r12
 2a4:	5c 40 00 0f 	bne r2,r0,2e0 <main+0xd8>
			tmp_var=uart_getchar();
		if(tmp_var=='<')
 2a8:	45 71 00 13 	be r11,r17,2f4 <main+0xec>
		else
		{
//			#ifdef DEBUG
//				uart_putstr("\nok >\n");
//		     #endif
			dmx_init_send();  //      llamar funcion codificador 	dmx         
 2ac:	f8 00 01 2d 	calli 760 <dmx_init_send>
			sleept1();
 2b0:	f8 00 00 e0 	calli 630 <sleept1>
			dmx_channel_send(v_ch1);
 2b4:	b9 c0 08 00 	mv r1,r14
 2b8:	f8 00 00 f7 	calli 694 <dmx_channel_send>
			sleept1();
 2bc:	f8 00 00 dd 	calli 630 <sleept1>
			dmx_channel_send(v_ch2);
 2c0:	b9 e0 08 00 	mv r1,r15
 2c4:	f8 00 00 f4 	calli 694 <dmx_channel_send>
			sleept1();
 2c8:	f8 00 00 da 	calli 630 <sleept1>
			dmx_channel_send(v_ch3);
 2cc:	ba 00 08 00 	mv r1,r16
 2d0:	f8 00 00 f1 	calli 694 <dmx_channel_send>
			sleept1();
 2d4:	f8 00 00 d7 	calli 630 <sleept1>
//	irq_enable();

		
	for(;;)
	{
		while((tmp_var!='<')&&(tmp_var!='>'))
 2d8:	a1 ac 10 00 	and r2,r13,r12
 2dc:	44 40 ff f3 	be r2,r0,2a8 <main+0xa0>
			tmp_var=uart_getchar();
 2e0:	f8 00 00 b5 	calli 5b4 <uart_getchar>
 2e4:	b8 20 58 00 	mv r11,r1
 2e8:	7c 2d 00 3e 	cmpnei r13,r1,62
 2ec:	7c 2c 00 3c 	cmpnei r12,r1,60
 2f0:	e3 ff ff ec 	bi 2a0 <main+0x98>
		if(tmp_var=='<')
		{
			#ifdef DEBUG
				uart_putstr("\nok <\n");
 2f4:	ba 60 08 00 	mv r1,r19
 2f8:	f8 00 00 c1 	calli 5fc <uart_putstr>
		     #endif
	         
			tmp_num=uart_getchar();
 2fc:	f8 00 00 ae 	calli 5b4 <uart_getchar>
 300:	b8 20 90 00 	mv r18,r1
			#ifdef DEBUG
//				uart_putstr("\ndebug numero: ");	
				uart_putchar(tmp_num);
 304:	f8 00 00 b5 	calli 5d8 <uart_putchar>
	
		     #endif
			tmp_var=uart_getchar();
 308:	f8 00 00 ab 	calli 5b4 <uart_getchar>
 30c:	b8 20 58 00 	mv r11,r1
		     #endif
	         
			tmp_num=uart_getchar();
			#ifdef DEBUG
//				uart_putstr("\ndebug numero: ");	
				uart_putchar(tmp_num);
 310:	ba 40 60 00 	mv r12,r18
	
		     #endif
			tmp_var=uart_getchar();
			#ifdef DEBUG
//				uart_putstr("\ndebug variable ");
				uart_putchar(tmp_var);	
 314:	f8 00 00 b1 	calli 5d8 <uart_putchar>
		     #endif
			if (tmp_var == 'c')
 318:	45 74 00 05 	be r11,r20,32c <main+0x124>
			{
			if (tmp_num <= 3)
					channel = tmp_num;				
			}
			else if (tmp_var == 'w') 
 31c:	45 76 00 0a 	be r11,r22,344 <main+0x13c>
 320:	7d 6d 00 3e 	cmpnei r13,r11,62
 324:	7d 6c 00 3c 	cmpnei r12,r11,60
 328:	e3 ff ff de 	bi 2a0 <main+0x98>
//				uart_putstr("\ndebug variable ");
				uart_putchar(tmp_var);	
		     #endif
			if (tmp_var == 'c')
			{
			if (tmp_num <= 3)
 32c:	53 12 00 02 	bgeu r24,r18,334 <main+0x12c>
 330:	e3 ff ff fc 	bi 320 <main+0x118>
 334:	7d 6d 00 3e 	cmpnei r13,r11,62
 338:	7d 6c 00 3c 	cmpnei r12,r11,60
 33c:	ba 40 a8 00 	mv r21,r18
 340:	e3 ff ff d8 	bi 2a0 <main+0x98>
			}
			else if (tmp_var == 'w') 
			{
				w_c = tmp_num;

	   			if (channel==1) 
 344:	46 bb 00 10 	be r21,fp,384 <main+0x17c>
					v_ch1 = w_c;
				else if (channel==2) 
 348:	34 01 00 02 	mvi r1,2
 34c:	46 a1 00 12 	be r21,r1,394 <main+0x18c>
					v_ch2 = w_c;
				else if (channel==3) 
 350:	b9 c0 90 00 	mv r18,r14
 354:	b9 e0 b8 00 	mv r23,r15
 358:	ba 00 68 00 	mv r13,r16
 35c:	46 b8 00 13 	be r21,r24,3a8 <main+0x1a0>
					v_ch3 = w_c;

				#ifdef DEBUG
					uart_putstr("\ndebug case\n");
 360:	bb 20 08 00 	mv r1,r25
 364:	f8 00 00 a6 	calli 5fc <uart_putstr>
					uart_putchar(v_ch1);
 368:	ba 40 08 00 	mv r1,r18
 36c:	f8 00 00 9b 	calli 5d8 <uart_putchar>
					uart_putchar(v_ch2);
 370:	ba e0 08 00 	mv r1,r23
 374:	f8 00 00 99 	calli 5d8 <uart_putchar>
					uart_putchar(v_ch3);	
 378:	b9 a0 08 00 	mv r1,r13
 37c:	f8 00 00 97 	calli 5d8 <uart_putchar>
 380:	e3 ff ff e8 	bi 320 <main+0x118>
			}
			else if (tmp_var == 'w') 
			{
				w_c = tmp_num;

	   			if (channel==1) 
 384:	b9 e0 b8 00 	mv r23,r15
 388:	ba 00 68 00 	mv r13,r16
		{
			#ifdef DEBUG
				uart_putstr("\nok <\n");
		     #endif
	         
			tmp_num=uart_getchar();
 38c:	ba 40 70 00 	mv r14,r18
 390:	e3 ff ff f4 	bi 360 <main+0x158>
			{
				w_c = tmp_num;

	   			if (channel==1) 
					v_ch1 = w_c;
				else if (channel==2) 
 394:	ba 40 b8 00 	mv r23,r18
 398:	ba 00 68 00 	mv r13,r16
 39c:	b9 c0 90 00 	mv r18,r14
		{
			#ifdef DEBUG
				uart_putstr("\nok <\n");
		     #endif
	         
			tmp_num=uart_getchar();
 3a0:	b9 80 78 00 	mv r15,r12
 3a4:	e3 ff ff ef 	bi 360 <main+0x158>

	   			if (channel==1) 
					v_ch1 = w_c;
				else if (channel==2) 
					v_ch2 = w_c;
				else if (channel==3) 
 3a8:	b9 80 68 00 	mv r13,r12
		{
			#ifdef DEBUG
				uart_putstr("\nok <\n");
		     #endif
	         
			tmp_num=uart_getchar();
 3ac:	b9 80 80 00 	mv r16,r12
 3b0:	e3 ff ff ec 	bi 360 <main+0x158>

000003b4 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 3b4:	78 04 00 00 	mvhi r4,0x0
 3b8:	38 84 07 b0 	ori r4,r4,0x7b0
 3bc:	28 83 00 00 	lw r3,(r4+0)
 3c0:	78 02 00 00 	mvhi r2,0x0
 3c4:	38 42 07 b8 	ori r2,r2,0x7b8
 3c8:	28 42 00 00 	lw r2,(r2+0)
 3cc:	88 23 08 00 	mul r1,r1,r3
 3d0:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3d4:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 3d8:	34 01 00 08 	mvi r1,8
 3dc:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 3e0:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 3e4:	20 21 00 01 	andi r1,r1,0x1
 3e8:	44 20 ff fe 	be r1,r0,3e0 <msleep+0x2c>
}
 3ec:	c3 a0 00 00 	ret

000003f0 <usleep>:
void usleep(uint32_t usec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*usec;
 3f0:	78 02 00 00 	mvhi r2,0x0
 3f4:	38 42 07 b8 	ori r2,r2,0x7b8
 3f8:	28 42 00 00 	lw r2,(r2+0)
 3fc:	08 21 00 64 	muli r1,r1,100
 400:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 404:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN   ;
 408:	34 01 00 08 	mvi r1,8
 40c:	58 41 00 0c 	sw (r2+12),r1

	do {
 		tcr = timer0->tcr1;
 410:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 414:	20 21 00 01 	andi r1,r1,0x1
 418:	44 20 ff fe 	be r1,r0,410 <usleep+0x20>
}
 41c:	c3 a0 00 00 	ret

00000420 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 420:	78 02 00 00 	mvhi r2,0x0
 424:	38 42 07 b8 	ori r2,r2,0x7b8
 428:	28 42 00 00 	lw r2,(r2+0)
 42c:	08 21 00 64 	muli r1,r1,100
 430:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 434:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 438:	34 01 00 08 	mvi r1,8
 43c:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 440:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 444:	20 21 00 01 	andi r1,r1,0x1
 448:	44 20 ff fe 	be r1,r0,440 <nsleep+0x20>
}
 44c:	c3 a0 00 00 	ret

00000450 <tic_init0>:
     
}

void tic_init0()
{
	timer0->compare0 = (FCPU/1000000)*5;
 450:	78 01 00 00 	mvhi r1,0x0
 454:	38 21 07 b8 	ori r1,r1,0x7b8
 458:	28 22 00 00 	lw r2,(r1+0)
 45c:	34 01 01 f4 	mvi r1,500
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR| TIMER_IRQEN;
 460:	34 03 00 0e 	mvi r3,14
     
}

void tic_init0()
{
	timer0->compare0 = (FCPU/1000000)*5;
 464:	58 41 00 04 	sw (r2+4),r1
	timer0->counter0 = 0;
 468:	58 40 00 08 	sw (r2+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR| TIMER_IRQEN;
	contador=0;
 46c:	78 01 00 00 	mvhi r1,0x0

void tic_init0()
{
	timer0->compare0 = (FCPU/1000000)*5;
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR| TIMER_IRQEN;
 470:	58 43 00 00 	sw (r2+0),r3
	contador=0;
 474:	38 21 07 c8 	ori r1,r1,0x7c8
 478:	58 20 00 00 	sw (r1+0),r0

}
 47c:	c3 a0 00 00 	ret

00000480 <set_pin>:
/**********************************************************
 * GPIO Functions
 */

void set_pin(uint8_t value, uint8_t npin)
{
 480:	20 21 00 ff 	andi r1,r1,0xff
 484:	20 42 00 ff 	andi r2,r2,0xff
     if (value)
 488:	5c 20 00 09 	bne r1,r0,4ac <set_pin+0x2c>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 48c:	78 01 00 00 	mvhi r1,0x0
 490:	38 21 07 bc 	ori r1,r1,0x7bc
 494:	28 21 00 00 	lw r1,(r1+0)
 498:	a4 40 10 00 	not r2,r2
 49c:	28 23 00 00 	lw r3,(r1+0)
 4a0:	a0 43 10 00 	and r2,r2,r3
 4a4:	58 22 00 04 	sw (r1+4),r2
 4a8:	c3 a0 00 00 	ret
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 4ac:	78 01 00 00 	mvhi r1,0x0
 4b0:	38 21 07 bc 	ori r1,r1,0x7bc
 4b4:	28 21 00 00 	lw r1,(r1+0)
 4b8:	28 23 00 00 	lw r3,(r1+0)
 4bc:	b8 43 10 00 	or r2,r2,r3
 4c0:	58 22 00 04 	sw (r1+4),r2
 4c4:	c3 a0 00 00 	ret

000004c8 <pin_inv>:
}

void pin_inv(uint8_t npin)
{
	uint32_t val;
	val = (~gpio0->read) & npin;
 4c8:	78 02 00 00 	mvhi r2,0x0
 4cc:	38 42 07 bc 	ori r2,r2,0x7bc
 4d0:	28 42 00 00 	lw r2,(r2+0)
		gpio0->write = gpio0->read & (~npin);

}

void pin_inv(uint8_t npin)
{
 4d4:	20 21 00 ff 	andi r1,r1,0xff
	uint32_t val;
	val = (~gpio0->read) & npin;
 4d8:	28 43 00 00 	lw r3,(r2+0)
 4dc:	a4 60 18 00 	not r3,r3
 * GPIO Functions
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
 4e0:	a0 23 18 00 	and r3,r1,r3
 4e4:	5c 60 00 06 	bne r3,r0,4fc <pin_inv+0x34>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 4e8:	28 43 00 00 	lw r3,(r2+0)
 4ec:	a4 20 08 00 	not r1,r1
 4f0:	a0 23 08 00 	and r1,r1,r3
 4f4:	58 41 00 04 	sw (r2+4),r1
 4f8:	c3 a0 00 00 	ret
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 4fc:	28 43 00 00 	lw r3,(r2+0)
 500:	b8 23 08 00 	or r1,r1,r3
 504:	58 41 00 04 	sw (r2+4),r1
 508:	c3 a0 00 00 	ret

0000050c <tic_isr>:


//uint32_t tic_msec;

void tic_isr()
{
 50c:	37 9c ff fc 	addi sp,sp,-4
 510:	5b 9d 00 04 	sw (sp+4),ra
//	tic_msec++;
//	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;


	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 514:	78 01 00 00 	mvhi r1,0x0
 518:	38 21 07 b8 	ori r1,r1,0x7b8
 51c:	28 22 00 00 	lw r2,(r1+0)
 520:	34 03 00 0e 	mvi r3,14
	pin_inv(PIN_R);
 524:	34 01 00 02 	mvi r1,2
{
//	tic_msec++;
//	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;


	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 528:	58 43 00 00 	sw (r2+0),r3
	pin_inv(PIN_R);
 52c:	fb ff ff e7 	calli 4c8 <pin_inv>
//	pin_inv(PIN_G);
	if (contador && 1)
 530:	78 01 00 00 	mvhi r1,0x0
 534:	38 21 07 c8 	ori r1,r1,0x7c8
 538:	28 23 00 00 	lw r3,(r1+0)
 53c:	5c 60 00 0d 	bne r3,r0,570 <tic_isr+0x64>
void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 540:	78 02 00 00 	mvhi r2,0x0
 544:	38 42 07 bc 	ori r2,r2,0x7bc
 548:	28 42 00 00 	lw r2,(r2+0)
 54c:	34 04 ff fb 	mvi r4,-5
	if (contador && 1)
    		set_pin(1,PIN_G);
	else 
    		set_pin(0,PIN_G);
	
	contador =contador+1;
 550:	34 63 00 01 	addi r3,r3,1
void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 554:	28 45 00 00 	lw r5,(r2+0)
 558:	a0 a4 20 00 	and r4,r5,r4
 55c:	58 44 00 04 	sw (r2+4),r4
	if (contador && 1)
    		set_pin(1,PIN_G);
	else 
    		set_pin(0,PIN_G);
	
	contador =contador+1;
 560:	58 23 00 00 	sw (r1+0),r3
     
}
 564:	2b 9d 00 04 	lw ra,(sp+4)
 568:	37 9c 00 04 	addi sp,sp,4
 56c:	c3 a0 00 00 	ret
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 570:	78 02 00 00 	mvhi r2,0x0
 574:	38 42 07 bc 	ori r2,r2,0x7bc
 578:	28 42 00 00 	lw r2,(r2+0)
	if (contador && 1)
    		set_pin(1,PIN_G);
	else 
    		set_pin(0,PIN_G);
	
	contador =contador+1;
 57c:	34 63 00 01 	addi r3,r3,1
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 580:	28 44 00 00 	lw r4,(r2+0)
 584:	38 84 00 04 	ori r4,r4,0x4
 588:	58 44 00 04 	sw (r2+4),r4
	if (contador && 1)
    		set_pin(1,PIN_G);
	else 
    		set_pin(0,PIN_G);
	
	contador =contador+1;
 58c:	58 23 00 00 	sw (r1+0),r3
     
}
 590:	2b 9d 00 04 	lw ra,(sp+4)
 594:	37 9c 00 04 	addi sp,sp,4
 598:	c3 a0 00 00 	ret

0000059c <irq_handler>:
/***************************************************************************
 * IRQ handling
 */

void irq_handler(uint32_t pending)
{
 59c:	37 9c ff fc 	addi sp,sp,-4
 5a0:	5b 9d 00 04 	sw (sp+4),ra
//
//	for(i=0; i<32; i++) {
//		if (pending & 0x01) (*isr_table[i])();
//		pending >>= 1;
//	}
	tic_isr();
 5a4:	fb ff ff da 	calli 50c <tic_isr>
}
 5a8:	2b 9d 00 04 	lw ra,(sp+4)
 5ac:	37 9c 00 04 	addi sp,sp,4
 5b0:	c3 a0 00 00 	ret

000005b4 <uart_getchar>:
	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
//}

char uart_getchar()
{   
 5b4:	78 01 00 00 	mvhi r1,0x0
 5b8:	38 21 07 b4 	ori r1,r1,0x7b4
 5bc:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 5c0:	28 41 00 00 	lw r1,(r2+0)
 5c4:	20 21 00 01 	andi r1,r1,0x1
 5c8:	44 20 ff fe 	be r1,r0,5c0 <uart_getchar+0xc>
	return uart0->rxtx;
 5cc:	28 41 00 04 	lw r1,(r2+4)
}
 5d0:	20 21 00 ff 	andi r1,r1,0xff
 5d4:	c3 a0 00 00 	ret

000005d8 <uart_putchar>:

void uart_putchar(char c)
{
 5d8:	78 02 00 00 	mvhi r2,0x0
 5dc:	38 42 07 b4 	ori r2,r2,0x7b4
 5e0:	28 43 00 00 	lw r3,(r2+0)
 5e4:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 5e8:	28 62 00 00 	lw r2,(r3+0)
 5ec:	20 42 00 10 	andi r2,r2,0x10
 5f0:	5c 40 ff fe 	bne r2,r0,5e8 <uart_putchar+0x10>
	uart0->rxtx = c;
 5f4:	58 61 00 04 	sw (r3+4),r1
}
 5f8:	c3 a0 00 00 	ret

000005fc <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 5fc:	40 24 00 00 	lbu r4,(r1+0)
 600:	44 80 00 0b 	be r4,r0,62c <uart_putstr+0x30>
 604:	78 02 00 00 	mvhi r2,0x0
 608:	38 42 07 b4 	ori r2,r2,0x7b4
 60c:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 610:	28 62 00 00 	lw r2,(r3+0)
 614:	20 42 00 10 	andi r2,r2,0x10
 618:	5c 40 ff fe 	bne r2,r0,610 <uart_putstr+0x14>
	uart0->rxtx = c;
 61c:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 620:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 624:	40 24 00 00 	lbu r4,(r1+0)
 628:	5c 82 ff fa 	bne r4,r2,610 <uart_putstr+0x14>
 62c:	c3 a0 00 00 	ret

00000630 <sleept1>:


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 630:	78 01 00 00 	mvhi r1,0x0
 634:	38 21 07 b8 	ori r1,r1,0x7b8
 638:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr1 = TIMER_EN;
 63c:	34 01 00 08 	mvi r1,8


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 640:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 644:	58 41 00 0c 	sw (r2+12),r1
	do {
 		tcr = timer0->tcr1;
 648:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 64c:	20 21 00 01 	andi r1,r1,0x1
 650:	44 20 ff fe 	be r1,r0,648 <sleept1+0x18>
}
 654:	c3 a0 00 00 	ret

00000658 <config_dmx>:


void config_dmx()
{
//configurar pin DMX_PIN como pin de salida 
	gpio0->dir |= DMX_PIN;
 658:	78 01 00 00 	mvhi r1,0x0
 65c:	38 21 07 bc 	ori r1,r1,0x7bc
 660:	28 21 00 00 	lw r1,(r1+0)
    //   gpio0->dir = gpio0->dir  | DMX_PIN;
    // config Use timer 1
	timer0->compare1 = (FCPU/1000000)*(TBIT)-80; // for usecond
 664:	78 02 00 00 	mvhi r2,0x0
 668:	38 42 07 b8 	ori r2,r2,0x7b8


void config_dmx()
{
//configurar pin DMX_PIN como pin de salida 
	gpio0->dir |= DMX_PIN;
 66c:	28 23 00 08 	lw r3,(r1+8)
    //   gpio0->dir = gpio0->dir  | DMX_PIN;
    // config Use timer 1
	timer0->compare1 = (FCPU/1000000)*(TBIT)-80; // for usecond
 670:	28 42 00 00 	lw r2,(r2+0)


void config_dmx()
{
//configurar pin DMX_PIN como pin de salida 
	gpio0->dir |= DMX_PIN;
 674:	38 63 00 01 	ori r3,r3,0x1
 678:	58 23 00 08 	sw (r1+8),r3
    //   gpio0->dir = gpio0->dir  | DMX_PIN;
    // config Use timer 1
	timer0->compare1 = (FCPU/1000000)*(TBIT)-80; // for usecond
 67c:	34 03 01 40 	mvi r3,320
 680:	58 43 00 10 	sw (r2+16),r3
	gpio0->write = gpio0->read | DMX_PIN;
 684:	28 22 00 00 	lw r2,(r1+0)
 688:	38 42 00 01 	ori r2,r2,0x1
 68c:	58 22 00 04 	sw (r1+4),r2
 
}
 690:	c3 a0 00 00 	ret

00000694 <dmx_channel_send>:
 }



void dmx_channel_send(uint8_t value)
{
 694:	37 9c ff ec 	addi sp,sp,-20
 698:	5b 8b 00 14 	sw (sp+20),r11
 69c:	5b 8c 00 10 	sw (sp+16),r12
 6a0:	5b 8d 00 0c 	sw (sp+12),r13
 6a4:	5b 8e 00 08 	sw (sp+8),r14
 6a8:	5b 9d 00 04 	sw (sp+4),ra
 6ac:	78 0d 00 00 	mvhi r13,0x0
 6b0:	20 2c 00 ff 	andi r12,r1,0xff
	uint8_t bit, i;
       pin_inv(1); // bita start
 6b4:	34 01 00 01 	mvi r1,1
 6b8:	fb ff ff 84 	calli 4c8 <pin_inv>
 6bc:	34 0b 00 08 	mvi r11,8
 6c0:	39 ad 07 b8 	ori r13,r13,0x7b8

void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN;
 6c4:	34 0e 00 08 	mvi r14,8
       pin_inv(1); // bita start
 	//nsleep(4000);
	for(i=0;i<8;i++)
	{
		bit=value & 0x01;
 		set_pin(bit, DMX_PIN);	
 6c8:	21 81 00 01 	andi r1,r12,0x1
 6cc:	34 02 00 01 	mvi r2,1
 6d0:	fb ff ff 6c 	calli 480 <set_pin>


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 6d4:	29 a2 00 00 	lw r2,(r13+0)
 	//nsleep(4000);
	for(i=0;i<8;i++)
	{
		bit=value & 0x01;
 		set_pin(bit, DMX_PIN);	
		value=value>>1;
 6d8:	01 8c 00 01 	srui r12,r12,1


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 6dc:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 6e0:	58 4e 00 0c 	sw (r2+12),r14
	do {
 		tcr = timer0->tcr1;
 6e4:	28 43 00 0c 	lw r3,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 6e8:	20 63 00 01 	andi r3,r3,0x1
 6ec:	44 60 ff fe 	be r3,r0,6e4 <dmx_channel_send+0x50>
 6f0:	35 6b ff ff 	addi r11,r11,-1
 6f4:	21 6b 00 ff 	andi r11,r11,0xff
void dmx_channel_send(uint8_t value)
{
	uint8_t bit, i;
       pin_inv(1); // bita start
 	//nsleep(4000);
	for(i=0;i<8;i++)
 6f8:	5d 60 ff f4 	bne r11,r0,6c8 <dmx_channel_send+0x34>
		bit=value & 0x01;
 		set_pin(bit, DMX_PIN);	
		value=value>>1;
		sleept1();
        }
	gpio0->write = gpio0->read | DMX_PIN;
 6fc:	78 01 00 00 	mvhi r1,0x0
 700:	38 21 07 bc 	ori r1,r1,0x7bc
 704:	28 21 00 00 	lw r1,(r1+0)
 708:	28 23 00 00 	lw r3,(r1+0)
 70c:	38 63 00 01 	ori r3,r3,0x1
 710:	58 23 00 04 	sw (r1+4),r3


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 714:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 718:	34 01 00 08 	mvi r1,8
 71c:	58 41 00 0c 	sw (r2+12),r1
	do {
 		tcr = timer0->tcr1;
 720:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 724:	20 21 00 01 	andi r1,r1,0x1
 728:	44 20 ff fe 	be r1,r0,720 <dmx_channel_send+0x8c>


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 72c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 730:	34 01 00 08 	mvi r1,8
 734:	58 41 00 0c 	sw (r2+12),r1
	do {
 		tcr = timer0->tcr1;
 738:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 73c:	20 21 00 01 	andi r1,r1,0x1
 740:	44 20 ff fe 	be r1,r0,738 <dmx_channel_send+0xa4>
        }
	gpio0->write = gpio0->read | DMX_PIN;
	sleept1();
	sleept1();
	
	}
 744:	2b 9d 00 04 	lw ra,(sp+4)
 748:	2b 8b 00 14 	lw r11,(sp+20)
 74c:	2b 8c 00 10 	lw r12,(sp+16)
 750:	2b 8d 00 0c 	lw r13,(sp+12)
 754:	2b 8e 00 08 	lw r14,(sp+8)
 758:	37 9c 00 14 	addi sp,sp,20
 75c:	c3 a0 00 00 	ret

00000760 <dmx_init_send>:
	gpio0->write = gpio0->read | DMX_PIN;
 
}

void dmx_init_send()
{
 760:	37 9c ff fc 	addi sp,sp,-4
 764:	5b 9d 00 04 	sw (sp+4),ra
	pin_inv(22);
 768:	34 01 00 16 	mvi r1,22
 76c:	fb ff ff 57 	calli 4c8 <pin_inv>
	pin_inv(2);
 770:	34 01 00 02 	mvi r1,2
 774:	fb ff ff 55 	calli 4c8 <pin_inv>
	dmx_channel_send(0);    	
 778:	34 01 00 00 	mvi r1,0
 77c:	fb ff ff c6 	calli 694 <dmx_channel_send>
 }
 780:	2b 9d 00 04 	lw ra,(sp+4)
 784:	37 9c 00 04 	addi sp,sp,4
 788:	c3 a0 00 00 	ret
