
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007dc  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000050  000007dc  000007dc  00000830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000010  0000082c  0000082c  00000880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000009c  0000083c  0000083c  00000890  2**2
                  ALLOC
  4 .debug_abbrev 0000037b  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000908  00000000  00000000  00000c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000614  00000000  00000000  00001513  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000190  00000000  00000000  00001b28  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000210  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 000000c5  00000000  00000000  00001ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000060  00000000  00000000  00001f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000216  00000000  00000000  00001fed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  00002203  2**0
                  CONTENTS, READONLY
 13 .debug_loc    000001b7  00000000  00000000  00002214  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  000023cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 d9 	calli 430 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 08 40 	ori gp,gp,0x840
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 08 3c 	ori r1,r1,0x83c
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 08 d8 	ori r3,r3,0x8d8

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:


#define DEBUG 

int main()
{
 208:	37 9c ff c4 	addi sp,sp,-60
 20c:	5b 8b 00 3c 	sw (sp+60),r11
 210:	5b 8c 00 38 	sw (sp+56),r12
 214:	5b 8d 00 34 	sw (sp+52),r13
 218:	5b 8e 00 30 	sw (sp+48),r14
 21c:	5b 8f 00 2c 	sw (sp+44),r15
 220:	5b 90 00 28 	sw (sp+40),r16
 224:	5b 91 00 24 	sw (sp+36),r17
 228:	5b 92 00 20 	sw (sp+32),r18
 22c:	5b 93 00 1c 	sw (sp+28),r19
 230:	5b 94 00 18 	sw (sp+24),r20
 234:	5b 95 00 14 	sw (sp+20),r21
 238:	5b 96 00 10 	sw (sp+16),r22
 23c:	5b 97 00 0c 	sw (sp+12),r23
 240:	5b 98 00 08 	sw (sp+8),r24
 244:	5b 9d 00 04 	sw (sp+4),ra
	gpio0->dir=0x00;
 248:	78 0d 00 00 	mvhi r13,0x0
 24c:	39 ad 08 34 	ori r13,r13,0x834
 250:	29 a1 00 00 	lw r1,(r13+0)
 254:	78 0f 00 00 	mvhi r15,0x0
 258:	78 0e 00 00 	mvhi r14,0x0
 25c:	78 0c 00 00 	mvhi r12,0x0
 260:	78 10 00 00 	mvhi r16,0x0
 264:	78 12 00 00 	mvhi r18,0x0
 268:	78 11 00 00 	mvhi r17,0x0
 26c:	78 17 00 00 	mvhi r23,0x0
 270:	78 16 00 00 	mvhi r22,0x0
 274:	78 15 00 00 	mvhi r21,0x0
 278:	78 14 00 00 	mvhi r20,0x0
 27c:	78 13 00 00 	mvhi r19,0x0
 280:	58 20 00 08 	sw (r1+8),r0
 284:	39 ef 07 dc 	ori r15,r15,0x7dc
 288:	39 ce 07 e8 	ori r14,r14,0x7e8
 28c:	39 8c 08 3c 	ori r12,r12,0x83c
 290:	3a 10 07 f4 	ori r16,r16,0x7f4
 294:	3a 52 08 00 	ori r18,r18,0x800
 298:	3a 31 08 48 	ori r17,r17,0x848
 29c:	3a f7 08 0c 	ori r23,r23,0x80c
 2a0:	3a d6 08 50 	ori r22,r22,0x850
 2a4:	3a b5 08 44 	ori r21,r21,0x844
 2a8:	3a 94 08 40 	ori r20,r20,0x840
 2ac:	3a 73 08 20 	ori r19,r19,0x820
	for(;;)
	{
		#ifdef DEBUG
			uart_putstr("modo debug\n");	
 2b0:	b9 e0 08 00 	mv r1,r15
 2b4:	f8 00 00 ce 	calli 5ec <uart_putstr>
 2b8:	29 a2 00 00 	lw r2,(r13+0)
	     	#endif
		while (gpio0->read & 0x01);
 2bc:	28 4b 00 00 	lw r11,(r2+0)
 2c0:	21 6b 00 01 	andi r11,r11,0x1
 2c4:	5d 60 ff fe 	bne r11,r0,2bc <main+0xb4>
		#ifdef DEBUG
			uart_putstr("FLAG 1 \n");	
 2c8:	b9 c0 08 00 	mv r1,r14
 2cc:	f8 00 00 c8 	calli 5ec <uart_putstr>
	     	#endif
		timebreak();
 2d0:	f8 00 00 d4 	calli 620 <timebreak>
		if (!(error))
 2d4:	29 82 00 00 	lw r2,(r12+0)
 2d8:	44 4b 00 05 	be r2,r11,2ec <main+0xe4>
			}
		}
		if ((error))
		{							
		#ifdef DEBUG
			uart_putstr("ERROR \n");	
 2dc:	ba 60 08 00 	mv r1,r19
 2e0:	f8 00 00 c3 	calli 5ec <uart_putstr>
	     	#endif
		error=0;
 2e4:	59 80 00 00 	sw (r12+0),r0
 2e8:	e3 ff ff f2 	bi 2b0 <main+0xa8>
		while (gpio0->read & 0x01);
		#ifdef DEBUG
			uart_putstr("FLAG 1 \n");	
	     	#endif
		timebreak();
		if (!(error))
 2ec:	29 a3 00 00 	lw r3,(r13+0)
		{
			while (!(gpio0->read & 0x01));
 2f0:	28 62 00 00 	lw r2,(r3+0)
 2f4:	20 42 00 01 	andi r2,r2,0x1
 2f8:	44 40 ff fe 	be r2,r0,2f0 <main+0xe8>
			#ifdef DEBUG
				uart_putstr("FLAG 2 \n");	
 2fc:	ba 00 08 00 	mv r1,r16
 300:	f8 00 00 bb 	calli 5ec <uart_putstr>
		     	#endif
			timeMAB();
 304:	f8 00 00 d3 	calli 650 <timeMAB>
			if (!(error))
 308:	29 82 00 00 	lw r2,(r12+0)
 30c:	5c 40 ff f4 	bne r2,r0,2dc <main+0xd4>
 310:	29 a2 00 00 	lw r2,(r13+0)
			{
				while (gpio0->read & 0x01);
 314:	28 4b 00 00 	lw r11,(r2+0)
 318:	21 6b 00 01 	andi r11,r11,0x1
 31c:	5d 60 ff fe 	bne r11,r0,314 <main+0x10c>
				#ifdef DEBUG
					uart_putstr("FLAG 3 \n");	
 320:	ba 40 08 00 	mv r1,r18
 324:	f8 00 00 b2 	calli 5ec <uart_putstr>
			     	#endif

				sleep2us();
 328:	f8 00 00 e1 	calli 6ac <sleep2us>
				dato = leerdatos();
 32c:	f8 00 00 ec 	calli 6dc <leerdatos>
 330:	5a 21 00 00 	sw (r17+0),r1
                        	#ifdef DEBUG
					uart_putchar(dato);	
 334:	f8 00 00 a5 	calli 5c8 <uart_putchar>
			     	#endif

                        	if (!(error) &&(dato ==0))
 338:	29 82 00 00 	lw r2,(r12+0)
 33c:	5c 4b ff e8 	bne r2,r11,2dc <main+0xd4>
 340:	2a 23 00 00 	lw r3,(r17+0)
 344:	5c 62 ff db 	bne r3,r2,2b0 <main+0xa8>
				{
					#ifdef DEBUG
						uart_putstr("LEYENDO DATOS  \n");	
 348:	ba e0 08 00 	mv r1,r23
 34c:	f8 00 00 a8 	calli 5ec <uart_putstr>
 350:	29 a3 00 00 	lw r3,(r13+0)
				     	#endif

					while (gpio0->read & 0x01);
 354:	28 62 00 00 	lw r2,(r3+0)
 358:	20 42 00 01 	andi r2,r2,0x1
 35c:	5c 40 ff fe 	bne r2,r0,354 <main+0x14c>
					sleep2us();
 360:	f8 00 00 d3 	calli 6ac <sleep2us>
					ch1 = leerdatos();
 364:	f8 00 00 de 	calli 6dc <leerdatos>
 368:	29 a3 00 00 	lw r3,(r13+0)
 36c:	5a c1 00 00 	sw (r22+0),r1
					while (gpio0->read & 0x01);
 370:	28 62 00 00 	lw r2,(r3+0)
 374:	20 42 00 01 	andi r2,r2,0x1
 378:	5c 40 ff fe 	bne r2,r0,370 <main+0x168>
					sleep2us();
 37c:	f8 00 00 cc 	calli 6ac <sleep2us>
					ch2 = leerdatos();
 380:	f8 00 00 d7 	calli 6dc <leerdatos>
 384:	29 a2 00 00 	lw r2,(r13+0)
 388:	5a a1 00 00 	sw (r21+0),r1
					while (gpio0->read & 0x01);
 38c:	28 4b 00 00 	lw r11,(r2+0)
 390:	21 6b 00 01 	andi r11,r11,0x1
 394:	5d 60 ff fe 	bne r11,r0,38c <main+0x184>
					sleep2us();
 398:	f8 00 00 c5 	calli 6ac <sleep2us>
					ch3 = leerdatos();
 39c:	f8 00 00 d0 	calli 6dc <leerdatos>
					if (!(error))
 3a0:	29 98 00 00 	lw r24,(r12+0)
					while (gpio0->read & 0x01);
					sleep2us();
					ch2 = leerdatos();
					while (gpio0->read & 0x01);
					sleep2us();
					ch3 = leerdatos();
 3a4:	5a 81 00 00 	sw (r20+0),r1
					if (!(error))
 3a8:	5f 0b ff cd 	bne r24,r11,2dc <main+0xd4>
					valorchs();
 3ac:	f8 00 00 fb 	calli 798 <valorchs>
	
				}			    	  
			}
		}
		if ((error))
 3b0:	29 81 00 00 	lw r1,(r12+0)
 3b4:	44 38 ff bf 	be r1,r24,2b0 <main+0xa8>
 3b8:	e3 ff ff c9 	bi 2dc <main+0xd4>

000003bc <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 3bc:	c3 a0 00 00 	ret

000003c0 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 3c0:	78 01 00 00 	mvhi r1,0x0
 3c4:	38 21 08 d4 	ori r1,r1,0x8d4
 3c8:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 3cc:	78 02 00 00 	mvhi r2,0x0
 3d0:	38 42 08 30 	ori r2,r2,0x830
 3d4:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 3d8:	34 63 00 01 	addi r3,r3,1
 3dc:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 3e0:	34 01 00 0e 	mvi r1,14
 3e4:	58 41 00 00 	sw (r2+0),r1
}
 3e8:	c3 a0 00 00 	ret

000003ec <prueba>:

void prueba()
{
//	   uart0->rxtx=30;
//	   timer0->tcr0 = 0xAA;
	   gpio0->dir=0x0F; 
 3ec:	78 01 00 00 	mvhi r1,0x0
 3f0:	38 21 08 34 	ori r1,r1,0x834
 3f4:	28 21 00 00 	lw r1,(r1+0)
 3f8:	34 02 00 0f 	mvi r2,15
 3fc:	58 22 00 08 	sw (r1+8),r2
}
 400:	c3 a0 00 00 	ret

00000404 <prueba1>:
void prueba1()
{
           gpio0->write = 0xff;
 404:	78 01 00 00 	mvhi r1,0x0
 408:	38 21 08 34 	ori r1,r1,0x834
 40c:	28 21 00 00 	lw r1,(r1+0)
 410:	34 02 00 ff 	mvi r2,255
 414:	58 22 00 04 	sw (r1+4),r2
}
 418:	c3 a0 00 00 	ret

0000041c <prueba2>:
void prueba2()
{
           gpio0->write = 0x00;
 41c:	78 01 00 00 	mvhi r1,0x0
 420:	38 21 08 34 	ori r1,r1,0x834
 424:	28 21 00 00 	lw r1,(r1+0)
 428:	58 20 00 04 	sw (r1+4),r0
}
 42c:	c3 a0 00 00 	ret

00000430 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 430:	37 9c ff f0 	addi sp,sp,-16
 434:	5b 8b 00 10 	sw (sp+16),r11
 438:	5b 8c 00 0c 	sw (sp+12),r12
 43c:	5b 8d 00 08 	sw (sp+8),r13
 440:	5b 9d 00 04 	sw (sp+4),ra
 444:	78 0b 00 00 	mvhi r11,0x0
 448:	39 6b 08 54 	ori r11,r11,0x854
 44c:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 450:	35 6d 00 80 	addi r13,r11,128
 454:	e0 00 00 04 	bi 464 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 458:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 45c:	45 6d 00 08 	be r11,r13,47c <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 460:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 464:	21 81 00 01 	andi r1,r12,0x1
 468:	44 20 ff fc 	be r1,r0,458 <irq_handler+0x28>
 46c:	29 61 00 00 	lw r1,(r11+0)
 470:	35 6b 00 04 	addi r11,r11,4
 474:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 478:	5d 6d ff fa 	bne r11,r13,460 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 47c:	2b 9d 00 04 	lw ra,(sp+4)
 480:	2b 8b 00 10 	lw r11,(sp+16)
 484:	2b 8c 00 0c 	lw r12,(sp+12)
 488:	2b 8d 00 08 	lw r13,(sp+8)
 48c:	37 9c 00 10 	addi sp,sp,16
 490:	c3 a0 00 00 	ret

00000494 <isr_init>:

void isr_init()
{
 494:	78 01 00 00 	mvhi r1,0x0
 498:	78 02 00 00 	mvhi r2,0x0
 49c:	38 21 08 54 	ori r1,r1,0x854
 4a0:	38 42 03 bc 	ori r2,r2,0x3bc
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 4a4:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 4a8:	58 22 00 00 	sw (r1+0),r2
 4ac:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 4b0:	5c 23 ff fe 	bne r1,r3,4a8 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 4b4:	c3 a0 00 00 	ret

000004b8 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 4b8:	78 03 00 00 	mvhi r3,0x0
 4bc:	3c 21 00 02 	sli r1,r1,2
 4c0:	38 63 08 54 	ori r3,r3,0x854
 4c4:	b4 61 18 00 	add r3,r3,r1
 4c8:	58 62 00 00 	sw (r3+0),r2
}
 4cc:	c3 a0 00 00 	ret

000004d0 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 4d0:	78 03 00 00 	mvhi r3,0x0
 4d4:	3c 21 00 02 	sli r1,r1,2
 4d8:	38 63 08 54 	ori r3,r3,0x854
 4dc:	78 02 00 00 	mvhi r2,0x0
 4e0:	b4 61 18 00 	add r3,r3,r1
 4e4:	38 42 03 bc 	ori r2,r2,0x3bc
 4e8:	58 62 00 00 	sw (r3+0),r2
}
 4ec:	c3 a0 00 00 	ret

000004f0 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 4f0:	78 04 00 00 	mvhi r4,0x0
 4f4:	38 84 08 28 	ori r4,r4,0x828
 4f8:	28 83 00 00 	lw r3,(r4+0)
 4fc:	78 02 00 00 	mvhi r2,0x0
 500:	38 42 08 30 	ori r2,r2,0x830
 504:	28 42 00 00 	lw r2,(r2+0)
 508:	88 23 08 00 	mul r1,r1,r3
 50c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 510:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 514:	34 01 00 08 	mvi r1,8
 518:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 51c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 520:	20 21 00 01 	andi r1,r1,0x1
 524:	44 20 ff fe 	be r1,r0,51c <msleep+0x2c>
}
 528:	c3 a0 00 00 	ret

0000052c <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 52c:	78 02 00 00 	mvhi r2,0x0
 530:	38 42 08 30 	ori r2,r2,0x830
 534:	28 42 00 00 	lw r2,(r2+0)
 538:	08 21 00 64 	muli r1,r1,100
 53c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 540:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 544:	34 01 00 08 	mvi r1,8
 548:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 54c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 550:	20 21 00 01 	andi r1,r1,0x1
 554:	44 20 ff fe 	be r1,r0,54c <nsleep+0x20>
}
 558:	c3 a0 00 00 	ret

0000055c <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 55c:	78 01 00 00 	mvhi r1,0x0
 560:	38 21 08 30 	ori r1,r1,0x830
 564:	28 23 00 00 	lw r3,(r1+0)
 568:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 56c:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 570:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 574:	38 21 08 d4 	ori r1,r1,0x8d4

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 578:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 57c:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 580:	78 02 00 00 	mvhi r2,0x0
 584:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 588:	34 04 00 0e 	mvi r4,14
 58c:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 590:	38 21 08 54 	ori r1,r1,0x854
 594:	38 42 03 c0 	ori r2,r2,0x3c0
 598:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 59c:	c3 a0 00 00 	ret

000005a0 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 5a0:	c3 a0 00 00 	ret

000005a4 <uart_getchar>:

char uart_getchar()
{   
 5a4:	78 01 00 00 	mvhi r1,0x0
 5a8:	38 21 08 2c 	ori r1,r1,0x82c
 5ac:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 5b0:	28 41 00 00 	lw r1,(r2+0)
 5b4:	20 21 00 01 	andi r1,r1,0x1
 5b8:	44 20 ff fe 	be r1,r0,5b0 <uart_getchar+0xc>
	return uart0->rxtx;
 5bc:	28 41 00 04 	lw r1,(r2+4)
}
 5c0:	20 21 00 ff 	andi r1,r1,0xff
 5c4:	c3 a0 00 00 	ret

000005c8 <uart_putchar>:

void uart_putchar(char c)
{
 5c8:	78 02 00 00 	mvhi r2,0x0
 5cc:	38 42 08 2c 	ori r2,r2,0x82c
 5d0:	28 43 00 00 	lw r3,(r2+0)
 5d4:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 5d8:	28 62 00 00 	lw r2,(r3+0)
 5dc:	20 42 00 10 	andi r2,r2,0x10
 5e0:	5c 40 ff fe 	bne r2,r0,5d8 <uart_putchar+0x10>
	uart0->rxtx = c;
 5e4:	58 61 00 04 	sw (r3+4),r1
}
 5e8:	c3 a0 00 00 	ret

000005ec <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 5ec:	40 24 00 00 	lbu r4,(r1+0)
 5f0:	44 80 00 0b 	be r4,r0,61c <uart_putstr+0x30>
 5f4:	78 02 00 00 	mvhi r2,0x0
 5f8:	38 42 08 2c 	ori r2,r2,0x82c
 5fc:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 600:	28 62 00 00 	lw r2,(r3+0)
 604:	20 42 00 10 	andi r2,r2,0x10
 608:	5c 40 ff fe 	bne r2,r0,600 <uart_putstr+0x14>
	uart0->rxtx = c;
 60c:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 610:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 614:	40 24 00 00 	lbu r4,(r1+0)
 618:	5c 82 ff fa 	bne r4,r2,600 <uart_putstr+0x14>
 61c:	c3 a0 00 00 	ret

00000620 <timebreak>:


void timebreak()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 620:	78 01 00 00 	mvhi r1,0x0
 624:	38 21 08 30 	ori r1,r1,0x830
 628:	28 21 00 00 	lw r1,(r1+0)
	timer0->compare1 = (FCPU/1000000)*(10);
 62c:	34 02 03 e8 	mvi r2,1000


void timebreak()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 630:	58 20 00 14 	sw (r1+20),r0
	timer0->compare1 = (FCPU/1000000)*(10);
 634:	58 22 00 10 	sw (r1+16),r2
	timer0->tcr1 = TIMER_EN;
 638:	34 02 00 08 	mvi r2,8
 63c:	58 22 00 0c 	sw (r1+12),r2
	do {
 		tcr = timer0->tcr1;
 640:	28 22 00 0c 	lw r2,(r1+12)
 	} while ( ! ((tcr & TIMER_TRIG)) );
 644:	20 42 00 01 	andi r2,r2,0x1
 648:	44 40 ff fe 	be r2,r0,640 <timebreak+0x20>
//	} while ( ! ((tcr & TIMER_TRIG) | (gpio0->read & 0x01) ) );
	if (!(tcr & TIMER_TRIG))
		error=1;
}
 64c:	c3 a0 00 00 	ret

00000650 <timeMAB>:

void timeMAB()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 650:	78 01 00 00 	mvhi r1,0x0
 654:	38 21 08 30 	ori r1,r1,0x830
 658:	28 23 00 00 	lw r3,(r1+0)
	timer0->compare1 = (FCPU/1000000)*(8);
	timer0->tcr1 = TIMER_EN;
 65c:	78 01 00 00 	mvhi r1,0x0
 660:	38 21 08 34 	ori r1,r1,0x834
}

void timeMAB()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 664:	58 60 00 14 	sw (r3+20),r0
	timer0->compare1 = (FCPU/1000000)*(8);
	timer0->tcr1 = TIMER_EN;
 668:	28 25 00 00 	lw r5,(r1+0)

void timeMAB()
{
	uint32_t tcr;
	timer0->counter1 = 0;
	timer0->compare1 = (FCPU/1000000)*(8);
 66c:	34 01 03 20 	mvi r1,800
 670:	58 61 00 10 	sw (r3+16),r1
	timer0->tcr1 = TIMER_EN;
 674:	34 01 00 08 	mvi r1,8
 678:	58 61 00 0c 	sw (r3+12),r1
	do {
 		tcr = timer0->tcr1;
 67c:	28 62 00 0c 	lw r2,(r3+12)
 	} while ( ! ((tcr & TIMER_TRIG) | !(gpio0->read & 0x01) ) );
 680:	28 a4 00 00 	lw r4,(r5+0)
 684:	20 42 00 01 	andi r2,r2,0x1
 688:	18 41 00 01 	xori r1,r2,0x1
 68c:	a0 81 08 00 	and r1,r4,r1
 690:	5c 20 ff fb 	bne r1,r0,67c <timeMAB+0x2c>
		if (!(tcr & TIMER_TRIG))
 694:	5c 41 00 05 	bne r2,r1,6a8 <timeMAB+0x58>
			error=1;
 698:	78 01 00 00 	mvhi r1,0x0
 69c:	38 21 08 3c 	ori r1,r1,0x83c
 6a0:	34 02 00 01 	mvi r2,1
 6a4:	58 22 00 00 	sw (r1+0),r2
 6a8:	c3 a0 00 00 	ret

000006ac <sleep2us>:
}

void sleep2us()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 6ac:	78 01 00 00 	mvhi r1,0x0
 6b0:	38 21 08 30 	ori r1,r1,0x830
 6b4:	28 21 00 00 	lw r1,(r1+0)
	timer0->compare1 = (FCPU/1000000)*(2);
 6b8:	34 02 00 c8 	mvi r2,200
}

void sleep2us()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 6bc:	58 20 00 14 	sw (r1+20),r0
	timer0->compare1 = (FCPU/1000000)*(2);
 6c0:	58 22 00 10 	sw (r1+16),r2
	timer0->tcr1 = TIMER_EN;
 6c4:	34 02 00 08 	mvi r2,8
 6c8:	58 22 00 0c 	sw (r1+12),r2
	do {
 		tcr = timer0->tcr1;
 6cc:	28 22 00 0c 	lw r2,(r1+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 6d0:	20 42 00 01 	andi r2,r2,0x1
 6d4:	44 40 ff fe 	be r2,r0,6cc <sleep2us+0x20>
		
}
 6d8:	c3 a0 00 00 	ret

000006dc <leerdatos>:

uint8_t leerdatos()
{
 6dc:	37 9c ff ec 	addi sp,sp,-20
 6e0:	5b 8b 00 14 	sw (sp+20),r11
 6e4:	5b 8c 00 10 	sw (sp+16),r12
 6e8:	5b 8d 00 0c 	sw (sp+12),r13
 6ec:	5b 8e 00 08 	sw (sp+8),r14
 6f0:	5b 9d 00 04 	sw (sp+4),ra
	uint8_t valor_bit=0, i;
	valor_bit=gpio0->read & 0x01;
 6f4:	78 0c 00 00 	mvhi r12,0x0
 6f8:	39 8c 08 34 	ori r12,r12,0x834
 6fc:	29 81 00 00 	lw r1,(r12+0)
	if (valor_bit)
 700:	34 0b 00 00 	mvi r11,0
		error=1;
	else
	{
		valor_bit=0;
		for(i=0;i<8;i++)
 704:	34 0e 00 08 	mvi r14,8
}

uint8_t leerdatos()
{
	uint8_t valor_bit=0, i;
	valor_bit=gpio0->read & 0x01;
 708:	28 2d 00 00 	lw r13,(r1+0)
 70c:	21 ad 00 01 	andi r13,r13,0x1
	if (valor_bit)
 710:	5d a0 00 15 	bne r13,r0,764 <leerdatos+0x88>
	else
	{
		valor_bit=0;
		for(i=0;i<8;i++)
		{
			sleep2us();
 714:	fb ff ff e6 	calli 6ac <sleep2us>
			sleep2us();
 718:	fb ff ff e5 	calli 6ac <sleep2us>
			valor_bit=valor_bit<<1;
			valor_bit=valor_bit + gpio0->read & 0x01;
 71c:	29 81 00 00 	lw r1,(r12+0)
	if (valor_bit)
		error=1;
	else
	{
		valor_bit=0;
		for(i=0;i<8;i++)
 720:	35 6b 00 01 	addi r11,r11,1
 724:	21 6b 00 ff 	andi r11,r11,0xff
		{
			sleep2us();
			sleep2us();
			valor_bit=valor_bit<<1;
			valor_bit=valor_bit + gpio0->read & 0x01;
 728:	28 2d 00 00 	lw r13,(r1+0)
 72c:	21 ad 00 01 	andi r13,r13,0x1
	if (valor_bit)
		error=1;
	else
	{
		valor_bit=0;
		for(i=0;i<8;i++)
 730:	5d 6e ff f9 	bne r11,r14,714 <leerdatos+0x38>
			valor_bit=valor_bit + gpio0->read & 0x01;
		}
		
		for(i=0;i<2;i++)
		{
			sleep2us();
 734:	fb ff ff de 	calli 6ac <sleep2us>
			sleep2us();
 738:	fb ff ff dd 	calli 6ac <sleep2us>
			valor_bit=valor_bit + gpio0->read & 0x01;
		}
		
		for(i=0;i<2;i++)
		{
			sleep2us();
 73c:	fb ff ff dc 	calli 6ac <sleep2us>
			sleep2us();
 740:	fb ff ff db 	calli 6ac <sleep2us>
			
		}
	}	

	return valor_bit;
}
 744:	b9 a0 08 00 	mv r1,r13
 748:	2b 9d 00 04 	lw ra,(sp+4)
 74c:	2b 8b 00 14 	lw r11,(sp+20)
 750:	2b 8c 00 10 	lw r12,(sp+16)
 754:	2b 8d 00 0c 	lw r13,(sp+12)
 758:	2b 8e 00 08 	lw r14,(sp+8)
 75c:	37 9c 00 14 	addi sp,sp,20
 760:	c3 a0 00 00 	ret
uint8_t leerdatos()
{
	uint8_t valor_bit=0, i;
	valor_bit=gpio0->read & 0x01;
	if (valor_bit)
		error=1;
 764:	78 01 00 00 	mvhi r1,0x0
 768:	38 21 08 3c 	ori r1,r1,0x83c
 76c:	34 02 00 01 	mvi r2,1
 770:	34 0d 00 01 	mvi r13,1
 774:	58 22 00 00 	sw (r1+0),r2
			
		}
	}	

	return valor_bit;
}
 778:	b9 a0 08 00 	mv r1,r13
 77c:	2b 9d 00 04 	lw ra,(sp+4)
 780:	2b 8b 00 14 	lw r11,(sp+20)
 784:	2b 8c 00 10 	lw r12,(sp+16)
 788:	2b 8d 00 0c 	lw r13,(sp+12)
 78c:	2b 8e 00 08 	lw r14,(sp+8)
 790:	37 9c 00 14 	addi sp,sp,20
 794:	c3 a0 00 00 	ret

00000798 <valorchs>:


void valorchs(){
 798:	37 9c ff fc 	addi sp,sp,-4
 79c:	5b 9d 00 04 	sw (sp+4),ra
	uart_putchar(ch1);
 7a0:	78 01 00 00 	mvhi r1,0x0
 7a4:	38 21 08 50 	ori r1,r1,0x850
 7a8:	40 21 00 03 	lbu r1,(r1+3)
 7ac:	fb ff ff 87 	calli 5c8 <uart_putchar>
	uart_putchar(ch2);
 7b0:	78 01 00 00 	mvhi r1,0x0
 7b4:	38 21 08 44 	ori r1,r1,0x844
 7b8:	40 21 00 03 	lbu r1,(r1+3)
 7bc:	fb ff ff 83 	calli 5c8 <uart_putchar>
	uart_putchar(ch3);
 7c0:	78 01 00 00 	mvhi r1,0x0
 7c4:	38 21 08 40 	ori r1,r1,0x840
 7c8:	40 21 00 03 	lbu r1,(r1+3)
 7cc:	fb ff ff 7f 	calli 5c8 <uart_putchar>
}
 7d0:	2b 9d 00 04 	lw ra,(sp+4)
 7d4:	37 9c 00 04 	addi sp,sp,4
 7d8:	c3 a0 00 00 	ret
