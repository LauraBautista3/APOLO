
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         0000073c  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000004  0000073c  0000073c  00000790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000010  00000740  00000740  00000794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000098  00000750  00000750  000007a4  2**2
                  ALLOC
  4 .debug_abbrev 0000036a  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008f9  00000000  00000000  00000b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005ee  00000000  00000000  00001407  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001a0  00000000  00000000  000019f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001a5  00000000  00000000  00001b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000001dc  00000000  00000000  00001d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 000000c5  00000000  00000000  00001f19  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000060  00000000  00000000  00001fde  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000224  00000000  00000000  0000203e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  00002262  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000018  00000000  00000000  00002273  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 a2 	calli 354 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 07 50 	ori gp,gp,0x750
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 07 50 	ori r1,r1,0x750
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 07 e8 	ori r3,r3,0x7e8

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
#include "rxdmx.h"



int main()
{
 208:	37 9c ff e4 	addi sp,sp,-28
 20c:	5b 8b 00 1c 	sw (sp+28),r11
 210:	5b 8c 00 18 	sw (sp+24),r12
 214:	5b 8d 00 14 	sw (sp+20),r13
 218:	5b 8e 00 10 	sw (sp+16),r14
 21c:	5b 8f 00 0c 	sw (sp+12),r15
 220:	5b 90 00 08 	sw (sp+8),r16
 224:	5b 9d 00 04 	sw (sp+4),ra
	uint32_t dato=0;
	gpio0->dir=0x00;
 228:	78 0c 00 00 	mvhi r12,0x0
 22c:	39 8c 07 48 	ori r12,r12,0x748
 230:	29 81 00 00 	lw r1,(r12+0)
 234:	78 0d 00 00 	mvhi r13,0x0
 238:	78 10 00 00 	mvhi r16,0x0
 23c:	78 0f 00 00 	mvhi r15,0x0
 240:	78 0e 00 00 	mvhi r14,0x0
 244:	58 20 00 08 	sw (r1+8),r0
 248:	39 ad 07 50 	ori r13,r13,0x750
 24c:	3a 10 07 e4 	ori r16,r16,0x7e4
 250:	39 ef 07 dc 	ori r15,r15,0x7dc
 254:	39 ce 07 d8 	ori r14,r14,0x7d8
 258:	29 81 00 00 	lw r1,(r12+0)
	for(;;)
	{
		while (gpio0->read & 0x01);
 25c:	28 2b 00 00 	lw r11,(r1+0)
 260:	21 6b 00 01 	andi r11,r11,0x1
 264:	5d 60 ff fe 	bne r11,r0,25c <main+0x54>
		timebreak();
 268:	f8 00 00 b7 	calli 544 <timebreak>
		timeMAB();
 26c:	f8 00 00 d4 	calli 5bc <timeMAB>
 		sleep2us();
 270:	f8 00 00 e6 	calli 608 <sleep2us>
		dato = leerdatos();
 274:	f8 00 00 fd 	calli 668 <leerdatos>
		if (error==0)
 278:	29 a1 00 00 	lw r1,(r13+0)
 27c:	5c 2b 00 17 	bne r1,r11,2d8 <main+0xd0>
 280:	29 82 00 00 	lw r2,(r12+0)
		{
			while (gpio0->read & 0x01);
 284:	28 41 00 00 	lw r1,(r2+0)
 288:	20 21 00 01 	andi r1,r1,0x1
 28c:	5c 20 ff fe 	bne r1,r0,284 <main+0x7c>
			sleep2us();
 290:	f8 00 00 de 	calli 608 <sleep2us>
			ch1 = leerdatos();
 294:	f8 00 00 f5 	calli 668 <leerdatos>
 298:	29 82 00 00 	lw r2,(r12+0)
 29c:	5a 01 00 00 	sw (r16+0),r1
			while (gpio0->read & 0x01);
 2a0:	28 41 00 00 	lw r1,(r2+0)
 2a4:	20 21 00 01 	andi r1,r1,0x1
 2a8:	5c 20 ff fe 	bne r1,r0,2a0 <main+0x98>
			sleep2us();
 2ac:	f8 00 00 d7 	calli 608 <sleep2us>
			ch2 = leerdatos();
 2b0:	f8 00 00 ee 	calli 668 <leerdatos>
 2b4:	29 82 00 00 	lw r2,(r12+0)
 2b8:	59 e1 00 00 	sw (r15+0),r1
			while (gpio0->read & 0x01);
 2bc:	28 41 00 00 	lw r1,(r2+0)
 2c0:	20 21 00 01 	andi r1,r1,0x1
 2c4:	5c 20 ff fe 	bne r1,r0,2bc <main+0xb4>
			sleep2us();
 2c8:	f8 00 00 d0 	calli 608 <sleep2us>
			ch3 = leerdatos();
 2cc:	f8 00 00 e7 	calli 668 <leerdatos>
 2d0:	59 c1 00 00 	sw (r14+0),r1
			valorchs();
 2d4:	f8 00 01 02 	calli 6dc <valorchs>
		}
		error=0;
 2d8:	59 a0 00 00 	sw (r13+0),r0
	}
 2dc:	e3 ff ff df 	bi 258 <main+0x50>

000002e0 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 2e0:	c3 a0 00 00 	ret

000002e4 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 2e4:	78 01 00 00 	mvhi r1,0x0
 2e8:	38 21 07 d4 	ori r1,r1,0x7d4
 2ec:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2f0:	78 02 00 00 	mvhi r2,0x0
 2f4:	38 42 07 44 	ori r2,r2,0x744
 2f8:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 2fc:	34 63 00 01 	addi r3,r3,1
 300:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 304:	34 01 00 0e 	mvi r1,14
 308:	58 41 00 00 	sw (r2+0),r1
}
 30c:	c3 a0 00 00 	ret

00000310 <prueba>:

void prueba()
{
//	   uart0->rxtx=30;
//	   timer0->tcr0 = 0xAA;
	   gpio0->dir=0x0F; 
 310:	78 01 00 00 	mvhi r1,0x0
 314:	38 21 07 48 	ori r1,r1,0x748
 318:	28 21 00 00 	lw r1,(r1+0)
 31c:	34 02 00 0f 	mvi r2,15
 320:	58 22 00 08 	sw (r1+8),r2
}
 324:	c3 a0 00 00 	ret

00000328 <prueba1>:
void prueba1()
{
           gpio0->write = 0xff;
 328:	78 01 00 00 	mvhi r1,0x0
 32c:	38 21 07 48 	ori r1,r1,0x748
 330:	28 21 00 00 	lw r1,(r1+0)
 334:	34 02 00 ff 	mvi r2,255
 338:	58 22 00 04 	sw (r1+4),r2
}
 33c:	c3 a0 00 00 	ret

00000340 <prueba2>:
void prueba2()
{
           gpio0->write = 0x00;
 340:	78 01 00 00 	mvhi r1,0x0
 344:	38 21 07 48 	ori r1,r1,0x748
 348:	28 21 00 00 	lw r1,(r1+0)
 34c:	58 20 00 04 	sw (r1+4),r0
}
 350:	c3 a0 00 00 	ret

00000354 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 354:	37 9c ff f0 	addi sp,sp,-16
 358:	5b 8b 00 10 	sw (sp+16),r11
 35c:	5b 8c 00 0c 	sw (sp+12),r12
 360:	5b 8d 00 08 	sw (sp+8),r13
 364:	5b 9d 00 04 	sw (sp+4),ra
 368:	78 0b 00 00 	mvhi r11,0x0
 36c:	39 6b 07 54 	ori r11,r11,0x754
 370:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 374:	35 6d 00 80 	addi r13,r11,128
 378:	e0 00 00 04 	bi 388 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 37c:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 380:	45 6d 00 08 	be r11,r13,3a0 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 384:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 388:	21 81 00 01 	andi r1,r12,0x1
 38c:	44 20 ff fc 	be r1,r0,37c <irq_handler+0x28>
 390:	29 61 00 00 	lw r1,(r11+0)
 394:	35 6b 00 04 	addi r11,r11,4
 398:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 39c:	5d 6d ff fa 	bne r11,r13,384 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 3a0:	2b 9d 00 04 	lw ra,(sp+4)
 3a4:	2b 8b 00 10 	lw r11,(sp+16)
 3a8:	2b 8c 00 0c 	lw r12,(sp+12)
 3ac:	2b 8d 00 08 	lw r13,(sp+8)
 3b0:	37 9c 00 10 	addi sp,sp,16
 3b4:	c3 a0 00 00 	ret

000003b8 <isr_init>:

void isr_init()
{
 3b8:	78 01 00 00 	mvhi r1,0x0
 3bc:	78 02 00 00 	mvhi r2,0x0
 3c0:	38 21 07 54 	ori r1,r1,0x754
 3c4:	38 42 02 e0 	ori r2,r2,0x2e0
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 3c8:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 3cc:	58 22 00 00 	sw (r1+0),r2
 3d0:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 3d4:	5c 23 ff fe 	bne r1,r3,3cc <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 3d8:	c3 a0 00 00 	ret

000003dc <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 3dc:	78 03 00 00 	mvhi r3,0x0
 3e0:	3c 21 00 02 	sli r1,r1,2
 3e4:	38 63 07 54 	ori r3,r3,0x754
 3e8:	b4 61 18 00 	add r3,r3,r1
 3ec:	58 62 00 00 	sw (r3+0),r2
}
 3f0:	c3 a0 00 00 	ret

000003f4 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 3f4:	78 03 00 00 	mvhi r3,0x0
 3f8:	3c 21 00 02 	sli r1,r1,2
 3fc:	38 63 07 54 	ori r3,r3,0x754
 400:	78 02 00 00 	mvhi r2,0x0
 404:	b4 61 18 00 	add r3,r3,r1
 408:	38 42 02 e0 	ori r2,r2,0x2e0
 40c:	58 62 00 00 	sw (r3+0),r2
}
 410:	c3 a0 00 00 	ret

00000414 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 414:	78 04 00 00 	mvhi r4,0x0
 418:	38 84 07 3c 	ori r4,r4,0x73c
 41c:	28 83 00 00 	lw r3,(r4+0)
 420:	78 02 00 00 	mvhi r2,0x0
 424:	38 42 07 44 	ori r2,r2,0x744
 428:	28 42 00 00 	lw r2,(r2+0)
 42c:	88 23 08 00 	mul r1,r1,r3
 430:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 434:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 438:	34 01 00 08 	mvi r1,8
 43c:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 440:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 444:	20 21 00 01 	andi r1,r1,0x1
 448:	44 20 ff fe 	be r1,r0,440 <msleep+0x2c>
}
 44c:	c3 a0 00 00 	ret

00000450 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 450:	78 02 00 00 	mvhi r2,0x0
 454:	38 42 07 44 	ori r2,r2,0x744
 458:	28 42 00 00 	lw r2,(r2+0)
 45c:	08 21 00 64 	muli r1,r1,100
 460:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 464:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 468:	34 01 00 08 	mvi r1,8
 46c:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 470:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 474:	20 21 00 01 	andi r1,r1,0x1
 478:	44 20 ff fe 	be r1,r0,470 <nsleep+0x20>
}
 47c:	c3 a0 00 00 	ret

00000480 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 480:	78 01 00 00 	mvhi r1,0x0
 484:	38 21 07 44 	ori r1,r1,0x744
 488:	28 23 00 00 	lw r3,(r1+0)
 48c:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 490:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 494:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 498:	38 21 07 d4 	ori r1,r1,0x7d4

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 49c:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 4a0:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 4a4:	78 02 00 00 	mvhi r2,0x0
 4a8:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 4ac:	34 04 00 0e 	mvi r4,14
 4b0:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 4b4:	38 21 07 54 	ori r1,r1,0x754
 4b8:	38 42 02 e4 	ori r2,r2,0x2e4
 4bc:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 4c0:	c3 a0 00 00 	ret

000004c4 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 4c4:	c3 a0 00 00 	ret

000004c8 <uart_getchar>:

char uart_getchar()
{   
 4c8:	78 01 00 00 	mvhi r1,0x0
 4cc:	38 21 07 40 	ori r1,r1,0x740
 4d0:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 4d4:	28 41 00 00 	lw r1,(r2+0)
 4d8:	20 21 00 01 	andi r1,r1,0x1
 4dc:	44 20 ff fe 	be r1,r0,4d4 <uart_getchar+0xc>
	return uart0->rxtx;
 4e0:	28 41 00 04 	lw r1,(r2+4)
}
 4e4:	20 21 00 ff 	andi r1,r1,0xff
 4e8:	c3 a0 00 00 	ret

000004ec <uart_putchar>:

void uart_putchar(char c)
{
 4ec:	78 02 00 00 	mvhi r2,0x0
 4f0:	38 42 07 40 	ori r2,r2,0x740
 4f4:	28 43 00 00 	lw r3,(r2+0)
 4f8:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 4fc:	28 62 00 00 	lw r2,(r3+0)
 500:	20 42 00 10 	andi r2,r2,0x10
 504:	5c 40 ff fe 	bne r2,r0,4fc <uart_putchar+0x10>
	uart0->rxtx = c;
 508:	58 61 00 04 	sw (r3+4),r1
}
 50c:	c3 a0 00 00 	ret

00000510 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 510:	40 24 00 00 	lbu r4,(r1+0)
 514:	44 80 00 0b 	be r4,r0,540 <uart_putstr+0x30>
 518:	78 02 00 00 	mvhi r2,0x0
 51c:	38 42 07 40 	ori r2,r2,0x740
 520:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 524:	28 62 00 00 	lw r2,(r3+0)
 528:	20 42 00 10 	andi r2,r2,0x10
 52c:	5c 40 ff fe 	bne r2,r0,524 <uart_putstr+0x14>
	uart0->rxtx = c;
 530:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 534:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 538:	40 24 00 00 	lbu r4,(r1+0)
 53c:	5c 82 ff fa 	bne r4,r2,524 <uart_putstr+0x14>
 540:	c3 a0 00 00 	ret

00000544 <timebreak>:


void timebreak()
{
	uint32_t tcr;
     uint8_t p =gpio0->read & 0x01;
 544:	78 01 00 00 	mvhi r1,0x0
 548:	38 21 07 48 	ori r1,r1,0x748
 54c:	28 25 00 00 	lw r5,(r1+0)
	timer0->counter1 = 0;
 550:	78 01 00 00 	mvhi r1,0x0
 554:	38 21 07 44 	ori r1,r1,0x744
 558:	28 21 00 00 	lw r1,(r1+0)


void timebreak()
{
	uint32_t tcr;
     uint8_t p =gpio0->read & 0x01;
 55c:	28 a4 00 00 	lw r4,(r5+0)
	timer0->counter1 = 0;
	timer0->compare1 = (FCPU/1000000)*(90);
 560:	34 02 23 28 	mvi r2,9000

void timebreak()
{
	uint32_t tcr;
     uint8_t p =gpio0->read & 0x01;
	timer0->counter1 = 0;
 564:	58 20 00 14 	sw (r1+20),r0
	timer0->compare1 = (FCPU/1000000)*(90);
 568:	58 22 00 10 	sw (r1+16),r2
	timer0->tcr1 = TIMER_EN;
 56c:	20 84 00 01 	andi r4,r4,0x1
 570:	34 02 00 08 	mvi r2,8
 574:	58 22 00 0c 	sw (r1+12),r2
 578:	18 84 00 01 	xori r4,r4,0x1
	do {
 		tcr = timer0->tcr1;
 57c:	28 23 00 0c 	lw r3,(r1+12)
	} while ( (! (tcr & TIMER_TRIG)) && (!p) );
 580:	20 63 00 01 	andi r3,r3,0x1
 584:	64 62 00 00 	cmpei r2,r3,0
 588:	a0 82 10 00 	and r2,r4,r2
 58c:	5c 40 ff fc 	bne r2,r0,57c <timebreak+0x38>
	timer0->tcr1=0;
 590:	58 20 00 0c 	sw (r1+12),r0
	if (!(tcr & TIMER_TRIG))
 594:	44 62 00 05 	be r3,r2,5a8 <timebreak+0x64>
		error = 1;
	else
		while (!(gpio0->read & 0x01));
 598:	28 a1 00 00 	lw r1,(r5+0)
 59c:	20 21 00 01 	andi r1,r1,0x1
 5a0:	44 20 ff fe 	be r1,r0,598 <timebreak+0x54>
 5a4:	c3 a0 00 00 	ret
	do {
 		tcr = timer0->tcr1;
	} while ( (! (tcr & TIMER_TRIG)) && (!p) );
	timer0->tcr1=0;
	if (!(tcr & TIMER_TRIG))
		error = 1;
 5a8:	78 01 00 00 	mvhi r1,0x0
 5ac:	38 21 07 50 	ori r1,r1,0x750
 5b0:	34 02 00 01 	mvi r2,1
 5b4:	58 22 00 00 	sw (r1+0),r2
 5b8:	c3 a0 00 00 	ret

000005bc <timeMAB>:


void timeMAB()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 5bc:	78 01 00 00 	mvhi r1,0x0
 5c0:	38 21 07 44 	ori r1,r1,0x744
 5c4:	28 21 00 00 	lw r1,(r1+0)
	timer0->compare1 = (FCPU/1000000)*(8);
 5c8:	34 02 03 20 	mvi r2,800


void timeMAB()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 5cc:	58 20 00 14 	sw (r1+20),r0
	timer0->compare1 = (FCPU/1000000)*(8);
 5d0:	58 22 00 10 	sw (r1+16),r2
	timer0->tcr1 = TIMER_EN;
 5d4:	34 02 00 08 	mvi r2,8
 5d8:	58 22 00 0c 	sw (r1+12),r2
	do {
 		tcr = timer0->tcr1;
 5dc:	28 22 00 0c 	lw r2,(r1+12)
 	} while ( ! ((tcr & TIMER_TRIG)) );
 5e0:	20 42 00 01 	andi r2,r2,0x1
 5e4:	44 40 ff fe 	be r2,r0,5dc <timeMAB+0x20>
	timer0->tcr1=0;
 5e8:	78 02 00 00 	mvhi r2,0x0
 5ec:	38 42 07 48 	ori r2,r2,0x748
 5f0:	28 42 00 00 	lw r2,(r2+0)
 5f4:	58 20 00 0c 	sw (r1+12),r0
	while ((gpio0->read & 0x01));
 5f8:	28 41 00 00 	lw r1,(r2+0)
 5fc:	20 21 00 01 	andi r1,r1,0x1
 600:	5c 20 ff fe 	bne r1,r0,5f8 <timeMAB+0x3c>

}
 604:	c3 a0 00 00 	ret

00000608 <sleep2us>:

void sleep2us()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 608:	78 01 00 00 	mvhi r1,0x0
 60c:	38 21 07 44 	ori r1,r1,0x744
 610:	28 21 00 00 	lw r1,(r1+0)
	timer0->compare1 = 273;
 614:	34 02 01 11 	mvi r2,273
}

void sleep2us()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 618:	58 20 00 14 	sw (r1+20),r0
	timer0->compare1 = 273;
 61c:	58 22 00 10 	sw (r1+16),r2
//	timer0->compare1 = (FCPU/1000000)*(3);
	timer0->tcr1 = TIMER_EN;
 620:	34 02 00 08 	mvi r2,8
 624:	58 22 00 0c 	sw (r1+12),r2
	do {
 		tcr = timer0->tcr1;
 628:	28 22 00 0c 	lw r2,(r1+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 62c:	20 42 00 01 	andi r2,r2,0x1
 630:	44 40 ff fe 	be r2,r0,628 <sleep2us+0x20>
		
}void sleep4us()
 634:	c3 a0 00 00 	ret

00000638 <sleep4us>:
{
	uint32_t tcr;
	timer0->counter1 = 0;
 638:	78 01 00 00 	mvhi r1,0x0
 63c:	38 21 07 44 	ori r1,r1,0x744
 640:	28 21 00 00 	lw r1,(r1+0)
	timer0->compare1 = 360;
 644:	34 02 01 68 	mvi r2,360
 	} while ( ! (tcr & TIMER_TRIG) );
		
}void sleep4us()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 648:	58 20 00 14 	sw (r1+20),r0
	timer0->compare1 = 360;
 64c:	58 22 00 10 	sw (r1+16),r2
//	timer0->compare1 = (FCPU/1000000)*(2);
	timer0->tcr1 = TIMER_EN;
 650:	34 02 00 08 	mvi r2,8
 654:	58 22 00 0c 	sw (r1+12),r2
	do {
 		tcr = timer0->tcr1;
 658:	28 22 00 0c 	lw r2,(r1+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 65c:	20 42 00 01 	andi r2,r2,0x1
 660:	44 40 ff fe 	be r2,r0,658 <sleep4us+0x20>

}
 664:	c3 a0 00 00 	ret

00000668 <leerdatos>:

uint8_t leerdatos()
{
 668:	37 9c ff f0 	addi sp,sp,-16
 66c:	5b 8b 00 10 	sw (sp+16),r11
 670:	5b 8c 00 0c 	sw (sp+12),r12
 674:	5b 8d 00 08 	sw (sp+8),r13
 678:	5b 9d 00 04 	sw (sp+4),ra
	uint8_t valor_bit=0, i;
	valor_bit=gpio0->read & 0x01;
 67c:	78 0c 00 00 	mvhi r12,0x0
 680:	39 8c 07 48 	ori r12,r12,0x748
 684:	29 81 00 00 	lw r1,(r12+0)
 688:	34 0b 00 08 	mvi r11,8
	valor_bit=0;
 68c:	34 0d 00 00 	mvi r13,0
}

uint8_t leerdatos()
{
	uint8_t valor_bit=0, i;
	valor_bit=gpio0->read & 0x01;
 690:	28 21 00 00 	lw r1,(r1+0)
	valor_bit=0;
	for(i=0;i<8;i++)
	{
		sleep4us();
 694:	fb ff ff e9 	calli 638 <sleep4us>
		valor_bit=valor_bit<<1;
		valor_bit=valor_bit + (gpio0->read & 0x01);
 698:	29 81 00 00 	lw r1,(r12+0)
	valor_bit=gpio0->read & 0x01;
	valor_bit=0;
	for(i=0;i<8;i++)
	{
		sleep4us();
		valor_bit=valor_bit<<1;
 69c:	3d ad 00 01 	sli r13,r13,1
		valor_bit=valor_bit + (gpio0->read & 0x01);
 6a0:	35 6b ff ff 	addi r11,r11,-1
 6a4:	28 21 00 00 	lw r1,(r1+0)
 6a8:	21 6b 00 ff 	andi r11,r11,0xff
 6ac:	20 21 00 01 	andi r1,r1,0x1
 6b0:	b5 a1 68 00 	add r13,r13,r1
 6b4:	21 ad 00 ff 	andi r13,r13,0xff
uint8_t leerdatos()
{
	uint8_t valor_bit=0, i;
	valor_bit=gpio0->read & 0x01;
	valor_bit=0;
	for(i=0;i<8;i++)
 6b8:	5d 60 ff f7 	bne r11,r0,694 <leerdatos+0x2c>
	{
		sleep4us();
		valor_bit=valor_bit<<1;
		valor_bit=valor_bit + (gpio0->read & 0x01);
	}
	sleep4us();
 6bc:	fb ff ff df 	calli 638 <sleep4us>
	return valor_bit;
}
 6c0:	b9 a0 08 00 	mv r1,r13
 6c4:	2b 9d 00 04 	lw ra,(sp+4)
 6c8:	2b 8b 00 10 	lw r11,(sp+16)
 6cc:	2b 8c 00 0c 	lw r12,(sp+12)
 6d0:	2b 8d 00 08 	lw r13,(sp+8)
 6d4:	37 9c 00 10 	addi sp,sp,16
 6d8:	c3 a0 00 00 	ret

000006dc <valorchs>:


void valorchs(){
 6dc:	37 9c ff fc 	addi sp,sp,-4
 6e0:	5b 9d 00 04 	sw (sp+4),ra
	uart_putchar(ch1);
 6e4:	78 01 00 00 	mvhi r1,0x0
 6e8:	38 21 07 e4 	ori r1,r1,0x7e4
 6ec:	28 21 00 00 	lw r1,(r1+0)
 6f0:	20 21 00 ff 	andi r1,r1,0xff
 6f4:	fb ff ff 7e 	calli 4ec <uart_putchar>
	uart_putchar(ch2);
 6f8:	78 01 00 00 	mvhi r1,0x0
 6fc:	38 21 07 dc 	ori r1,r1,0x7dc
 700:	28 21 00 00 	lw r1,(r1+0)
 704:	20 21 00 ff 	andi r1,r1,0xff
 708:	fb ff ff 79 	calli 4ec <uart_putchar>
	uart_putchar(ch3);
 70c:	78 01 00 00 	mvhi r1,0x0
 710:	38 21 07 d8 	ori r1,r1,0x7d8
 714:	28 21 00 00 	lw r1,(r1+0)
 718:	20 21 00 ff 	andi r1,r1,0xff
 71c:	fb ff ff 74 	calli 4ec <uart_putchar>
	uart_putchar(13);
 720:	34 01 00 0d 	mvi r1,13
 724:	fb ff ff 72 	calli 4ec <uart_putchar>
	uart_putchar(10);
 728:	34 01 00 0a 	mvi r1,10
 72c:	fb ff ff 70 	calli 4ec <uart_putchar>
}
 730:	2b 9d 00 04 	lw ra,(sp+4)
 734:	37 9c 00 04 	addi sp,sp,4
 738:	c3 a0 00 00 	ret
