
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         000007fc  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000028  000007fc  000007fc  00000850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00000824  00000824  00000878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000008  0000083c  0000083c  00000890  2**2
                  ALLOC
  4 .debug_abbrev 00000394  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000943  00000000  00000000  00000c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000650  00000000  00000000  00001567  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000140  00000000  00000000  00001bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000003c1  00000000  00000000  00001cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000179  00000000  00000000  000020b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 000000cf  00000000  00000000  00002232  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000060  00000000  00000000  00002301  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000216  00000000  00000000  00002361  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  00002577  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000040  00000000  00000000  00002588  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 e9 	calli 470 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 08 40 	ori gp,gp,0x840
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 08 3c 	ori r1,r1,0x83c
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 08 44 	ori r3,r3,0x844

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
#include "txdmx.h"

 #define DEBUG 

void main()
{
 208:	37 9c ff c4 	addi sp,sp,-60
 20c:	5b 8b 00 3c 	sw (sp+60),r11
 210:	5b 8c 00 38 	sw (sp+56),r12
 214:	5b 8d 00 34 	sw (sp+52),r13
 218:	5b 8e 00 30 	sw (sp+48),r14
 21c:	5b 8f 00 2c 	sw (sp+44),r15
 220:	5b 90 00 28 	sw (sp+40),r16
 224:	5b 91 00 24 	sw (sp+36),r17
 228:	5b 92 00 20 	sw (sp+32),r18
 22c:	5b 93 00 1c 	sw (sp+28),r19
 230:	5b 94 00 18 	sw (sp+24),r20
 234:	5b 95 00 14 	sw (sp+20),r21
 238:	5b 96 00 10 	sw (sp+16),r22
 23c:	5b 97 00 0c 	sw (sp+12),r23
 240:	5b 98 00 08 	sw (sp+8),r24
 244:	5b 9d 00 04 	sw (sp+4),ra
	#ifdef DEBUG
		uart_putstr("modo debug\n");	
 248:	78 01 00 00 	mvhi r1,0x0
 24c:	38 21 07 fc 	ori r1,r1,0x7fc
 250:	f8 00 00 ea 	calli 5f8 <uart_putstr>
	uint8_t tmp_num=0;
	uint8_t channel=0;
	int w_c=0;


	gpio0->dir = 0xFF;
 254:	78 01 00 00 	mvhi r1,0x0
 258:	38 21 08 2c 	ori r1,r1,0x82c
 25c:	28 21 00 00 	lw r1,(r1+0)
 260:	34 02 00 ff 	mvi r2,255
 264:	78 0e 00 00 	mvhi r14,0x0
 268:	58 22 00 08 	sw (r1+8),r2
	gpio0->write = 0xFF;
 26c:	58 22 00 04 	sw (r1+4),r2

	tic_init0();
 270:	f8 00 00 a1 	calli 4f4 <tic_init0>

	irq_set_mask(0x02);
 274:	34 01 00 02 	mvi r1,2
 278:	78 12 00 00 	mvhi r18,0x0
 27c:	78 13 00 00 	mvhi r19,0x0
 280:	78 15 00 00 	mvhi r21,0x0
 284:	78 16 00 00 	mvhi r22,0x0
 288:	fb ff ff b4 	calli 158 <irq_set_mask>
		uart_putstr("modo debug\n");	
     	#endif
//	config_dmx();
	uint8_t tmp_var=0;
	uint8_t tmp_num=0;
	uint8_t channel=0;
 28c:	34 10 00 00 	mvi r16,0
	gpio0->write = 0xFF;

	tic_init0();

	irq_set_mask(0x02);
	irq_enable();
 290:	fb ff ff ac 	calli 140 <irq_enable>
{
	#ifdef DEBUG
		uart_putstr("modo debug\n");	
     	#endif
//	config_dmx();
	uint8_t tmp_var=0;
 294:	34 0b 00 00 	mvi r11,0
 298:	39 ce 08 08 	ori r14,r14,0x808
 29c:	3a 52 08 3c 	ori r18,r18,0x83c
 2a0:	3a 73 08 34 	ori r19,r19,0x834
 2a4:	3a b5 08 38 	ori r21,r21,0x838
 2a8:	3a d6 08 10 	ori r22,r22,0x810

	for(;;)
	{
		while((tmp_var!='<')&&(tmp_var!='>'))
			tmp_var=uart_getchar();
		if(tmp_var=='<')
 2ac:	34 0c 00 3c 	mvi r12,60
			tmp_var=uart_getchar();
			#ifdef DEBUG
//				uart_putstr("\ndebug variable ");
				uart_putchar(tmp_var);	
		     #endif
			if (tmp_var == 'c')
 2b0:	34 0f 00 63 	mvi r15,99
			{
			if (tmp_num <= 3)
					channel = tmp_num;				
			}
			else if (tmp_var == 'w') 
 2b4:	34 11 00 77 	mvi r17,119
			{
				w_c = tmp_num;

	   			if (channel==1) 
 2b8:	34 17 00 01 	mvi r23,1
					v_ch1 = w_c;
				else if (channel==2) 
 2bc:	34 18 00 02 	mvi r24,2
					v_ch2 = w_c;
				else if (channel==3) 
 2c0:	34 14 00 03 	mvi r20,3
	irq_enable();


	for(;;)
	{
		while((tmp_var!='<')&&(tmp_var!='>'))
 2c4:	7d 63 00 3e 	cmpnei r3,r11,62
 2c8:	7d 62 00 3c 	cmpnei r2,r11,60
 2cc:	a0 62 10 00 	and r2,r3,r2
 2d0:	5c 40 00 08 	bne r2,r0,2f0 <main+0xe8>
			tmp_var=uart_getchar();
		if(tmp_var=='<')
 2d4:	45 6c 00 0a 	be r11,r12,2fc <main+0xf4>
		     	#endif		
			}
		}
		else
		{
			irq_enable();
 2d8:	fb ff ff 9a 	calli 140 <irq_enable>
			tmp_var=0;
 2dc:	34 0b 00 00 	mvi r11,0
	irq_enable();


	for(;;)
	{
		while((tmp_var!='<')&&(tmp_var!='>'))
 2e0:	7d 63 00 3e 	cmpnei r3,r11,62
 2e4:	7d 62 00 3c 	cmpnei r2,r11,60
 2e8:	a0 62 10 00 	and r2,r3,r2
 2ec:	44 40 ff fa 	be r2,r0,2d4 <main+0xcc>
			tmp_var=uart_getchar();
 2f0:	f8 00 00 b0 	calli 5b0 <uart_getchar>
 2f4:	b8 20 58 00 	mv r11,r1
 2f8:	e3 ff ff f3 	bi 2c4 <main+0xbc>
		if(tmp_var=='<')
		{
			irq_disable();
 2fc:	fb ff ff 94 	calli 14c <irq_disable>
			#ifdef DEBUG
				uart_putstr("\nok <\n");
 300:	b9 c0 08 00 	mv r1,r14
 304:	f8 00 00 bd 	calli 5f8 <uart_putstr>
		     #endif
	         
			tmp_num=uart_getchar();
 308:	f8 00 00 aa 	calli 5b0 <uart_getchar>
 30c:	b8 20 68 00 	mv r13,r1
			#ifdef DEBUG
//				uart_putstr("\ndebug numero: ");	
				uart_putchar(tmp_num);
 310:	f8 00 00 b1 	calli 5d4 <uart_putchar>
	
		     #endif
			tmp_var=uart_getchar();
 314:	f8 00 00 a7 	calli 5b0 <uart_getchar>
 318:	b8 20 58 00 	mv r11,r1
			#ifdef DEBUG
//				uart_putstr("\ndebug variable ");
				uart_putchar(tmp_var);	
 31c:	f8 00 00 ae 	calli 5d4 <uart_putchar>
		     #endif
			if (tmp_var == 'c')
 320:	45 6f 00 0e 	be r11,r15,358 <main+0x150>
			{
			if (tmp_num <= 3)
					channel = tmp_num;				
			}
			else if (tmp_var == 'w') 
 324:	5d 71 ff e8 	bne r11,r17,2c4 <main+0xbc>
			{
				w_c = tmp_num;

	   			if (channel==1) 
 328:	46 17 00 10 	be r16,r23,368 <main+0x160>
					v_ch1 = w_c;
				else if (channel==2) 
 32c:	46 18 00 11 	be r16,r24,370 <main+0x168>
					v_ch2 = w_c;
				else if (channel==3) 
 330:	46 14 00 12 	be r16,r20,378 <main+0x170>
					v_ch3 = w_c;

				#ifdef DEBUG
					uart_putstr("\ndebug case\n");
 334:	ba c0 08 00 	mv r1,r22
 338:	f8 00 00 b0 	calli 5f8 <uart_putstr>
//					uart_putchar(w_c);
					uart_putchar(v_ch1);
 33c:	42 41 00 03 	lbu r1,(r18+3)
 340:	f8 00 00 a5 	calli 5d4 <uart_putchar>
					uart_putchar(v_ch2);
 344:	42 61 00 03 	lbu r1,(r19+3)
 348:	f8 00 00 a3 	calli 5d4 <uart_putchar>
					uart_putchar(v_ch3);	
 34c:	42 a1 00 03 	lbu r1,(r21+3)
 350:	f8 00 00 a1 	calli 5d4 <uart_putchar>
 354:	e3 ff ff dc 	bi 2c4 <main+0xbc>
//				uart_putstr("\ndebug variable ");
				uart_putchar(tmp_var);	
		     #endif
			if (tmp_var == 'c')
			{
			if (tmp_num <= 3)
 358:	52 8d 00 02 	bgeu r20,r13,360 <main+0x158>
 35c:	e3 ff ff da 	bi 2c4 <main+0xbc>
 360:	b9 a0 80 00 	mv r16,r13
 364:	e3 ff ff d8 	bi 2c4 <main+0xbc>
			else if (tmp_var == 'w') 
			{
				w_c = tmp_num;

	   			if (channel==1) 
					v_ch1 = w_c;
 368:	5a 4d 00 00 	sw (r18+0),r13
 36c:	e3 ff ff f2 	bi 334 <main+0x12c>
				else if (channel==2) 
					v_ch2 = w_c;
 370:	5a 6d 00 00 	sw (r19+0),r13
 374:	e3 ff ff f0 	bi 334 <main+0x12c>
				else if (channel==3) 
					v_ch3 = w_c;
 378:	5a ad 00 00 	sw (r21+0),r13
 37c:	e3 ff ff ee 	bi 334 <main+0x12c>

00000380 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 380:	78 04 00 00 	mvhi r4,0x0
 384:	38 84 08 20 	ori r4,r4,0x820
 388:	28 83 00 00 	lw r3,(r4+0)
 38c:	78 02 00 00 	mvhi r2,0x0
 390:	38 42 08 28 	ori r2,r2,0x828
 394:	28 42 00 00 	lw r2,(r2+0)
 398:	88 23 08 00 	mul r1,r1,r3
 39c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3a0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 3a4:	34 01 00 08 	mvi r1,8
 3a8:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 3ac:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 3b0:	20 21 00 01 	andi r1,r1,0x1
 3b4:	44 20 ff fe 	be r1,r0,3ac <msleep+0x2c>
}
 3b8:	c3 a0 00 00 	ret

000003bc <usleep>:
void usleep(uint32_t usec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*usec;
 3bc:	78 02 00 00 	mvhi r2,0x0
 3c0:	38 42 08 28 	ori r2,r2,0x828
 3c4:	28 42 00 00 	lw r2,(r2+0)
 3c8:	08 21 00 64 	muli r1,r1,100
 3cc:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3d0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN   ;
 3d4:	34 01 00 08 	mvi r1,8
 3d8:	58 41 00 0c 	sw (r2+12),r1

	do {
 		tcr = timer0->tcr1;
 3dc:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 3e0:	20 21 00 01 	andi r1,r1,0x1
 3e4:	44 20 ff fe 	be r1,r0,3dc <usleep+0x20>
}
 3e8:	c3 a0 00 00 	ret

000003ec <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 3ec:	78 02 00 00 	mvhi r2,0x0
 3f0:	38 42 08 28 	ori r2,r2,0x828
 3f4:	28 42 00 00 	lw r2,(r2+0)
 3f8:	08 21 00 64 	muli r1,r1,100
 3fc:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 400:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 404:	34 01 00 08 	mvi r1,8
 408:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 40c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 410:	20 21 00 01 	andi r1,r1,0x1
 414:	44 20 ff fe 	be r1,r0,40c <nsleep+0x20>
}
 418:	c3 a0 00 00 	ret

0000041c <tic_isr>:

void tic_isr(uint8_t PINRGB, uint8_t Valor_C)
{
	

	if (contador < Valor_C)
 41c:	78 03 00 00 	mvhi r3,0x0
 420:	38 63 08 40 	ori r3,r3,0x840
 424:	28 63 00 00 	lw r3,(r3+0)
     
}
*/

void tic_isr(uint8_t PINRGB, uint8_t Valor_C)
{
 428:	20 42 00 ff 	andi r2,r2,0xff
 42c:	20 21 00 ff 	andi r1,r1,0xff
	

	if (contador < Valor_C)
 430:	4c 62 00 08 	bge r3,r2,450 <tic_isr+0x34>
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 434:	78 02 00 00 	mvhi r2,0x0
 438:	38 42 08 2c 	ori r2,r2,0x82c
 43c:	28 42 00 00 	lw r2,(r2+0)
 440:	28 43 00 00 	lw r3,(r2+0)
 444:	b8 23 08 00 	or r1,r1,r3
 448:	58 41 00 04 	sw (r2+4),r1
 44c:	c3 a0 00 00 	ret
	else
		gpio0->write = gpio0->read & (~npin);
 450:	78 02 00 00 	mvhi r2,0x0
 454:	38 42 08 2c 	ori r2,r2,0x82c
 458:	28 42 00 00 	lw r2,(r2+0)
 45c:	a4 20 08 00 	not r1,r1
 460:	28 43 00 00 	lw r3,(r2+0)
 464:	a0 23 08 00 	and r1,r1,r3
 468:	58 41 00 04 	sw (r2+4),r1
 46c:	c3 a0 00 00 	ret

00000470 <irq_handler>:
/***************************************************************************
 * IRQ handling
 */

void irq_handler(uint32_t pending)
{
 470:	37 9c ff fc 	addi sp,sp,-4
 474:	5b 9d 00 04 	sw (sp+4),ra
//	for(i=0; i<32; i++) {
//		if (pending & 0x01) (*isr_table[i])();
//		pending >>= 1;
//	}
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
	contador =contador+1;
 478:	78 01 00 00 	mvhi r1,0x0
 47c:	38 21 08 40 	ori r1,r1,0x840
//
//	for(i=0; i<32; i++) {
//		if (pending & 0x01) (*isr_table[i])();
//		pending >>= 1;
//	}
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 480:	78 02 00 00 	mvhi r2,0x0
	contador =contador+1;
 484:	28 24 00 00 	lw r4,(r1+0)
//
//	for(i=0; i<32; i++) {
//		if (pending & 0x01) (*isr_table[i])();
//		pending >>= 1;
//	}
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 488:	38 42 08 28 	ori r2,r2,0x828
 48c:	28 43 00 00 	lw r3,(r2+0)
	contador =contador+1;
 490:	34 82 00 01 	addi r2,r4,1
//
//	for(i=0; i<32; i++) {
//		if (pending & 0x01) (*isr_table[i])();
//		pending >>= 1;
//	}
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 494:	34 04 00 0e 	mvi r4,14
 498:	58 64 00 00 	sw (r3+0),r4
	contador =contador+1;
 49c:	58 22 00 00 	sw (r1+0),r2
     if (contador >255)
 4a0:	34 03 00 ff 	mvi r3,255
 4a4:	4c 62 00 02 	bge r3,r2,4ac <irq_handler+0x3c>
		contador =0;
 4a8:	58 20 00 00 	sw (r1+0),r0
	//uart_putchar(contador);


	tic_isr(PIN_R, v_ch1);
 4ac:	78 01 00 00 	mvhi r1,0x0
 4b0:	38 21 08 3c 	ori r1,r1,0x83c
 4b4:	40 22 00 03 	lbu r2,(r1+3)
 4b8:	34 01 00 02 	mvi r1,2
 4bc:	fb ff ff d8 	calli 41c <tic_isr>
	tic_isr(PIN_G, v_ch2);
 4c0:	78 01 00 00 	mvhi r1,0x0
 4c4:	38 21 08 34 	ori r1,r1,0x834
 4c8:	40 22 00 03 	lbu r2,(r1+3)
 4cc:	34 01 00 04 	mvi r1,4
 4d0:	fb ff ff d3 	calli 41c <tic_isr>
	tic_isr(PIN_B, v_ch3);
 4d4:	78 01 00 00 	mvhi r1,0x0
 4d8:	38 21 08 38 	ori r1,r1,0x838
 4dc:	40 22 00 03 	lbu r2,(r1+3)
 4e0:	34 01 00 08 	mvi r1,8
 4e4:	fb ff ff ce 	calli 41c <tic_isr>
}
 4e8:	2b 9d 00 04 	lw ra,(sp+4)
 4ec:	37 9c 00 04 	addi sp,sp,4
 4f0:	c3 a0 00 00 	ret

000004f4 <tic_init0>:
     
}

void tic_init0()
{
	timer0->compare0 = (FCPU/1000000)*5;
 4f4:	78 01 00 00 	mvhi r1,0x0
 4f8:	38 21 08 28 	ori r1,r1,0x828
 4fc:	28 22 00 00 	lw r2,(r1+0)
 500:	34 01 01 f4 	mvi r1,500
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR| TIMER_IRQEN;
 504:	34 03 00 0e 	mvi r3,14
     
}

void tic_init0()
{
	timer0->compare0 = (FCPU/1000000)*5;
 508:	58 41 00 04 	sw (r2+4),r1
	timer0->counter0 = 0;
 50c:	58 40 00 08 	sw (r2+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR| TIMER_IRQEN;
	contador=0;
 510:	78 01 00 00 	mvhi r1,0x0

void tic_init0()
{
	timer0->compare0 = (FCPU/1000000)*5;
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR| TIMER_IRQEN;
 514:	58 43 00 00 	sw (r2+0),r3
	contador=0;
 518:	38 21 08 40 	ori r1,r1,0x840
 51c:	58 20 00 00 	sw (r1+0),r0

}
 520:	c3 a0 00 00 	ret

00000524 <set_pin>:
/**********************************************************
 * GPIO Functions
 */

void set_pin(uint8_t value, uint8_t npin)
{
 524:	20 21 00 ff 	andi r1,r1,0xff
 528:	20 42 00 ff 	andi r2,r2,0xff
     if (value)
 52c:	5c 20 00 09 	bne r1,r0,550 <set_pin+0x2c>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 530:	78 01 00 00 	mvhi r1,0x0
 534:	38 21 08 2c 	ori r1,r1,0x82c
 538:	28 21 00 00 	lw r1,(r1+0)
 53c:	a4 40 10 00 	not r2,r2
 540:	28 23 00 00 	lw r3,(r1+0)
 544:	a0 43 10 00 	and r2,r2,r3
 548:	58 22 00 04 	sw (r1+4),r2
 54c:	c3 a0 00 00 	ret
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 550:	78 01 00 00 	mvhi r1,0x0
 554:	38 21 08 2c 	ori r1,r1,0x82c
 558:	28 21 00 00 	lw r1,(r1+0)
 55c:	28 23 00 00 	lw r3,(r1+0)
 560:	b8 43 10 00 	or r2,r2,r3
 564:	58 22 00 04 	sw (r1+4),r2
 568:	c3 a0 00 00 	ret

0000056c <pin_inv>:
}

void pin_inv(uint8_t npin)
{
	uint32_t val;
	val = (~gpio0->read) & npin;
 56c:	78 02 00 00 	mvhi r2,0x0
 570:	38 42 08 2c 	ori r2,r2,0x82c
 574:	28 42 00 00 	lw r2,(r2+0)
		gpio0->write = gpio0->read & (~npin);

}

void pin_inv(uint8_t npin)
{
 578:	20 21 00 ff 	andi r1,r1,0xff
	uint32_t val;
	val = (~gpio0->read) & npin;
 57c:	28 43 00 00 	lw r3,(r2+0)
 580:	a4 60 18 00 	not r3,r3
 * GPIO Functions
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
 584:	a0 23 18 00 	and r3,r1,r3
 588:	5c 60 00 06 	bne r3,r0,5a0 <pin_inv+0x34>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 58c:	28 43 00 00 	lw r3,(r2+0)
 590:	a4 20 08 00 	not r1,r1
 594:	a0 23 08 00 	and r1,r1,r3
 598:	58 41 00 04 	sw (r2+4),r1
 59c:	c3 a0 00 00 	ret
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 5a0:	28 43 00 00 	lw r3,(r2+0)
 5a4:	b8 23 08 00 	or r1,r1,r3
 5a8:	58 41 00 04 	sw (r2+4),r1
 5ac:	c3 a0 00 00 	ret

000005b0 <uart_getchar>:
	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
//}

char uart_getchar()
{   
 5b0:	78 01 00 00 	mvhi r1,0x0
 5b4:	38 21 08 24 	ori r1,r1,0x824
 5b8:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 5bc:	28 41 00 00 	lw r1,(r2+0)
 5c0:	20 21 00 01 	andi r1,r1,0x1
 5c4:	44 20 ff fe 	be r1,r0,5bc <uart_getchar+0xc>
	return uart0->rxtx;
 5c8:	28 41 00 04 	lw r1,(r2+4)
}
 5cc:	20 21 00 ff 	andi r1,r1,0xff
 5d0:	c3 a0 00 00 	ret

000005d4 <uart_putchar>:

void uart_putchar(char c)
{
 5d4:	78 02 00 00 	mvhi r2,0x0
 5d8:	38 42 08 24 	ori r2,r2,0x824
 5dc:	28 43 00 00 	lw r3,(r2+0)
 5e0:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 5e4:	28 62 00 00 	lw r2,(r3+0)
 5e8:	20 42 00 10 	andi r2,r2,0x10
 5ec:	5c 40 ff fe 	bne r2,r0,5e4 <uart_putchar+0x10>
	uart0->rxtx = c;
 5f0:	58 61 00 04 	sw (r3+4),r1
}
 5f4:	c3 a0 00 00 	ret

000005f8 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 5f8:	40 24 00 00 	lbu r4,(r1+0)
 5fc:	44 80 00 0b 	be r4,r0,628 <uart_putstr+0x30>
 600:	78 02 00 00 	mvhi r2,0x0
 604:	38 42 08 24 	ori r2,r2,0x824
 608:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 60c:	28 62 00 00 	lw r2,(r3+0)
 610:	20 42 00 10 	andi r2,r2,0x10
 614:	5c 40 ff fe 	bne r2,r0,60c <uart_putstr+0x14>
	uart0->rxtx = c;
 618:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 61c:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 620:	40 24 00 00 	lbu r4,(r1+0)
 624:	5c 82 ff fa 	bne r4,r2,60c <uart_putstr+0x14>
 628:	c3 a0 00 00 	ret

0000062c <sleept1>:


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 62c:	78 01 00 00 	mvhi r1,0x0
 630:	38 21 08 28 	ori r1,r1,0x828
 634:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr1 = TIMER_EN;
 638:	34 01 00 08 	mvi r1,8


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 63c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 640:	58 41 00 0c 	sw (r2+12),r1
	do {
 		tcr = timer0->tcr1;
 644:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 648:	20 21 00 01 	andi r1,r1,0x1
 64c:	44 20 ff fe 	be r1,r0,644 <sleept1+0x18>
}
 650:	c3 a0 00 00 	ret

00000654 <config_dmx>:


void config_dmx()
{
//configurar pin DMX_PIN como pin de salida 
	gpio0->dir |= DMX_PIN;
 654:	78 01 00 00 	mvhi r1,0x0
 658:	38 21 08 2c 	ori r1,r1,0x82c
 65c:	28 21 00 00 	lw r1,(r1+0)
    //   gpio0->dir = gpio0->dir  | DMX_PIN;
    // config Use timer 1
	timer0->compare1 = (FCPU/1000000)*(TBIT)-80; // for usecond
 660:	78 02 00 00 	mvhi r2,0x0
 664:	38 42 08 28 	ori r2,r2,0x828


void config_dmx()
{
//configurar pin DMX_PIN como pin de salida 
	gpio0->dir |= DMX_PIN;
 668:	28 23 00 08 	lw r3,(r1+8)
    //   gpio0->dir = gpio0->dir  | DMX_PIN;
    // config Use timer 1
	timer0->compare1 = (FCPU/1000000)*(TBIT)-80; // for usecond
 66c:	28 42 00 00 	lw r2,(r2+0)


void config_dmx()
{
//configurar pin DMX_PIN como pin de salida 
	gpio0->dir |= DMX_PIN;
 670:	38 63 00 01 	ori r3,r3,0x1
 674:	58 23 00 08 	sw (r1+8),r3
    //   gpio0->dir = gpio0->dir  | DMX_PIN;
    // config Use timer 1
	timer0->compare1 = (FCPU/1000000)*(TBIT)-80; // for usecond
 678:	34 03 01 40 	mvi r3,320
 67c:	58 43 00 10 	sw (r2+16),r3
	gpio0->write = gpio0->read | DMX_PIN;
 680:	28 22 00 00 	lw r2,(r1+0)
 684:	38 42 00 01 	ori r2,r2,0x1
 688:	58 22 00 04 	sw (r1+4),r2
 
}
 68c:	c3 a0 00 00 	ret

00000690 <pin_inv_old>:


void pin_inv_old(uint32_t num)
{
 690:	37 9c ff f8 	addi sp,sp,-8
 694:	5b 8b 00 08 	sw (sp+8),r11
 698:	5b 9d 00 04 	sw (sp+4),ra
	uint32_t i;
	uint32_t pin_act;
	pin_act = (~gpio0->read) & DMX_PIN;
 69c:	78 02 00 00 	mvhi r2,0x0
 6a0:	38 42 08 2c 	ori r2,r2,0x82c
 6a4:	28 43 00 00 	lw r3,(r2+0)
 
}


void pin_inv_old(uint32_t num)
{
 6a8:	b8 20 58 00 	mv r11,r1
	uint32_t i;
	uint32_t pin_act;
	pin_act = (~gpio0->read) & DMX_PIN;
     set_pin(pin_act, DMX_PIN);
 6ac:	34 02 00 01 	mvi r2,1

void pin_inv_old(uint32_t num)
{
	uint32_t i;
	uint32_t pin_act;
	pin_act = (~gpio0->read) & DMX_PIN;
 6b0:	28 61 00 00 	lw r1,(r3+0)
 6b4:	20 21 00 01 	andi r1,r1,0x1
     set_pin(pin_act, DMX_PIN);
 6b8:	18 21 00 01 	xori r1,r1,0x1
 6bc:	fb ff ff 9a 	calli 524 <set_pin>
	for(i=0;i<num;i++)
 6c0:	45 60 00 0d 	be r11,r0,6f4 <pin_inv_old+0x64>
 6c4:	78 01 00 00 	mvhi r1,0x0
 6c8:	38 21 08 28 	ori r1,r1,0x828
 6cc:	28 23 00 00 	lw r3,(r1+0)
 6d0:	34 04 00 00 	mvi r4,0

void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN;
 6d4:	34 01 00 08 	mvi r1,8


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 6d8:	58 60 00 14 	sw (r3+20),r0
	timer0->tcr1 = TIMER_EN;
 6dc:	58 61 00 0c 	sw (r3+12),r1
	do {
 		tcr = timer0->tcr1;
 6e0:	28 62 00 0c 	lw r2,(r3+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 6e4:	20 42 00 01 	andi r2,r2,0x1
 6e8:	44 40 ff fe 	be r2,r0,6e0 <pin_inv_old+0x50>
{
	uint32_t i;
	uint32_t pin_act;
	pin_act = (~gpio0->read) & DMX_PIN;
     set_pin(pin_act, DMX_PIN);
	for(i=0;i<num;i++)
 6ec:	34 84 00 01 	addi r4,r4,1
 6f0:	55 64 ff fa 	bgu r11,r4,6d8 <pin_inv_old+0x48>
		sleept1();
}
 6f4:	2b 9d 00 04 	lw ra,(sp+4)
 6f8:	2b 8b 00 08 	lw r11,(sp+8)
 6fc:	37 9c 00 08 	addi sp,sp,8
 700:	c3 a0 00 00 	ret

00000704 <dmx_channel_send>:
 }



void dmx_channel_send(uint8_t value)
{
 704:	37 9c ff ec 	addi sp,sp,-20
 708:	5b 8b 00 14 	sw (sp+20),r11
 70c:	5b 8c 00 10 	sw (sp+16),r12
 710:	5b 8d 00 0c 	sw (sp+12),r13
 714:	5b 8e 00 08 	sw (sp+8),r14
 718:	5b 9d 00 04 	sw (sp+4),ra
 71c:	78 0d 00 00 	mvhi r13,0x0
 720:	20 2c 00 ff 	andi r12,r1,0xff
	uint8_t bit, i;
       pin_inv_old(1); // bita start
 724:	34 01 00 01 	mvi r1,1
 728:	fb ff ff da 	calli 690 <pin_inv_old>
 72c:	34 0b 00 08 	mvi r11,8
 730:	39 ad 08 28 	ori r13,r13,0x828

void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN;
 734:	34 0e 00 08 	mvi r14,8
       pin_inv_old(1); // bita start
 	//nsleep(4000);
	for(i=0;i<8;i++)
	{
		bit=value & 0x01;
 		set_pin(bit, DMX_PIN);	
 738:	21 81 00 01 	andi r1,r12,0x1
 73c:	34 02 00 01 	mvi r2,1
 740:	fb ff ff 79 	calli 524 <set_pin>


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 744:	29 a2 00 00 	lw r2,(r13+0)
 	//nsleep(4000);
	for(i=0;i<8;i++)
	{
		bit=value & 0x01;
 		set_pin(bit, DMX_PIN);	
		value=value>>1;
 748:	01 8c 00 01 	srui r12,r12,1


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 74c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 750:	58 4e 00 0c 	sw (r2+12),r14
	do {
 		tcr = timer0->tcr1;
 754:	28 43 00 0c 	lw r3,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 758:	20 63 00 01 	andi r3,r3,0x1
 75c:	44 60 ff fe 	be r3,r0,754 <dmx_channel_send+0x50>
 760:	35 6b ff ff 	addi r11,r11,-1
 764:	21 6b 00 ff 	andi r11,r11,0xff
void dmx_channel_send(uint8_t value)
{
	uint8_t bit, i;
       pin_inv_old(1); // bita start
 	//nsleep(4000);
	for(i=0;i<8;i++)
 768:	5d 60 ff f4 	bne r11,r0,738 <dmx_channel_send+0x34>
		bit=value & 0x01;
 		set_pin(bit, DMX_PIN);	
		value=value>>1;
		sleept1();
        }
	gpio0->write = gpio0->read | DMX_PIN;
 76c:	78 01 00 00 	mvhi r1,0x0
 770:	38 21 08 2c 	ori r1,r1,0x82c
 774:	28 21 00 00 	lw r1,(r1+0)
 778:	28 23 00 00 	lw r3,(r1+0)
 77c:	38 63 00 01 	ori r3,r3,0x1
 780:	58 23 00 04 	sw (r1+4),r3


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 784:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 788:	34 01 00 08 	mvi r1,8
 78c:	58 41 00 0c 	sw (r2+12),r1
	do {
 		tcr = timer0->tcr1;
 790:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 794:	20 21 00 01 	andi r1,r1,0x1
 798:	44 20 ff fe 	be r1,r0,790 <dmx_channel_send+0x8c>


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 79c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 7a0:	34 01 00 08 	mvi r1,8
 7a4:	58 41 00 0c 	sw (r2+12),r1
	do {
 		tcr = timer0->tcr1;
 7a8:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 7ac:	20 21 00 01 	andi r1,r1,0x1
 7b0:	44 20 ff fe 	be r1,r0,7a8 <dmx_channel_send+0xa4>
        }
	gpio0->write = gpio0->read | DMX_PIN;
	sleept1();
	sleept1();
	
	}
 7b4:	2b 9d 00 04 	lw ra,(sp+4)
 7b8:	2b 8b 00 14 	lw r11,(sp+20)
 7bc:	2b 8c 00 10 	lw r12,(sp+16)
 7c0:	2b 8d 00 0c 	lw r13,(sp+12)
 7c4:	2b 8e 00 08 	lw r14,(sp+8)
 7c8:	37 9c 00 14 	addi sp,sp,20
 7cc:	c3 a0 00 00 	ret

000007d0 <dmx_init_send>:
}



void dmx_init_send()
{
 7d0:	37 9c ff fc 	addi sp,sp,-4
 7d4:	5b 9d 00 04 	sw (sp+4),ra
	pin_inv_old(22);
 7d8:	34 01 00 16 	mvi r1,22
 7dc:	fb ff ff ad 	calli 690 <pin_inv_old>
	pin_inv_old(2);
 7e0:	34 01 00 02 	mvi r1,2
 7e4:	fb ff ff ab 	calli 690 <pin_inv_old>
	dmx_channel_send(0);    	
 7e8:	34 01 00 00 	mvi r1,0
 7ec:	fb ff ff c6 	calli 704 <dmx_channel_send>
 }
 7f0:	2b 9d 00 04 	lw ra,(sp+4)
 7f4:	37 9c 00 04 	addi sp,sp,4
 7f8:	c3 a0 00 00 	ret
