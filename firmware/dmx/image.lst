
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         0000056c  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000084  0000056c  0000056c  000005c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  000005f0  000005f0  00000644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000008c  00000608  00000608  0000065c  2**2
                  ALLOC
  4 .debug_abbrev 00000260  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000061a  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000040d  00000000  00000000  00000ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000120  00000000  00000000  000012e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000010f  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000159  00000000  00000000  00001513  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000084  00000000  00000000  0000166c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000001f2  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  00001922  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000018  00000000  00000000  00001933  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 ac 	calli 37c <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 06 10 	ori gp,gp,0x610
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 06 08 	ori r1,r1,0x608
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 06 94 	ori r3,r3,0x694

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 44 	calli 24c <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <inicio>:
volatile uint8_t *p2;

extern uint32_t tic_msec;

void inicio()
{
 208:	37 9c ff fc 	addi sp,sp,-4
 20c:	5b 9d 00 04 	sw (sp+4),ra
  uart_putstr("SerialToDmx ready ");
 210:	78 01 00 00 	mvhi r1,0x0
 214:	38 21 05 6c 	ori r1,r1,0x56c
 218:	f8 00 00 c8 	calli 538 <uart_putstr>
  uart_putstr("Syntax:");
 21c:	78 01 00 00 	mvhi r1,0x0
 220:	38 21 05 80 	ori r1,r1,0x580
 224:	f8 00 00 c5 	calli 538 <uart_putstr>
  uart_putstr(" 123c : use DMX channel 123");
 228:	78 01 00 00 	mvhi r1,0x0
 22c:	38 21 05 88 	ori r1,r1,0x588
 230:	f8 00 00 c2 	calli 538 <uart_putstr>
  uart_putstr(" 45w  : set current channel to value 45");
 234:	78 01 00 00 	mvhi r1,0x0
 238:	38 21 05 a4 	ori r1,r1,0x5a4
 23c:	f8 00 00 bf 	calli 538 <uart_putstr>

}
 240:	2b 9d 00 04 	lw ra,(sp+4)
 244:	37 9c 00 04 	addi sp,sp,4
 248:	c3 a0 00 00 	ret

0000024c <main>:
int main()
{
 24c:	37 9c ff e4 	addi sp,sp,-28
 250:	5b 8b 00 1c 	sw (sp+28),r11
 254:	5b 8c 00 18 	sw (sp+24),r12
 258:	5b 8d 00 14 	sw (sp+20),r13
 25c:	5b 8e 00 10 	sw (sp+16),r14
 260:	5b 8f 00 0c 	sw (sp+12),r15
 264:	5b 90 00 08 	sw (sp+8),r16
 268:	5b 9d 00 04 	sw (sp+4),ra
 26c:	78 10 00 00 	mvhi r16,0x0
 270:	78 0f 00 00 	mvhi r15,0x0
 274:	78 0e 00 00 	mvhi r14,0x0
	uint8_t value = 0;
	uint8_t channel;
	uint8_t c;

	inicio();
 278:	fb ff ff e4 	calli 208 <inicio>
 27c:	3a 10 05 cc 	ori r16,r16,0x5cc
 280:	39 ef 05 d8 	ori r15,r15,0x5d8
 284:	39 ce 05 e4 	ori r14,r14,0x5e4

	for(;;)  
	{
		c = uart_getchar();
		if ((c>='0') && (c<='9')) 
 288:	34 0b 00 09 	mvi r11,9
	  		value = 10*value + c - '0';
		else if (c=='c') 
 28c:	34 0c 00 63 	mvi r12,99
		  	channel = value;
		else if (c=='w') 
 290:	34 0d 00 77 	mvi r13,119

	inicio();

	for(;;)  
	{
		c = uart_getchar();
 294:	f8 00 00 97 	calli 4f0 <uart_getchar>
		if ((c>='0') && (c<='9')) 
 298:	34 22 ff d0 	addi r2,r1,-48
 29c:	20 42 00 ff 	andi r2,r2,0xff
 2a0:	51 62 ff fd 	bgeu r11,r2,294 <main+0x48>
	  		value = 10*value + c - '0';
		else if (c=='c') 
 2a4:	44 2c ff fc 	be r1,r12,294 <main+0x48>
		  	channel = value;
		else if (c=='w') 
 2a8:	5c 2d ff fb 	bne r1,r13,294 <main+0x48>
		{
		/// ACÁ VA EL ENVIO POR DMX
			 uart_putstr(" OK DATO");
 2ac:	ba 00 08 00 	mv r1,r16
 2b0:	f8 00 00 a2 	calli 538 <uart_putstr>
			 uart_putstr(" channel");
 2b4:	b9 e0 08 00 	mv r1,r15
 2b8:	f8 00 00 a0 	calli 538 <uart_putstr>
			 uart_putchar(channel);
 2bc:	34 01 00 00 	mvi r1,0
 2c0:	f8 00 00 95 	calli 514 <uart_putchar>
			 uart_putstr("  value");
 2c4:	b9 c0 08 00 	mv r1,r14
 2c8:	f8 00 00 9c 	calli 538 <uart_putstr>
			 uart_putchar(value);
 2cc:	34 01 00 00 	mvi r1,0
 2d0:	f8 00 00 91 	calli 514 <uart_putchar>
 2d4:	e3 ff ff f0 	bi 294 <main+0x48>

000002d8 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 2d8:	c3 a0 00 00 	ret

000002dc <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 2dc:	78 01 00 00 	mvhi r1,0x0
 2e0:	38 21 06 90 	ori r1,r1,0x690
 2e4:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2e8:	78 02 00 00 	mvhi r2,0x0
 2ec:	38 42 05 fc 	ori r2,r2,0x5fc
 2f0:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 2f4:	34 63 00 01 	addi r3,r3,1
 2f8:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2fc:	34 01 00 0e 	mvi r1,14
 300:	58 41 00 00 	sw (r2+0),r1
}
 304:	c3 a0 00 00 	ret

00000308 <prueba>:

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 308:	78 02 00 00 	mvhi r2,0x0
 30c:	38 42 05 f8 	ori r2,r2,0x5f8
	   timer0->tcr0 = 0xAA;
 310:	78 01 00 00 	mvhi r1,0x0

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 314:	28 44 00 00 	lw r4,(r2+0)
	   timer0->tcr0 = 0xAA;
 318:	38 21 05 fc 	ori r1,r1,0x5fc
	   gpio0->ctrl=0x55;
 31c:	78 02 00 00 	mvhi r2,0x0
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
	   timer0->tcr0 = 0xAA;
 320:	28 23 00 00 	lw r3,(r1+0)
	   gpio0->ctrl=0x55;
 324:	38 42 06 00 	ori r2,r2,0x600
	   spi0->rxtx=1;
 328:	78 01 00 00 	mvhi r1,0x0

void prueba()
{
	   uart0->rxtx=30;
	   timer0->tcr0 = 0xAA;
	   gpio0->ctrl=0x55;
 32c:	28 42 00 00 	lw r2,(r2+0)
	   spi0->rxtx=1;
 330:	38 21 06 04 	ori r1,r1,0x604

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 334:	34 05 00 1e 	mvi r5,30
 338:	58 85 00 04 	sw (r4+4),r5
	   timer0->tcr0 = 0xAA;
	   gpio0->ctrl=0x55;
	   spi0->rxtx=1;
 33c:	28 21 00 00 	lw r1,(r1+0)
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
	   timer0->tcr0 = 0xAA;
 340:	34 04 00 aa 	mvi r4,170
 344:	58 64 00 00 	sw (r3+0),r4
	   gpio0->ctrl=0x55;
 348:	34 03 00 55 	mvi r3,85
 34c:	58 43 00 00 	sw (r2+0),r3
	   spi0->rxtx=1;
 350:	34 02 00 01 	mvi r2,1
 354:	58 22 00 00 	sw (r1+0),r2
	   spi0->nop1=2;
 358:	34 02 00 02 	mvi r2,2
 35c:	58 22 00 04 	sw (r1+4),r2
	   spi0->cs=3;
 360:	34 02 00 03 	mvi r2,3
 364:	58 22 00 08 	sw (r1+8),r2
	   spi0->divisor=4;
 368:	34 02 00 04 	mvi r2,4
 36c:	58 22 00 10 	sw (r1+16),r2
	   spi0->nop2=5;
 370:	34 02 00 05 	mvi r2,5
 374:	58 22 00 0c 	sw (r1+12),r2

}
 378:	c3 a0 00 00 	ret

0000037c <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 37c:	37 9c ff f0 	addi sp,sp,-16
 380:	5b 8b 00 10 	sw (sp+16),r11
 384:	5b 8c 00 0c 	sw (sp+12),r12
 388:	5b 8d 00 08 	sw (sp+8),r13
 38c:	5b 9d 00 04 	sw (sp+4),ra
 390:	78 0b 00 00 	mvhi r11,0x0
 394:	39 6b 06 10 	ori r11,r11,0x610
 398:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 39c:	35 6d 00 80 	addi r13,r11,128
 3a0:	e0 00 00 04 	bi 3b0 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 3a4:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 3a8:	45 6d 00 08 	be r11,r13,3c8 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 3ac:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 3b0:	21 81 00 01 	andi r1,r12,0x1
 3b4:	44 20 ff fc 	be r1,r0,3a4 <irq_handler+0x28>
 3b8:	29 61 00 00 	lw r1,(r11+0)
 3bc:	35 6b 00 04 	addi r11,r11,4
 3c0:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 3c4:	5d 6d ff fa 	bne r11,r13,3ac <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 3c8:	2b 9d 00 04 	lw ra,(sp+4)
 3cc:	2b 8b 00 10 	lw r11,(sp+16)
 3d0:	2b 8c 00 0c 	lw r12,(sp+12)
 3d4:	2b 8d 00 08 	lw r13,(sp+8)
 3d8:	37 9c 00 10 	addi sp,sp,16
 3dc:	c3 a0 00 00 	ret

000003e0 <isr_init>:

void isr_init()
{
 3e0:	78 01 00 00 	mvhi r1,0x0
 3e4:	78 02 00 00 	mvhi r2,0x0
 3e8:	38 21 06 10 	ori r1,r1,0x610
 3ec:	38 42 02 d8 	ori r2,r2,0x2d8
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 3f0:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 3f4:	58 22 00 00 	sw (r1+0),r2
 3f8:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 3fc:	5c 23 ff fe 	bne r1,r3,3f4 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 400:	c3 a0 00 00 	ret

00000404 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 404:	78 03 00 00 	mvhi r3,0x0
 408:	3c 21 00 02 	sli r1,r1,2
 40c:	38 63 06 10 	ori r3,r3,0x610
 410:	b4 61 18 00 	add r3,r3,r1
 414:	58 62 00 00 	sw (r3+0),r2
}
 418:	c3 a0 00 00 	ret

0000041c <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 41c:	78 03 00 00 	mvhi r3,0x0
 420:	3c 21 00 02 	sli r1,r1,2
 424:	38 63 06 10 	ori r3,r3,0x610
 428:	78 02 00 00 	mvhi r2,0x0
 42c:	b4 61 18 00 	add r3,r3,r1
 430:	38 42 02 d8 	ori r2,r2,0x2d8
 434:	58 62 00 00 	sw (r3+0),r2
}
 438:	c3 a0 00 00 	ret

0000043c <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 43c:	78 04 00 00 	mvhi r4,0x0
 440:	38 84 05 ec 	ori r4,r4,0x5ec
 444:	28 83 00 00 	lw r3,(r4+0)
 448:	78 02 00 00 	mvhi r2,0x0
 44c:	38 42 05 fc 	ori r2,r2,0x5fc
 450:	28 42 00 00 	lw r2,(r2+0)
 454:	88 23 08 00 	mul r1,r1,r3
 458:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 45c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 460:	34 01 00 08 	mvi r1,8
 464:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 468:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 46c:	20 21 00 01 	andi r1,r1,0x1
 470:	44 20 ff fe 	be r1,r0,468 <msleep+0x2c>
}
 474:	c3 a0 00 00 	ret

00000478 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 478:	78 02 00 00 	mvhi r2,0x0
 47c:	38 42 05 fc 	ori r2,r2,0x5fc
 480:	28 42 00 00 	lw r2,(r2+0)
 484:	08 21 00 64 	muli r1,r1,100
 488:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 48c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 490:	34 01 00 08 	mvi r1,8
 494:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 498:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 49c:	20 21 00 01 	andi r1,r1,0x1
 4a0:	44 20 ff fe 	be r1,r0,498 <nsleep+0x20>
}
 4a4:	c3 a0 00 00 	ret

000004a8 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 4a8:	78 01 00 00 	mvhi r1,0x0
 4ac:	38 21 05 fc 	ori r1,r1,0x5fc
 4b0:	28 23 00 00 	lw r3,(r1+0)
 4b4:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 4b8:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 4bc:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 4c0:	38 21 06 90 	ori r1,r1,0x690

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 4c4:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 4c8:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 4cc:	78 02 00 00 	mvhi r2,0x0
 4d0:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 4d4:	34 04 00 0e 	mvi r4,14
 4d8:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 4dc:	38 21 06 10 	ori r1,r1,0x610
 4e0:	38 42 02 dc 	ori r2,r2,0x2dc
 4e4:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 4e8:	c3 a0 00 00 	ret

000004ec <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 4ec:	c3 a0 00 00 	ret

000004f0 <uart_getchar>:

char uart_getchar()
{   
 4f0:	78 01 00 00 	mvhi r1,0x0
 4f4:	38 21 05 f8 	ori r1,r1,0x5f8
 4f8:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 4fc:	28 41 00 00 	lw r1,(r2+0)
 500:	20 21 00 01 	andi r1,r1,0x1
 504:	44 20 ff fe 	be r1,r0,4fc <uart_getchar+0xc>
	return uart0->rxtx;
 508:	28 41 00 04 	lw r1,(r2+4)
}
 50c:	20 21 00 ff 	andi r1,r1,0xff
 510:	c3 a0 00 00 	ret

00000514 <uart_putchar>:

void uart_putchar(char c)
{
 514:	78 02 00 00 	mvhi r2,0x0
 518:	38 42 05 f8 	ori r2,r2,0x5f8
 51c:	28 43 00 00 	lw r3,(r2+0)
 520:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 524:	28 62 00 00 	lw r2,(r3+0)
 528:	20 42 00 10 	andi r2,r2,0x10
 52c:	5c 40 ff fe 	bne r2,r0,524 <uart_putchar+0x10>
	uart0->rxtx = c;
 530:	58 61 00 04 	sw (r3+4),r1
}
 534:	c3 a0 00 00 	ret

00000538 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 538:	40 24 00 00 	lbu r4,(r1+0)
 53c:	44 80 00 0b 	be r4,r0,568 <uart_putstr+0x30>
 540:	78 02 00 00 	mvhi r2,0x0
 544:	38 42 05 f8 	ori r2,r2,0x5f8
 548:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 54c:	28 62 00 00 	lw r2,(r3+0)
 550:	20 42 00 10 	andi r2,r2,0x10
 554:	5c 40 ff fe 	bne r2,r0,54c <uart_putstr+0x14>
	uart0->rxtx = c;
 558:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 55c:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 560:	40 24 00 00 	lbu r4,(r1+0)
 564:	5c 82 ff fa 	bne r4,r2,54c <uart_putstr+0x14>
 568:	c3 a0 00 00 	ret
