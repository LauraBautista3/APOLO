
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         000006f0  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000004  000006f0  000006f0  00000744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000010  000006f4  000006f4  00000748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000090  00000704  00000704  00000758  2**2
                  ALLOC
  4 .debug_abbrev 00000331  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000867  00000000  00000000  00000a89  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005dd  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000190  00000000  00000000  000018d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000219  00000000  00000000  00001a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000001c2  00000000  00000000  00001c79  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 000000c5  00000000  00000000  00001e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000060  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000231  00000000  00000000  00001f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  00002191  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000018  00000000  00000000  000021a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 b0 	calli 38c <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 07 10 	ori gp,gp,0x710
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 07 04 	ori r1,r1,0x704
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 07 94 	ori r3,r3,0x794

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:


//#define DEBUG 

int main()
{
 208:	37 9c ff e0 	addi sp,sp,-32
 20c:	5b 8b 00 20 	sw (sp+32),r11
 210:	5b 8c 00 1c 	sw (sp+28),r12
 214:	5b 8d 00 18 	sw (sp+24),r13
 218:	5b 8e 00 14 	sw (sp+20),r14
 21c:	5b 8f 00 10 	sw (sp+16),r15
 220:	5b 90 00 0c 	sw (sp+12),r16
 224:	5b 91 00 08 	sw (sp+8),r17
 228:	5b 9d 00 04 	sw (sp+4),ra

uint32_t ch1;
uint32_t ch2;
uint32_t ch3;

	gpio0->dir=0x00;
 22c:	78 0d 00 00 	mvhi r13,0x0
 230:	39 ad 06 fc 	ori r13,r13,0x6fc
 234:	29 a1 00 00 	lw r1,(r13+0)
 238:	78 0c 00 00 	mvhi r12,0x0
 23c:	78 0e 00 00 	mvhi r14,0x0
 240:	58 20 00 08 	sw (r1+8),r0
 244:	39 8c 07 04 	ori r12,r12,0x704
 248:	39 ce 07 8c 	ori r14,r14,0x78c
 24c:	29 a1 00 00 	lw r1,(r13+0)
	for(;;)
	{
		while (gpio0->read & 0x01);
 250:	28 2b 00 00 	lw r11,(r1+0)
 254:	21 6b 00 01 	andi r11,r11,0x1
 258:	5d 60 ff fe 	bne r11,r0,250 <main+0x48>
		timebreak();
 25c:	f8 00 00 c8 	calli 57c <timebreak>
		timeMAB();
 260:	f8 00 00 da 	calli 5c8 <timeMAB>
		if (!(error))
 264:	29 81 00 00 	lw r1,(r12+0)
 268:	5c 2b 00 22 	bne r1,r11,2f0 <main+0xe8>
 26c:	29 a1 00 00 	lw r1,(r13+0)
		{
				while (gpio0->read & 0x01);
 270:	28 2b 00 00 	lw r11,(r1+0)
 274:	21 6b 00 01 	andi r11,r11,0x1
 278:	5d 60 ff fe 	bne r11,r0,270 <main+0x68>
				sleep2us();
 27c:	f8 00 00 e0 	calli 5fc <sleep2us>
				dato = leerdatos();
 280:	f8 00 00 f7 	calli 65c <leerdatos>
 284:	59 c1 00 00 	sw (r14+0),r1
 				if (!(error) && (dato ==0))
 288:	29 81 00 00 	lw r1,(r12+0)
 28c:	5c 2b 00 19 	bne r1,r11,2f0 <main+0xe8>
 290:	29 c2 00 00 	lw r2,(r14+0)
 294:	5c 41 00 17 	bne r2,r1,2f0 <main+0xe8>
 298:	29 a2 00 00 	lw r2,(r13+0)
				{

					while (gpio0->read & 0x01);
 29c:	28 41 00 00 	lw r1,(r2+0)
 2a0:	20 21 00 01 	andi r1,r1,0x1
 2a4:	5c 20 ff fe 	bne r1,r0,29c <main+0x94>
					//sleep2us();
					ch1 = leerdatos();
 2a8:	f8 00 00 ed 	calli 65c <leerdatos>
 2ac:	29 a3 00 00 	lw r3,(r13+0)
 2b0:	b8 20 88 00 	mv r17,r1
					while (gpio0->read & 0x01);
 2b4:	28 62 00 00 	lw r2,(r3+0)
 2b8:	20 42 00 01 	andi r2,r2,0x1
 2bc:	5c 40 ff fe 	bne r2,r0,2b4 <main+0xac>
					sleep2us();
 2c0:	f8 00 00 cf 	calli 5fc <sleep2us>
					ch2 = leerdatos();
 2c4:	f8 00 00 e6 	calli 65c <leerdatos>
 2c8:	29 a2 00 00 	lw r2,(r13+0)
 2cc:	b8 20 80 00 	mv r16,r1
					while (gpio0->read & 0x01);
 2d0:	28 4b 00 00 	lw r11,(r2+0)
 2d4:	21 6b 00 01 	andi r11,r11,0x1
 2d8:	5d 60 ff fe 	bne r11,r0,2d0 <main+0xc8>
					sleep2us();
 2dc:	f8 00 00 c8 	calli 5fc <sleep2us>
					ch3 = leerdatos();
 2e0:	f8 00 00 df 	calli 65c <leerdatos>
					if (!(error))
 2e4:	29 82 00 00 	lw r2,(r12+0)
					while (gpio0->read & 0x01);
					sleep2us();
					ch2 = leerdatos();
					while (gpio0->read & 0x01);
					sleep2us();
					ch3 = leerdatos();
 2e8:	b8 20 78 00 	mv r15,r1
					if (!(error))
 2ec:	44 4b 00 03 	be r2,r11,2f8 <main+0xf0>
					}

	
				}			    	  
			}
		error=0;
 2f0:	59 80 00 00 	sw (r12+0),r0
	}
 2f4:	e3 ff ff d6 	bi 24c <main+0x44>
					while (gpio0->read & 0x01);
					sleep2us();
					ch3 = leerdatos();
					if (!(error))
					{
					uart_putchar(ch1);
 2f8:	ba 20 08 00 	mv r1,r17
 2fc:	f8 00 00 8a 	calli 524 <uart_putchar>
					uart_putchar(ch2);
 300:	ba 00 08 00 	mv r1,r16
 304:	f8 00 00 88 	calli 524 <uart_putchar>
					uart_putchar(ch3);
 308:	b9 e0 08 00 	mv r1,r15
 30c:	f8 00 00 86 	calli 524 <uart_putchar>
					}

	
				}			    	  
			}
		error=0;
 310:	59 80 00 00 	sw (r12+0),r0
 314:	e3 ff ff ce 	bi 24c <main+0x44>

00000318 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 318:	c3 a0 00 00 	ret

0000031c <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 31c:	78 01 00 00 	mvhi r1,0x0
 320:	38 21 07 88 	ori r1,r1,0x788
 324:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 328:	78 02 00 00 	mvhi r2,0x0
 32c:	38 42 06 f8 	ori r2,r2,0x6f8
 330:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 334:	34 63 00 01 	addi r3,r3,1
 338:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 33c:	34 01 00 0e 	mvi r1,14
 340:	58 41 00 00 	sw (r2+0),r1
}
 344:	c3 a0 00 00 	ret

00000348 <prueba>:

void prueba()
{
//	   uart0->rxtx=30;
//	   timer0->tcr0 = 0xAA;
	   gpio0->dir=0x0F; 
 348:	78 01 00 00 	mvhi r1,0x0
 34c:	38 21 06 fc 	ori r1,r1,0x6fc
 350:	28 21 00 00 	lw r1,(r1+0)
 354:	34 02 00 0f 	mvi r2,15
 358:	58 22 00 08 	sw (r1+8),r2
}
 35c:	c3 a0 00 00 	ret

00000360 <prueba1>:
void prueba1()
{
           gpio0->write = 0xff;
 360:	78 01 00 00 	mvhi r1,0x0
 364:	38 21 06 fc 	ori r1,r1,0x6fc
 368:	28 21 00 00 	lw r1,(r1+0)
 36c:	34 02 00 ff 	mvi r2,255
 370:	58 22 00 04 	sw (r1+4),r2
}
 374:	c3 a0 00 00 	ret

00000378 <prueba2>:
void prueba2()
{
           gpio0->write = 0x00;
 378:	78 01 00 00 	mvhi r1,0x0
 37c:	38 21 06 fc 	ori r1,r1,0x6fc
 380:	28 21 00 00 	lw r1,(r1+0)
 384:	58 20 00 04 	sw (r1+4),r0
}
 388:	c3 a0 00 00 	ret

0000038c <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 38c:	37 9c ff f0 	addi sp,sp,-16
 390:	5b 8b 00 10 	sw (sp+16),r11
 394:	5b 8c 00 0c 	sw (sp+12),r12
 398:	5b 8d 00 08 	sw (sp+8),r13
 39c:	5b 9d 00 04 	sw (sp+4),ra
 3a0:	78 0b 00 00 	mvhi r11,0x0
 3a4:	39 6b 07 08 	ori r11,r11,0x708
 3a8:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 3ac:	35 6d 00 80 	addi r13,r11,128
 3b0:	e0 00 00 04 	bi 3c0 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 3b4:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 3b8:	45 6d 00 08 	be r11,r13,3d8 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 3bc:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 3c0:	21 81 00 01 	andi r1,r12,0x1
 3c4:	44 20 ff fc 	be r1,r0,3b4 <irq_handler+0x28>
 3c8:	29 61 00 00 	lw r1,(r11+0)
 3cc:	35 6b 00 04 	addi r11,r11,4
 3d0:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 3d4:	5d 6d ff fa 	bne r11,r13,3bc <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 3d8:	2b 9d 00 04 	lw ra,(sp+4)
 3dc:	2b 8b 00 10 	lw r11,(sp+16)
 3e0:	2b 8c 00 0c 	lw r12,(sp+12)
 3e4:	2b 8d 00 08 	lw r13,(sp+8)
 3e8:	37 9c 00 10 	addi sp,sp,16
 3ec:	c3 a0 00 00 	ret

000003f0 <isr_init>:

void isr_init()
{
 3f0:	78 01 00 00 	mvhi r1,0x0
 3f4:	78 02 00 00 	mvhi r2,0x0
 3f8:	38 21 07 08 	ori r1,r1,0x708
 3fc:	38 42 03 18 	ori r2,r2,0x318
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 400:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 404:	58 22 00 00 	sw (r1+0),r2
 408:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 40c:	5c 23 ff fe 	bne r1,r3,404 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 410:	c3 a0 00 00 	ret

00000414 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 414:	78 03 00 00 	mvhi r3,0x0
 418:	3c 21 00 02 	sli r1,r1,2
 41c:	38 63 07 08 	ori r3,r3,0x708
 420:	b4 61 18 00 	add r3,r3,r1
 424:	58 62 00 00 	sw (r3+0),r2
}
 428:	c3 a0 00 00 	ret

0000042c <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 42c:	78 03 00 00 	mvhi r3,0x0
 430:	3c 21 00 02 	sli r1,r1,2
 434:	38 63 07 08 	ori r3,r3,0x708
 438:	78 02 00 00 	mvhi r2,0x0
 43c:	b4 61 18 00 	add r3,r3,r1
 440:	38 42 03 18 	ori r2,r2,0x318
 444:	58 62 00 00 	sw (r3+0),r2
}
 448:	c3 a0 00 00 	ret

0000044c <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 44c:	78 04 00 00 	mvhi r4,0x0
 450:	38 84 06 f0 	ori r4,r4,0x6f0
 454:	28 83 00 00 	lw r3,(r4+0)
 458:	78 02 00 00 	mvhi r2,0x0
 45c:	38 42 06 f8 	ori r2,r2,0x6f8
 460:	28 42 00 00 	lw r2,(r2+0)
 464:	88 23 08 00 	mul r1,r1,r3
 468:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 46c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 470:	34 01 00 08 	mvi r1,8
 474:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 478:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 47c:	20 21 00 01 	andi r1,r1,0x1
 480:	44 20 ff fe 	be r1,r0,478 <msleep+0x2c>
}
 484:	c3 a0 00 00 	ret

00000488 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 488:	78 02 00 00 	mvhi r2,0x0
 48c:	38 42 06 f8 	ori r2,r2,0x6f8
 490:	28 42 00 00 	lw r2,(r2+0)
 494:	08 21 00 64 	muli r1,r1,100
 498:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 49c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 4a0:	34 01 00 08 	mvi r1,8
 4a4:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 4a8:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 4ac:	20 21 00 01 	andi r1,r1,0x1
 4b0:	44 20 ff fe 	be r1,r0,4a8 <nsleep+0x20>
}
 4b4:	c3 a0 00 00 	ret

000004b8 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 4b8:	78 01 00 00 	mvhi r1,0x0
 4bc:	38 21 06 f8 	ori r1,r1,0x6f8
 4c0:	28 23 00 00 	lw r3,(r1+0)
 4c4:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 4c8:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 4cc:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 4d0:	38 21 07 88 	ori r1,r1,0x788

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 4d4:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 4d8:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 4dc:	78 02 00 00 	mvhi r2,0x0
 4e0:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 4e4:	34 04 00 0e 	mvi r4,14
 4e8:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 4ec:	38 21 07 08 	ori r1,r1,0x708
 4f0:	38 42 03 1c 	ori r2,r2,0x31c
 4f4:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 4f8:	c3 a0 00 00 	ret

000004fc <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 4fc:	c3 a0 00 00 	ret

00000500 <uart_getchar>:

char uart_getchar()
{   
 500:	78 01 00 00 	mvhi r1,0x0
 504:	38 21 06 f4 	ori r1,r1,0x6f4
 508:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 50c:	28 41 00 00 	lw r1,(r2+0)
 510:	20 21 00 01 	andi r1,r1,0x1
 514:	44 20 ff fe 	be r1,r0,50c <uart_getchar+0xc>
	return uart0->rxtx;
 518:	28 41 00 04 	lw r1,(r2+4)
}
 51c:	20 21 00 ff 	andi r1,r1,0xff
 520:	c3 a0 00 00 	ret

00000524 <uart_putchar>:

void uart_putchar(char c)
{
 524:	78 02 00 00 	mvhi r2,0x0
 528:	38 42 06 f4 	ori r2,r2,0x6f4
 52c:	28 43 00 00 	lw r3,(r2+0)
 530:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 534:	28 62 00 00 	lw r2,(r3+0)
 538:	20 42 00 10 	andi r2,r2,0x10
 53c:	5c 40 ff fe 	bne r2,r0,534 <uart_putchar+0x10>
	uart0->rxtx = c;
 540:	58 61 00 04 	sw (r3+4),r1
}
 544:	c3 a0 00 00 	ret

00000548 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 548:	40 24 00 00 	lbu r4,(r1+0)
 54c:	44 80 00 0b 	be r4,r0,578 <uart_putstr+0x30>
 550:	78 02 00 00 	mvhi r2,0x0
 554:	38 42 06 f4 	ori r2,r2,0x6f4
 558:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 55c:	28 62 00 00 	lw r2,(r3+0)
 560:	20 42 00 10 	andi r2,r2,0x10
 564:	5c 40 ff fe 	bne r2,r0,55c <uart_putstr+0x14>
	uart0->rxtx = c;
 568:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 56c:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 570:	40 24 00 00 	lbu r4,(r1+0)
 574:	5c 82 ff fa 	bne r4,r2,55c <uart_putstr+0x14>
 578:	c3 a0 00 00 	ret

0000057c <timebreak>:


void timebreak()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 57c:	78 01 00 00 	mvhi r1,0x0
 580:	38 21 06 f8 	ori r1,r1,0x6f8
 584:	28 21 00 00 	lw r1,(r1+0)
	timer0->compare1 = (FCPU/1000000)*(85);
 588:	34 02 21 34 	mvi r2,8500


void timebreak()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 58c:	58 20 00 14 	sw (r1+20),r0
	timer0->compare1 = (FCPU/1000000)*(85);
 590:	58 22 00 10 	sw (r1+16),r2
	timer0->tcr1 = TIMER_EN;
 594:	34 02 00 08 	mvi r2,8
 598:	58 22 00 0c 	sw (r1+12),r2
	do {
 		tcr = timer0->tcr1;
 59c:	28 22 00 0c 	lw r2,(r1+12)
 	} while ( ! ((tcr & TIMER_TRIG)) );
 5a0:	20 42 00 01 	andi r2,r2,0x1
 5a4:	44 40 ff fe 	be r2,r0,59c <timebreak+0x20>
	timer0->tcr1=0;
 5a8:	78 02 00 00 	mvhi r2,0x0
 5ac:	38 42 06 fc 	ori r2,r2,0x6fc
 5b0:	28 42 00 00 	lw r2,(r2+0)
 5b4:	58 20 00 0c 	sw (r1+12),r0
	while (!(gpio0->read & 0x01));
 5b8:	28 41 00 00 	lw r1,(r2+0)
 5bc:	20 21 00 01 	andi r1,r1,0x1
 5c0:	44 20 ff fe 	be r1,r0,5b8 <timebreak+0x3c>

}
 5c4:	c3 a0 00 00 	ret

000005c8 <timeMAB>:

void timeMAB()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 5c8:	78 01 00 00 	mvhi r1,0x0
 5cc:	38 21 06 f8 	ori r1,r1,0x6f8
 5d0:	28 21 00 00 	lw r1,(r1+0)
	timer0->compare1 = (FCPU/1000000)*(4);
 5d4:	34 02 01 90 	mvi r2,400
}

void timeMAB()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 5d8:	58 20 00 14 	sw (r1+20),r0
	timer0->compare1 = (FCPU/1000000)*(4);
 5dc:	58 22 00 10 	sw (r1+16),r2
	timer0->tcr1 = TIMER_EN;
 5e0:	34 02 00 08 	mvi r2,8
 5e4:	58 22 00 0c 	sw (r1+12),r2
	do {
 		tcr = timer0->tcr1;
 5e8:	28 22 00 0c 	lw r2,(r1+12)
 	} while ( ! ((tcr & TIMER_TRIG)) );
 5ec:	20 42 00 01 	andi r2,r2,0x1
 5f0:	44 40 ff fe 	be r2,r0,5e8 <timeMAB+0x20>
	timer0->tcr1=0;
 5f4:	58 20 00 0c 	sw (r1+12),r0
//	while ((gpio0->read & 0x01));
// 	} while ( ! ((tcr & TIMER_TRIG) | !(gpio0->read & 0x01) ) );
//		if (!(tcr & TIMER_TRIG))
//			error=1;
}
 5f8:	c3 a0 00 00 	ret

000005fc <sleep2us>:

void sleep2us()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 5fc:	78 01 00 00 	mvhi r1,0x0
 600:	38 21 06 f8 	ori r1,r1,0x6f8
 604:	28 21 00 00 	lw r1,(r1+0)
	timer0->compare1 = (FCPU/1000000)*(2);
 608:	34 02 00 c8 	mvi r2,200
}

void sleep2us()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 60c:	58 20 00 14 	sw (r1+20),r0
	timer0->compare1 = (FCPU/1000000)*(2);
 610:	58 22 00 10 	sw (r1+16),r2
	timer0->tcr1 = TIMER_EN;
 614:	34 02 00 08 	mvi r2,8
 618:	58 22 00 0c 	sw (r1+12),r2
	do {
 		tcr = timer0->tcr1;
 61c:	28 22 00 0c 	lw r2,(r1+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 620:	20 42 00 01 	andi r2,r2,0x1
 624:	44 40 ff fe 	be r2,r0,61c <sleep2us+0x20>
		
}
 628:	c3 a0 00 00 	ret

0000062c <sleep3us>:


void sleep3us()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 62c:	78 01 00 00 	mvhi r1,0x0
 630:	38 21 06 f8 	ori r1,r1,0x6f8
 634:	28 21 00 00 	lw r1,(r1+0)
	timer0->compare1 = (FCPU/1000000)*(3);
 638:	34 02 01 2c 	mvi r2,300


void sleep3us()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 63c:	58 20 00 14 	sw (r1+20),r0
	timer0->compare1 = (FCPU/1000000)*(3);
 640:	58 22 00 10 	sw (r1+16),r2
	timer0->tcr1 = TIMER_EN;
 644:	34 02 00 08 	mvi r2,8
 648:	58 22 00 0c 	sw (r1+12),r2
	do {
 		tcr = timer0->tcr1;
 64c:	28 22 00 0c 	lw r2,(r1+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 650:	20 42 00 01 	andi r2,r2,0x1
 654:	44 40 ff fe 	be r2,r0,64c <sleep3us+0x20>

}
 658:	c3 a0 00 00 	ret

0000065c <leerdatos>:

uint8_t leerdatos()
{
 65c:	37 9c ff f0 	addi sp,sp,-16
 660:	5b 8b 00 10 	sw (sp+16),r11
 664:	5b 8c 00 0c 	sw (sp+12),r12
 668:	5b 8d 00 08 	sw (sp+8),r13
 66c:	5b 9d 00 04 	sw (sp+4),ra
	uint8_t valor_bit=0, i;
	valor_bit=(gpio0->read & 0x01);
 670:	78 0c 00 00 	mvhi r12,0x0
 674:	39 8c 06 fc 	ori r12,r12,0x6fc
 678:	29 81 00 00 	lw r1,(r12+0)
 67c:	28 2d 00 00 	lw r13,(r1+0)
 680:	21 ad 00 01 	andi r13,r13,0x1
//	if (valor_bit)
//		error=1;
	if (!(valor_bit))
 684:	5d a0 00 13 	bne r13,r0,6d0 <leerdatos+0x74>
 688:	34 0b 00 08 	mvi r11,8
	{
		valor_bit=0;
		for(i=0;i<8;i++)
		{
			sleep2us();
 68c:	fb ff ff dc 	calli 5fc <sleep2us>
			valor_bit=valor_bit<<1;
			valor_bit=valor_bit + (gpio0->read & 0x01);
 690:	29 81 00 00 	lw r1,(r12+0)
	{
		valor_bit=0;
		for(i=0;i<8;i++)
		{
			sleep2us();
			valor_bit=valor_bit<<1;
 694:	3d ad 00 01 	sli r13,r13,1
			valor_bit=valor_bit + (gpio0->read & 0x01);
 698:	35 6b ff ff 	addi r11,r11,-1
 69c:	28 21 00 00 	lw r1,(r1+0)
 6a0:	21 6b 00 ff 	andi r11,r11,0xff
 6a4:	20 21 00 01 	andi r1,r1,0x1
 6a8:	b5 a1 68 00 	add r13,r13,r1
 6ac:	21 ad 00 ff 	andi r13,r13,0xff
//	if (valor_bit)
//		error=1;
	if (!(valor_bit))
	{
		valor_bit=0;
		for(i=0;i<8;i++)
 6b0:	5d 60 ff f7 	bne r11,r0,68c <leerdatos+0x30>


	}	

	return valor_bit;
}
 6b4:	b9 a0 08 00 	mv r1,r13
 6b8:	2b 9d 00 04 	lw ra,(sp+4)
 6bc:	2b 8b 00 10 	lw r11,(sp+16)
 6c0:	2b 8c 00 0c 	lw r12,(sp+12)
 6c4:	2b 8d 00 08 	lw r13,(sp+8)
 6c8:	37 9c 00 10 	addi sp,sp,16
 6cc:	c3 a0 00 00 	ret
{
	uint8_t valor_bit=0, i;
	valor_bit=(gpio0->read & 0x01);
//	if (valor_bit)
//		error=1;
	if (!(valor_bit))
 6d0:	34 0d 00 01 	mvi r13,1


	}	

	return valor_bit;
}
 6d4:	b9 a0 08 00 	mv r1,r13
 6d8:	2b 9d 00 04 	lw ra,(sp+4)
 6dc:	2b 8b 00 10 	lw r11,(sp+16)
 6e0:	2b 8c 00 0c 	lw r12,(sp+12)
 6e4:	2b 8d 00 08 	lw r13,(sp+8)
 6e8:	37 9c 00 10 	addi sp,sp,16
 6ec:	c3 a0 00 00 	ret
