
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         00000958  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       0000001c  00000958  00000958  000009ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         0000001c  00000974  00000974  000009c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000014  00000990  00000990  000009e4  2**2
                  ALLOC
  4 .debug_abbrev 000003fc  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a88  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000748  00000000  00000000  00001868  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000150  00000000  00000000  00001fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000001bb  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 000000c3  00000000  00000000  000022bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000060  00000000  00000000  0000237e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000220  00000000  00000000  000023de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  000025fe  2**0
                  CONTENTS, READONLY
 13 .debug_loc    00000373  00000000  00000000  0000260f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000a0  00000000  00000000  00002982  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 8b 	calli 2f8 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 09 90 	ori gp,gp,0x990
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 09 90 	ori r1,r1,0x990
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 09 a4 	ori r3,r3,0x9a4

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
#include "txdmx.h"

//#define DEBUG 

int main()
{
 208:	37 9c ff ec 	addi sp,sp,-20
 20c:	5b 8b 00 14 	sw (sp+20),r11
 210:	5b 8c 00 10 	sw (sp+16),r12
 214:	5b 8d 00 0c 	sw (sp+12),r13
 218:	5b 8e 00 08 	sw (sp+8),r14
 21c:	5b 9d 00 04 	sw (sp+4),ra
	config_dmx();
 220:	f8 00 01 64 	calli 7b0 <config_dmx>
	gpio0->dir = 0xFF;
 224:	78 01 00 00 	mvhi r1,0x0
 228:	38 21 09 7c 	ori r1,r1,0x97c
 22c:	28 21 00 00 	lw r1,(r1+0)
 230:	34 02 00 ff 	mvi r2,255
 234:	78 0e 00 00 	mvhi r14,0x0
 238:	58 22 00 08 	sw (r1+8),r2
	gpio0->write = 0xFF;
 23c:	58 22 00 04 	sw (r1+4),r2

	tic_init0();
 240:	f8 00 00 83 	calli 44c <tic_init0>

	irq_set_mask(0x02);
 244:	34 01 00 02 	mvi r1,2
 248:	78 0d 00 00 	mvhi r13,0x0
 24c:	78 0c 00 00 	mvhi r12,0x0
 250:	78 0b 00 00 	mvhi r11,0x0
 254:	fb ff ff c1 	calli 158 <irq_set_mask>
 258:	39 ce 09 84 	ori r14,r14,0x984
	irq_enable();
 25c:	fb ff ff b9 	calli 140 <irq_enable>
 260:	39 ad 09 90 	ori r13,r13,0x990
 264:	39 8c 09 88 	ori r12,r12,0x988
 268:	39 6b 09 94 	ori r11,r11,0x994

	for(;;)
	{
			dmx_init_send();
 26c:	f8 00 01 b0 	calli 92c <dmx_init_send>
			sleept1();
 270:	f8 00 01 46 	calli 788 <sleept1>
			dmx_channel_send(v_ch1);
 274:	41 c1 00 03 	lbu r1,(r14+3)
 278:	f8 00 01 7a 	calli 860 <dmx_channel_send>
			sleept1();
 27c:	f8 00 01 43 	calli 788 <sleept1>
			dmx_channel_send(v_ch2);
 280:	41 a1 00 03 	lbu r1,(r13+3)
 284:	f8 00 01 77 	calli 860 <dmx_channel_send>
			sleept1();
 288:	f8 00 01 40 	calli 788 <sleept1>
			dmx_channel_send(v_ch3);
 28c:	41 81 00 03 	lbu r1,(r12+3)
 290:	f8 00 01 74 	calli 860 <dmx_channel_send>
			sleept1();
 294:	f8 00 01 3d 	calli 788 <sleept1>
		if (status)	
 298:	29 61 00 00 	lw r1,(r11+0)
 29c:	44 20 ff f4 	be r1,r0,26c <main+0x64>
//			uart_putchar(uart_getchar());
//			v_ch1=v_ch1+10;
//			uart_putchar(v_ch1);
//			status=0;

			leer_datos();
 2a0:	f8 00 00 b9 	calli 584 <leer_datos>
 2a4:	e3 ff ff f2 	bi 26c <main+0x64>

000002a8 <pwm>:
}


void pwm(uint8_t PINRGB, int Valor_C)
{
	if (contador < Valor_C)
 2a8:	78 03 00 00 	mvhi r3,0x0
 2ac:	38 63 09 a0 	ori r3,r3,0x9a0
 2b0:	28 63 00 00 	lw r3,(r3+0)
 	}
}


void pwm(uint8_t PINRGB, int Valor_C)
{
 2b4:	20 21 00 ff 	andi r1,r1,0xff
	if (contador < Valor_C)
 2b8:	4c 62 00 08 	bge r3,r2,2d8 <pwm+0x30>
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 2bc:	78 02 00 00 	mvhi r2,0x0
 2c0:	38 42 09 7c 	ori r2,r2,0x97c
 2c4:	28 42 00 00 	lw r2,(r2+0)
 2c8:	28 43 00 00 	lw r3,(r2+0)
 2cc:	b8 23 08 00 	or r1,r1,r3
 2d0:	58 41 00 04 	sw (r2+4),r1
 2d4:	c3 a0 00 00 	ret
	else
		gpio0->write = gpio0->read & (~npin);
 2d8:	78 02 00 00 	mvhi r2,0x0
 2dc:	38 42 09 7c 	ori r2,r2,0x97c
 2e0:	28 42 00 00 	lw r2,(r2+0)
 2e4:	a4 20 08 00 	not r1,r1
 2e8:	28 43 00 00 	lw r3,(r2+0)
 2ec:	a0 23 08 00 	and r1,r1,r3
 2f0:	58 41 00 04 	sw (r2+4),r1
 2f4:	c3 a0 00 00 	ret

000002f8 <irq_handler>:
/***************************************************************************
 * IRQ handling
 */

void irq_handler(uint32_t pending)
{
 2f8:	37 9c ff fc 	addi sp,sp,-4
 2fc:	5b 9d 00 04 	sw (sp+4),ra

	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
	contador =contador+1;
 300:	78 01 00 00 	mvhi r1,0x0
 304:	38 21 09 a0 	ori r1,r1,0x9a0
 */

void irq_handler(uint32_t pending)
{

	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 308:	78 02 00 00 	mvhi r2,0x0
	contador =contador+1;
 30c:	28 24 00 00 	lw r4,(r1+0)
 */

void irq_handler(uint32_t pending)
{

	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 310:	38 42 09 78 	ori r2,r2,0x978
 314:	28 43 00 00 	lw r3,(r2+0)
	contador =contador+1;
 318:	34 82 00 01 	addi r2,r4,1
 */

void irq_handler(uint32_t pending)
{

	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 31c:	34 04 00 0e 	mvi r4,14
 320:	58 64 00 00 	sw (r3+0),r4
	contador =contador+1;
 324:	58 22 00 00 	sw (r1+0),r2
     if (contador > 255)
 328:	34 03 00 ff 	mvi r3,255
 32c:	4c 62 00 02 	bge r3,r2,334 <irq_handler+0x3c>
		contador =0;
 330:	58 20 00 00 	sw (r1+0),r0
	//uart_putchar(contador);
	if ( uart0->ucr & UART_DR)
 334:	78 01 00 00 	mvhi r1,0x0
 338:	38 21 09 74 	ori r1,r1,0x974
 33c:	28 21 00 00 	lw r1,(r1+0)
 340:	28 21 00 00 	lw r1,(r1+0)
 344:	20 21 00 01 	andi r1,r1,0x1
 348:	44 20 00 08 	be r1,r0,368 <irq_handler+0x70>
	{
         status =1;
 34c:	78 01 00 00 	mvhi r1,0x0
 350:	38 21 09 94 	ori r1,r1,0x994
 354:	34 02 00 01 	mvi r2,1
 358:	58 22 00 00 	sw (r1+0),r2
	pwm(PIN_R, v_ch1);
	pwm(PIN_G, v_ch2);
	pwm(PIN_B, v_ch3);

 	}
}
 35c:	2b 9d 00 04 	lw ra,(sp+4)
 360:	37 9c 00 04 	addi sp,sp,4
 364:	c3 a0 00 00 	ret
         status =1;
	}

	else{

	pwm(PIN_R, v_ch1);
 368:	78 01 00 00 	mvhi r1,0x0
 36c:	38 21 09 84 	ori r1,r1,0x984
 370:	28 22 00 00 	lw r2,(r1+0)
 374:	34 01 00 02 	mvi r1,2
 378:	fb ff ff cc 	calli 2a8 <pwm>
	pwm(PIN_G, v_ch2);
 37c:	78 01 00 00 	mvhi r1,0x0
 380:	38 21 09 90 	ori r1,r1,0x990
 384:	28 22 00 00 	lw r2,(r1+0)
 388:	34 01 00 04 	mvi r1,4
 38c:	fb ff ff c7 	calli 2a8 <pwm>
	pwm(PIN_B, v_ch3);
 390:	78 01 00 00 	mvhi r1,0x0
 394:	38 21 09 88 	ori r1,r1,0x988
 398:	28 22 00 00 	lw r2,(r1+0)
 39c:	34 01 00 08 	mvi r1,8
 3a0:	fb ff ff c2 	calli 2a8 <pwm>

 	}
}
 3a4:	2b 9d 00 04 	lw ra,(sp+4)
 3a8:	37 9c 00 04 	addi sp,sp,4
 3ac:	c3 a0 00 00 	ret

000003b0 <msleep>:
 */
void msleep(uint32_t msec)
{
	uint32_t tcr;

	timer0->compare0 = (FCPU/1000)*msec;
 3b0:	78 04 00 00 	mvhi r4,0x0
 3b4:	38 84 09 58 	ori r4,r4,0x958
 3b8:	28 83 00 00 	lw r3,(r4+0)
 3bc:	78 02 00 00 	mvhi r2,0x0
 3c0:	38 42 09 78 	ori r2,r2,0x978
 3c4:	28 42 00 00 	lw r2,(r2+0)
 3c8:	88 23 08 00 	mul r1,r1,r3
 3cc:	58 41 00 04 	sw (r2+4),r1
	timer0->counter0 = 0;
 3d0:	58 40 00 08 	sw (r2+8),r0
	timer0->tcr0 = TIMER_EN;
 3d4:	34 01 00 08 	mvi r1,8
 3d8:	58 41 00 00 	sw (r2+0),r1

	do {
 		tcr = timer0->tcr0;
 3dc:	28 41 00 00 	lw r1,(r2+0)
 	} while ( ! (tcr & TIMER_TRIG) );
 3e0:	20 21 00 01 	andi r1,r1,0x1
 3e4:	44 20 ff fe 	be r1,r0,3dc <msleep+0x2c>
}
 3e8:	c3 a0 00 00 	ret

000003ec <usleep>:

void usleep(uint32_t usec)
{
	uint32_t tcr;

	timer0->compare0 = (FCPU/1000000)*usec;
 3ec:	78 02 00 00 	mvhi r2,0x0
 3f0:	38 42 09 78 	ori r2,r2,0x978
 3f4:	28 42 00 00 	lw r2,(r2+0)
 3f8:	08 21 00 64 	muli r1,r1,100
 3fc:	58 41 00 04 	sw (r2+4),r1
	timer0->counter0 = 0;
 400:	58 40 00 08 	sw (r2+8),r0
	timer0->tcr0 = TIMER_EN   ;
 404:	34 01 00 08 	mvi r1,8
 408:	58 41 00 00 	sw (r2+0),r1

	do {
 		tcr = timer0->tcr0;
 40c:	28 41 00 00 	lw r1,(r2+0)
 	} while ( ! (tcr & TIMER_TRIG) );
 410:	20 21 00 01 	andi r1,r1,0x1
 414:	44 20 ff fe 	be r1,r0,40c <usleep+0x20>
}
 418:	c3 a0 00 00 	ret

0000041c <nsleep>:

void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	timer0->compare0 = (FCPU/1000000)*nsec;
 41c:	78 02 00 00 	mvhi r2,0x0
 420:	38 42 09 78 	ori r2,r2,0x978
 424:	28 42 00 00 	lw r2,(r2+0)
 428:	08 21 00 64 	muli r1,r1,100
 42c:	58 41 00 04 	sw (r2+4),r1
	timer0->counter0 = 0;
 430:	58 40 00 08 	sw (r2+8),r0
	timer0->tcr0 = TIMER_EN;
 434:	34 01 00 08 	mvi r1,8
 438:	58 41 00 00 	sw (r2+0),r1

	do {
 		tcr = timer0->tcr0;
 43c:	28 41 00 00 	lw r1,(r2+0)
 	} while ( ! (tcr & TIMER_TRIG) );
 440:	20 21 00 01 	andi r1,r1,0x1
 444:	44 20 ff fe 	be r1,r0,43c <nsleep+0x20>
}
 448:	c3 a0 00 00 	ret

0000044c <tic_init0>:



void tic_init0()
{
	timer0->compare0 = (FCPU/1000000)*10;
 44c:	78 01 00 00 	mvhi r1,0x0
 450:	38 21 09 78 	ori r1,r1,0x978
 454:	28 22 00 00 	lw r2,(r1+0)
 458:	34 01 03 e8 	mvi r1,1000
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR| TIMER_IRQEN;
 45c:	34 03 00 0e 	mvi r3,14



void tic_init0()
{
	timer0->compare0 = (FCPU/1000000)*10;
 460:	58 41 00 04 	sw (r2+4),r1
	timer0->counter0 = 0;
 464:	58 40 00 08 	sw (r2+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR| TIMER_IRQEN;
	contador=0;
 468:	78 01 00 00 	mvhi r1,0x0

void tic_init0()
{
	timer0->compare0 = (FCPU/1000000)*10;
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR| TIMER_IRQEN;
 46c:	58 43 00 00 	sw (r2+0),r3
	contador=0;
 470:	38 21 09 a0 	ori r1,r1,0x9a0
 474:	58 20 00 00 	sw (r1+0),r0
}
 478:	c3 a0 00 00 	ret

0000047c <set_pin>:
/**********************************************************
 * GPIO Functions
 */

void set_pin(uint8_t value, uint8_t npin)
{
 47c:	20 21 00 ff 	andi r1,r1,0xff
 480:	20 42 00 ff 	andi r2,r2,0xff
     if (value)
 484:	5c 20 00 09 	bne r1,r0,4a8 <set_pin+0x2c>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 488:	78 01 00 00 	mvhi r1,0x0
 48c:	38 21 09 7c 	ori r1,r1,0x97c
 490:	28 21 00 00 	lw r1,(r1+0)
 494:	a4 40 10 00 	not r2,r2
 498:	28 23 00 00 	lw r3,(r1+0)
 49c:	a0 43 10 00 	and r2,r2,r3
 4a0:	58 22 00 04 	sw (r1+4),r2
 4a4:	c3 a0 00 00 	ret
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 4a8:	78 01 00 00 	mvhi r1,0x0
 4ac:	38 21 09 7c 	ori r1,r1,0x97c
 4b0:	28 21 00 00 	lw r1,(r1+0)
 4b4:	28 23 00 00 	lw r3,(r1+0)
 4b8:	b8 43 10 00 	or r2,r2,r3
 4bc:	58 22 00 04 	sw (r1+4),r2
 4c0:	c3 a0 00 00 	ret

000004c4 <pin_inv>:
}

void pin_inv(uint8_t npin)
{
	uint32_t val;
	val = (~gpio0->read) & npin;
 4c4:	78 02 00 00 	mvhi r2,0x0
 4c8:	38 42 09 7c 	ori r2,r2,0x97c
 4cc:	28 42 00 00 	lw r2,(r2+0)
		gpio0->write = gpio0->read & (~npin);

}

void pin_inv(uint8_t npin)
{
 4d0:	20 21 00 ff 	andi r1,r1,0xff
	uint32_t val;
	val = (~gpio0->read) & npin;
 4d4:	28 43 00 00 	lw r3,(r2+0)
 4d8:	a4 60 18 00 	not r3,r3
 * GPIO Functions
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
 4dc:	a0 23 18 00 	and r3,r1,r3
 4e0:	5c 60 00 06 	bne r3,r0,4f8 <pin_inv+0x34>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 4e4:	28 43 00 00 	lw r3,(r2+0)
 4e8:	a4 20 08 00 	not r1,r1
 4ec:	a0 23 08 00 	and r1,r1,r3
 4f0:	58 41 00 04 	sw (r2+4),r1
 4f4:	c3 a0 00 00 	ret
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 4f8:	28 43 00 00 	lw r3,(r2+0)
 4fc:	b8 23 08 00 	or r1,r1,r3
 500:	58 41 00 04 	sw (r2+4),r1
 504:	c3 a0 00 00 	ret

00000508 <uart_getchar>:
/***************************************************************************
 * UART Functions
 */

char uart_getchar()
{   
 508:	78 01 00 00 	mvhi r1,0x0
 50c:	38 21 09 74 	ori r1,r1,0x974
 510:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 514:	28 41 00 00 	lw r1,(r2+0)
 518:	20 21 00 01 	andi r1,r1,0x1
 51c:	44 20 ff fe 	be r1,r0,514 <uart_getchar+0xc>
	return uart0->rxtx;
 520:	28 41 00 04 	lw r1,(r2+4)
}
 524:	20 21 00 ff 	andi r1,r1,0xff
 528:	c3 a0 00 00 	ret

0000052c <uart_putchar>:

void uart_putchar(char c)
{
 52c:	78 02 00 00 	mvhi r2,0x0
 530:	38 42 09 74 	ori r2,r2,0x974
 534:	28 43 00 00 	lw r3,(r2+0)
 538:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 53c:	28 62 00 00 	lw r2,(r3+0)
 540:	20 42 00 10 	andi r2,r2,0x10
 544:	5c 40 ff fe 	bne r2,r0,53c <uart_putchar+0x10>
	uart0->rxtx = c;
 548:	58 61 00 04 	sw (r3+4),r1
}
 54c:	c3 a0 00 00 	ret

00000550 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 550:	40 24 00 00 	lbu r4,(r1+0)
 554:	44 80 00 0b 	be r4,r0,580 <uart_putstr+0x30>
 558:	78 02 00 00 	mvhi r2,0x0
 55c:	38 42 09 74 	ori r2,r2,0x974
 560:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 564:	28 62 00 00 	lw r2,(r3+0)
 568:	20 42 00 10 	andi r2,r2,0x10
 56c:	5c 40 ff fe 	bne r2,r0,564 <uart_putstr+0x14>
	uart0->rxtx = c;
 570:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 574:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 578:	40 24 00 00 	lbu r4,(r1+0)
 57c:	5c 82 ff fa 	bne r4,r2,564 <uart_putstr+0x14>
 580:	c3 a0 00 00 	ret

00000584 <leer_datos>:
    		set_pin(0,PINRGB);     
}


void leer_datos()
{
 584:	37 9c ff ec 	addi sp,sp,-20
 588:	5b 8b 00 14 	sw (sp+20),r11
 58c:	5b 8c 00 10 	sw (sp+16),r12
 590:	5b 8d 00 0c 	sw (sp+12),r13
 594:	5b 8e 00 08 	sw (sp+8),r14
 598:	5b 9d 00 04 	sw (sp+4),ra
 59c:	78 0b 00 00 	mvhi r11,0x0
 5a0:	39 6b 09 74 	ori r11,r11,0x974
 5a4:	29 62 00 00 	lw r2,(r11+0)
 * UART Functions
 */

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 5a8:	28 41 00 00 	lw r1,(r2+0)
 5ac:	20 21 00 01 	andi r1,r1,0x1
 5b0:	44 20 ff fe 	be r1,r0,5a8 <leer_datos+0x24>
	return uart0->rxtx;
 5b4:	28 41 00 04 	lw r1,(r2+4)
}


void leer_datos()
{
	tmp_var=uart_getchar();
 5b8:	78 0c 00 00 	mvhi r12,0x0
 5bc:	39 8c 09 98 	ori r12,r12,0x998
 */

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
	return uart0->rxtx;
 5c0:	20 21 00 ff 	andi r1,r1,0xff
}


void leer_datos()
{
	tmp_var=uart_getchar();
 5c4:	31 81 00 00 	sb (r12+0),r1
	if(tmp_var=='<')
 5c8:	34 02 00 3c 	mvi r2,60
 5cc:	44 22 00 0d 	be r1,r2,600 <leer_datos+0x7c>
				uart_putchar(v_ch2);
				uart_putchar(v_ch3);	
	
			}
		}
	else if (tmp_var=='>')
 5d0:	34 02 00 3e 	mvi r2,62
 5d4:	5c 22 00 04 	bne r1,r2,5e4 <leer_datos+0x60>
	{
	status=0;
 5d8:	78 01 00 00 	mvhi r1,0x0
 5dc:	38 21 09 94 	ori r1,r1,0x994
 5e0:	58 20 00 00 	sw (r1+0),r0
	}
//	status=0;
}
 5e4:	2b 9d 00 04 	lw ra,(sp+4)
 5e8:	2b 8b 00 14 	lw r11,(sp+20)
 5ec:	2b 8c 00 10 	lw r12,(sp+16)
 5f0:	2b 8d 00 0c 	lw r13,(sp+12)
 5f4:	2b 8e 00 08 	lw r14,(sp+8)
 5f8:	37 9c 00 14 	addi sp,sp,20
 5fc:	c3 a0 00 00 	ret
void leer_datos()
{
	tmp_var=uart_getchar();
	if(tmp_var=='<')
		{
			uart_putstr("\nok <\n");
 600:	78 01 00 00 	mvhi r1,0x0
 604:	38 21 09 5c 	ori r1,r1,0x95c
 608:	fb ff ff d2 	calli 550 <uart_putstr>
 60c:	29 61 00 00 	lw r1,(r11+0)
 * UART Functions
 */

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 610:	28 22 00 00 	lw r2,(r1+0)
 614:	20 42 00 01 	andi r2,r2,0x1
 618:	44 40 ff fe 	be r2,r0,610 <leer_datos+0x8c>
	return uart0->rxtx;
 61c:	28 23 00 04 	lw r3,(r1+4)
{
	tmp_var=uart_getchar();
	if(tmp_var=='<')
		{
			uart_putstr("\nok <\n");
			tmp_num=uart_getchar();
 620:	78 02 00 00 	mvhi r2,0x0
 624:	38 42 09 99 	ori r2,r2,0x999
 */

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
	return uart0->rxtx;
 628:	20 63 00 ff 	andi r3,r3,0xff
{
	tmp_var=uart_getchar();
	if(tmp_var=='<')
		{
			uart_putstr("\nok <\n");
			tmp_num=uart_getchar();
 62c:	30 43 00 00 	sb (r2+0),r3
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 630:	28 22 00 00 	lw r2,(r1+0)
 634:	20 42 00 10 	andi r2,r2,0x10
 638:	5c 40 ff fe 	bne r2,r0,630 <leer_datos+0xac>
	uart0->rxtx = c;
 63c:	58 23 00 04 	sw (r1+4),r3
 * UART Functions
 */

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 640:	28 22 00 00 	lw r2,(r1+0)
 644:	20 42 00 01 	andi r2,r2,0x1
 648:	44 40 ff fe 	be r2,r0,640 <leer_datos+0xbc>
	return uart0->rxtx;
 64c:	28 24 00 04 	lw r4,(r1+4)
 650:	20 84 00 ff 	andi r4,r4,0xff
	if(tmp_var=='<')
		{
			uart_putstr("\nok <\n");
			tmp_num=uart_getchar();
				uart_putchar(tmp_num);
			tmp_var=uart_getchar();
 654:	31 84 00 00 	sb (r12+0),r4
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 658:	28 22 00 00 	lw r2,(r1+0)
 65c:	20 42 00 10 	andi r2,r2,0x10
 660:	5c 40 ff fe 	bne r2,r0,658 <leer_datos+0xd4>
	uart0->rxtx = c;
 664:	58 24 00 04 	sw (r1+4),r4
			uart_putstr("\nok <\n");
			tmp_num=uart_getchar();
				uart_putchar(tmp_num);
			tmp_var=uart_getchar();
				uart_putchar(tmp_var);
			if (tmp_var == 'c')
 668:	34 01 00 63 	mvi r1,99
 66c:	44 81 00 29 	be r4,r1,710 <leer_datos+0x18c>
			{
			if (tmp_num <= 3)
					channel = tmp_num;				
			}
			else if (tmp_var == 'w') 
 670:	34 01 00 77 	mvi r1,119
 674:	5c 81 ff dc 	bne r4,r1,5e4 <leer_datos+0x60>
			{
				w_c = tmp_num;
	   			if (channel==1)
 678:	78 02 00 00 	mvhi r2,0x0
 67c:	38 42 09 8c 	ori r2,r2,0x98c
			if (tmp_num <= 3)
					channel = tmp_num;				
			}
			else if (tmp_var == 'w') 
			{
				w_c = tmp_num;
 680:	78 01 00 00 	mvhi r1,0x0
	   			if (channel==1)
 684:	40 42 00 00 	lbu r2,(r2+0)
			if (tmp_num <= 3)
					channel = tmp_num;				
			}
			else if (tmp_var == 'w') 
			{
				w_c = tmp_num;
 688:	38 21 09 9c 	ori r1,r1,0x99c
 68c:	58 23 00 00 	sw (r1+0),r3
	   			if (channel==1)
 690:	34 01 00 01 	mvi r1,1
 694:	44 41 00 25 	be r2,r1,728 <leer_datos+0x1a4>
					v_ch1 = w_c;
				else if (channel==2) 
 698:	34 01 00 02 	mvi r1,2
 69c:	44 41 00 2b 	be r2,r1,748 <leer_datos+0x1c4>
					v_ch2 = w_c;
				else if (channel==3) 
 6a0:	34 01 00 03 	mvi r1,3
 6a4:	44 41 00 31 	be r2,r1,768 <leer_datos+0x1e4>
 6a8:	78 0e 00 00 	mvhi r14,0x0
 6ac:	78 0d 00 00 	mvhi r13,0x0
 6b0:	78 0c 00 00 	mvhi r12,0x0
 6b4:	39 ce 09 84 	ori r14,r14,0x984
 6b8:	39 ad 09 90 	ori r13,r13,0x990
 6bc:	39 8c 09 88 	ori r12,r12,0x988
					v_ch3 = w_c;

				uart_putstr("\n asignacion \n");
 6c0:	78 01 00 00 	mvhi r1,0x0
 6c4:	38 21 09 64 	ori r1,r1,0x964
 6c8:	fb ff ff a2 	calli 550 <uart_putstr>
				uart_putchar(v_ch1);
 6cc:	41 c3 00 03 	lbu r3,(r14+3)
 6d0:	29 61 00 00 	lw r1,(r11+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 6d4:	28 22 00 00 	lw r2,(r1+0)
 6d8:	20 42 00 10 	andi r2,r2,0x10
 6dc:	5c 40 ff fe 	bne r2,r0,6d4 <leer_datos+0x150>
				else if (channel==3) 
					v_ch3 = w_c;

				uart_putstr("\n asignacion \n");
				uart_putchar(v_ch1);
				uart_putchar(v_ch2);
 6e0:	41 a4 00 03 	lbu r4,(r13+3)
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
	uart0->rxtx = c;
 6e4:	58 23 00 04 	sw (r1+4),r3
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 6e8:	28 22 00 00 	lw r2,(r1+0)
 6ec:	20 42 00 10 	andi r2,r2,0x10
 6f0:	5c 40 ff fe 	bne r2,r0,6e8 <leer_datos+0x164>
					v_ch3 = w_c;

				uart_putstr("\n asignacion \n");
				uart_putchar(v_ch1);
				uart_putchar(v_ch2);
				uart_putchar(v_ch3);	
 6f4:	41 83 00 03 	lbu r3,(r12+3)
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
	uart0->rxtx = c;
 6f8:	58 24 00 04 	sw (r1+4),r4
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 6fc:	28 22 00 00 	lw r2,(r1+0)
 700:	20 42 00 10 	andi r2,r2,0x10
 704:	5c 40 ff fe 	bne r2,r0,6fc <leer_datos+0x178>
	uart0->rxtx = c;
 708:	58 23 00 04 	sw (r1+4),r3
 70c:	e3 ff ff b6 	bi 5e4 <leer_datos+0x60>
				uart_putchar(tmp_num);
			tmp_var=uart_getchar();
				uart_putchar(tmp_var);
			if (tmp_var == 'c')
			{
			if (tmp_num <= 3)
 710:	34 01 00 03 	mvi r1,3
 714:	54 61 ff b4 	bgu r3,r1,5e4 <leer_datos+0x60>
					channel = tmp_num;				
 718:	78 01 00 00 	mvhi r1,0x0
 71c:	38 21 09 8c 	ori r1,r1,0x98c
 720:	30 23 00 00 	sb (r1+0),r3
 724:	e3 ff ff b0 	bi 5e4 <leer_datos+0x60>
			}
			else if (tmp_var == 'w') 
			{
				w_c = tmp_num;
	   			if (channel==1)
					v_ch1 = w_c;
 728:	78 0e 00 00 	mvhi r14,0x0
 72c:	39 ce 09 84 	ori r14,r14,0x984
 730:	78 0d 00 00 	mvhi r13,0x0
 734:	78 0c 00 00 	mvhi r12,0x0
 738:	59 c3 00 00 	sw (r14+0),r3
 73c:	39 ad 09 90 	ori r13,r13,0x990
 740:	39 8c 09 88 	ori r12,r12,0x988
 744:	e3 ff ff df 	bi 6c0 <leer_datos+0x13c>
				else if (channel==2) 
					v_ch2 = w_c;
 748:	78 0d 00 00 	mvhi r13,0x0
 74c:	39 ad 09 90 	ori r13,r13,0x990
 750:	78 0e 00 00 	mvhi r14,0x0
 754:	78 0c 00 00 	mvhi r12,0x0
 758:	59 a3 00 00 	sw (r13+0),r3
 75c:	39 ce 09 84 	ori r14,r14,0x984
 760:	39 8c 09 88 	ori r12,r12,0x988
 764:	e3 ff ff d7 	bi 6c0 <leer_datos+0x13c>
				else if (channel==3) 
					v_ch3 = w_c;
 768:	78 0c 00 00 	mvhi r12,0x0
 76c:	39 8c 09 88 	ori r12,r12,0x988
 770:	78 0e 00 00 	mvhi r14,0x0
 774:	78 0d 00 00 	mvhi r13,0x0
 778:	59 83 00 00 	sw (r12+0),r3
 77c:	39 ce 09 84 	ori r14,r14,0x984
 780:	39 ad 09 90 	ori r13,r13,0x990
 784:	e3 ff ff cf 	bi 6c0 <leer_datos+0x13c>

00000788 <sleept1>:


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 788:	78 01 00 00 	mvhi r1,0x0
 78c:	38 21 09 78 	ori r1,r1,0x978
 790:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr1 = TIMER_EN;
 794:	34 01 00 08 	mvi r1,8


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 798:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 79c:	58 41 00 0c 	sw (r2+12),r1
	do {
 		tcr = timer0->tcr1;
 7a0:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 7a4:	20 21 00 01 	andi r1,r1,0x1
 7a8:	44 20 ff fe 	be r1,r0,7a0 <sleept1+0x18>
}
 7ac:	c3 a0 00 00 	ret

000007b0 <config_dmx>:


void config_dmx()
{
//configurar pin DMX_PIN como pin de salida 
	gpio0->dir |= DMX_PIN;
 7b0:	78 01 00 00 	mvhi r1,0x0
 7b4:	38 21 09 7c 	ori r1,r1,0x97c
 7b8:	28 21 00 00 	lw r1,(r1+0)
    //   gpio0->dir = gpio0->dir  | DMX_PIN;
    // config Use timer 1
	timer0->compare1 = (FCPU/1000000)*(TBIT)-80; // for usecond
 7bc:	78 02 00 00 	mvhi r2,0x0
 7c0:	38 42 09 78 	ori r2,r2,0x978


void config_dmx()
{
//configurar pin DMX_PIN como pin de salida 
	gpio0->dir |= DMX_PIN;
 7c4:	28 23 00 08 	lw r3,(r1+8)
    //   gpio0->dir = gpio0->dir  | DMX_PIN;
    // config Use timer 1
	timer0->compare1 = (FCPU/1000000)*(TBIT)-80; // for usecond
 7c8:	28 42 00 00 	lw r2,(r2+0)


void config_dmx()
{
//configurar pin DMX_PIN como pin de salida 
	gpio0->dir |= DMX_PIN;
 7cc:	38 63 00 01 	ori r3,r3,0x1
 7d0:	58 23 00 08 	sw (r1+8),r3
    //   gpio0->dir = gpio0->dir  | DMX_PIN;
    // config Use timer 1
	timer0->compare1 = (FCPU/1000000)*(TBIT)-80; // for usecond
 7d4:	34 03 01 40 	mvi r3,320
 7d8:	58 43 00 10 	sw (r2+16),r3
	gpio0->write = gpio0->read | DMX_PIN;
 7dc:	28 22 00 00 	lw r2,(r1+0)
 7e0:	38 42 00 01 	ori r2,r2,0x1
 7e4:	58 22 00 04 	sw (r1+4),r2
 
}
 7e8:	c3 a0 00 00 	ret

000007ec <pin_inv_old>:


void pin_inv_old(uint32_t num)
{
 7ec:	37 9c ff f8 	addi sp,sp,-8
 7f0:	5b 8b 00 08 	sw (sp+8),r11
 7f4:	5b 9d 00 04 	sw (sp+4),ra
	uint32_t i;
	uint32_t pin_act;
	pin_act = (~gpio0->read) & DMX_PIN;
 7f8:	78 02 00 00 	mvhi r2,0x0
 7fc:	38 42 09 7c 	ori r2,r2,0x97c
 800:	28 43 00 00 	lw r3,(r2+0)
 
}


void pin_inv_old(uint32_t num)
{
 804:	b8 20 58 00 	mv r11,r1
	uint32_t i;
	uint32_t pin_act;
	pin_act = (~gpio0->read) & DMX_PIN;
     set_pin(pin_act, DMX_PIN);
 808:	34 02 00 01 	mvi r2,1

void pin_inv_old(uint32_t num)
{
	uint32_t i;
	uint32_t pin_act;
	pin_act = (~gpio0->read) & DMX_PIN;
 80c:	28 61 00 00 	lw r1,(r3+0)
 810:	20 21 00 01 	andi r1,r1,0x1
     set_pin(pin_act, DMX_PIN);
 814:	18 21 00 01 	xori r1,r1,0x1
 818:	fb ff ff 19 	calli 47c <set_pin>
	for(i=0;i<num;i++)
 81c:	45 60 00 0d 	be r11,r0,850 <pin_inv_old+0x64>
 820:	78 01 00 00 	mvhi r1,0x0
 824:	38 21 09 78 	ori r1,r1,0x978
 828:	28 23 00 00 	lw r3,(r1+0)
 82c:	34 04 00 00 	mvi r4,0

void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN;
 830:	34 01 00 08 	mvi r1,8


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 834:	58 60 00 14 	sw (r3+20),r0
	timer0->tcr1 = TIMER_EN;
 838:	58 61 00 0c 	sw (r3+12),r1
	do {
 		tcr = timer0->tcr1;
 83c:	28 62 00 0c 	lw r2,(r3+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 840:	20 42 00 01 	andi r2,r2,0x1
 844:	44 40 ff fe 	be r2,r0,83c <pin_inv_old+0x50>
{
	uint32_t i;
	uint32_t pin_act;
	pin_act = (~gpio0->read) & DMX_PIN;
     set_pin(pin_act, DMX_PIN);
	for(i=0;i<num;i++)
 848:	34 84 00 01 	addi r4,r4,1
 84c:	55 64 ff fa 	bgu r11,r4,834 <pin_inv_old+0x48>
		sleept1();
}
 850:	2b 9d 00 04 	lw ra,(sp+4)
 854:	2b 8b 00 08 	lw r11,(sp+8)
 858:	37 9c 00 08 	addi sp,sp,8
 85c:	c3 a0 00 00 	ret

00000860 <dmx_channel_send>:
 }



void dmx_channel_send(uint8_t value)
{
 860:	37 9c ff ec 	addi sp,sp,-20
 864:	5b 8b 00 14 	sw (sp+20),r11
 868:	5b 8c 00 10 	sw (sp+16),r12
 86c:	5b 8d 00 0c 	sw (sp+12),r13
 870:	5b 8e 00 08 	sw (sp+8),r14
 874:	5b 9d 00 04 	sw (sp+4),ra
 878:	78 0d 00 00 	mvhi r13,0x0
 87c:	20 2c 00 ff 	andi r12,r1,0xff
	uint8_t bit, i;
       pin_inv_old(1); // bita start
 880:	34 01 00 01 	mvi r1,1
 884:	fb ff ff da 	calli 7ec <pin_inv_old>
 888:	34 0b 00 08 	mvi r11,8
 88c:	39 ad 09 78 	ori r13,r13,0x978

void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN;
 890:	34 0e 00 08 	mvi r14,8
       pin_inv_old(1); // bita start
 	//nsleep(4000);
	for(i=0;i<8;i++)
	{
		bit=value & 0x01;
 		set_pin(bit, DMX_PIN);	
 894:	21 81 00 01 	andi r1,r12,0x1
 898:	34 02 00 01 	mvi r2,1
 89c:	fb ff fe f8 	calli 47c <set_pin>


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 8a0:	29 a2 00 00 	lw r2,(r13+0)
 	//nsleep(4000);
	for(i=0;i<8;i++)
	{
		bit=value & 0x01;
 		set_pin(bit, DMX_PIN);	
		value=value>>1;
 8a4:	01 8c 00 01 	srui r12,r12,1


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 8a8:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 8ac:	58 4e 00 0c 	sw (r2+12),r14
	do {
 		tcr = timer0->tcr1;
 8b0:	28 43 00 0c 	lw r3,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 8b4:	20 63 00 01 	andi r3,r3,0x1
 8b8:	44 60 ff fe 	be r3,r0,8b0 <dmx_channel_send+0x50>
 8bc:	35 6b ff ff 	addi r11,r11,-1
 8c0:	21 6b 00 ff 	andi r11,r11,0xff
void dmx_channel_send(uint8_t value)
{
	uint8_t bit, i;
       pin_inv_old(1); // bita start
 	//nsleep(4000);
	for(i=0;i<8;i++)
 8c4:	5d 60 ff f4 	bne r11,r0,894 <dmx_channel_send+0x34>
		bit=value & 0x01;
 		set_pin(bit, DMX_PIN);	
		value=value>>1;
		sleept1();
        }
	gpio0->write = gpio0->read | DMX_PIN;
 8c8:	78 01 00 00 	mvhi r1,0x0
 8cc:	38 21 09 7c 	ori r1,r1,0x97c
 8d0:	28 21 00 00 	lw r1,(r1+0)
 8d4:	28 23 00 00 	lw r3,(r1+0)
 8d8:	38 63 00 01 	ori r3,r3,0x1
 8dc:	58 23 00 04 	sw (r1+4),r3


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 8e0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 8e4:	34 01 00 08 	mvi r1,8
 8e8:	58 41 00 0c 	sw (r2+12),r1
	do {
 		tcr = timer0->tcr1;
 8ec:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 8f0:	20 21 00 01 	andi r1,r1,0x1
 8f4:	44 20 ff fe 	be r1,r0,8ec <dmx_channel_send+0x8c>


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 8f8:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 8fc:	34 01 00 08 	mvi r1,8
 900:	58 41 00 0c 	sw (r2+12),r1
	do {
 		tcr = timer0->tcr1;
 904:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 908:	20 21 00 01 	andi r1,r1,0x1
 90c:	44 20 ff fe 	be r1,r0,904 <dmx_channel_send+0xa4>
		sleept1();
        }
	gpio0->write = gpio0->read | DMX_PIN;
	sleept1();
	sleept1();
}
 910:	2b 9d 00 04 	lw ra,(sp+4)
 914:	2b 8b 00 14 	lw r11,(sp+20)
 918:	2b 8c 00 10 	lw r12,(sp+16)
 91c:	2b 8d 00 0c 	lw r13,(sp+12)
 920:	2b 8e 00 08 	lw r14,(sp+8)
 924:	37 9c 00 14 	addi sp,sp,20
 928:	c3 a0 00 00 	ret

0000092c <dmx_init_send>:
}



void dmx_init_send()
{
 92c:	37 9c ff fc 	addi sp,sp,-4
 930:	5b 9d 00 04 	sw (sp+4),ra
	pin_inv_old(22);
 934:	34 01 00 16 	mvi r1,22
 938:	fb ff ff ad 	calli 7ec <pin_inv_old>
	pin_inv_old(2);
 93c:	34 01 00 02 	mvi r1,2
 940:	fb ff ff ab 	calli 7ec <pin_inv_old>
	dmx_channel_send(0);    	
 944:	34 01 00 00 	mvi r1,0
 948:	fb ff ff c6 	calli 860 <dmx_channel_send>
 }
 94c:	2b 9d 00 04 	lw ra,(sp+4)
 950:	37 9c 00 04 	addi sp,sp,4
 954:	c3 a0 00 00 	ret
