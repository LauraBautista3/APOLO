
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         000007c4  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000010  000007c4  000007c4  00000818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  000007d4  000007d4  00000828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000008  000007ec  000007ec  00000840  2**2
                  ALLOC
  4 .debug_abbrev 0000040e  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000099a  00000000  00000000  00000c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000060a  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000150  00000000  00000000  00001bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000184  00000000  00000000  00001d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 000000c3  00000000  00000000  00001ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000060  00000000  00000000  00001f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000219  00000000  00000000  00001feb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY
 13 .debug_loc    00000314  00000000  00000000  00002215  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000040  00000000  00000000  00002529  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 a9 	calli 370 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 07 f0 	ori gp,gp,0x7f0
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 07 ec 	ori r1,r1,0x7ec
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 07 f4 	ori r3,r3,0x7f4

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
#include "txdmx.h"

 #define DEBUG 

void main()
{
 208:	37 9c ff f0 	addi sp,sp,-16
 20c:	5b 8b 00 10 	sw (sp+16),r11
 210:	5b 8c 00 0c 	sw (sp+12),r12
 214:	5b 8d 00 08 	sw (sp+8),r13
 218:	5b 9d 00 04 	sw (sp+4),ra
	#ifdef DEBUG
		uart_putstr("modo debug\n");	
 21c:	78 01 00 00 	mvhi r1,0x0
 220:	38 21 07 c4 	ori r1,r1,0x7c4
 224:	f8 00 00 e7 	calli 5c0 <uart_putstr>
     	#endif
	config_dmx();
 228:	f8 00 00 fd 	calli 61c <config_dmx>
//	uint8_t tmp_num=0;
//	uint8_t channel=0;
//	int w_c=0;


	gpio0->dir = 0xFF;
 22c:	78 01 00 00 	mvhi r1,0x0
 230:	38 21 07 dc 	ori r1,r1,0x7dc
 234:	28 21 00 00 	lw r1,(r1+0)
 238:	34 02 00 ff 	mvi r2,255
 23c:	78 0d 00 00 	mvhi r13,0x0
 240:	58 22 00 08 	sw (r1+8),r2
	gpio0->write = 0xFF;
 244:	58 22 00 04 	sw (r1+4),r2

	tic_init0();
 248:	f8 00 00 9d 	calli 4bc <tic_init0>

	irq_set_mask(0x02);
 24c:	34 01 00 02 	mvi r1,2
 250:	78 0c 00 00 	mvhi r12,0x0
 254:	78 0b 00 00 	mvhi r11,0x0
 258:	fb ff ff c0 	calli 158 <irq_set_mask>
 25c:	39 ad 07 ec 	ori r13,r13,0x7ec
	irq_enable();
 260:	fb ff ff b8 	calli 140 <irq_enable>
 264:	39 8c 07 e4 	ori r12,r12,0x7e4
 268:	39 6b 07 e8 	ori r11,r11,0x7e8
//				uart_putstr("\nok >\n");
//		     #endif


*/
			dmx_init_send();  //      llamar funcion codificador 	dmx         
 26c:	f8 00 01 4b 	calli 798 <dmx_init_send>
			sleept1();
 270:	f8 00 00 e1 	calli 5f4 <sleept1>
			dmx_channel_send(v_ch1);
 274:	41 a1 00 03 	lbu r1,(r13+3)
 278:	f8 00 01 15 	calli 6cc <dmx_channel_send>
			sleept1();
 27c:	f8 00 00 de 	calli 5f4 <sleept1>
			dmx_channel_send(v_ch2);
 280:	41 81 00 03 	lbu r1,(r12+3)
 284:	f8 00 01 12 	calli 6cc <dmx_channel_send>
			sleept1();
 288:	f8 00 00 db 	calli 5f4 <sleept1>
			dmx_channel_send(v_ch3);
 28c:	41 61 00 03 	lbu r1,(r11+3)
 290:	f8 00 01 0f 	calli 6cc <dmx_channel_send>
			sleept1();
 294:	f8 00 00 d8 	calli 5f4 <sleept1>
 298:	e3 ff ff f5 	bi 26c <main+0x64>

0000029c <pwm>:

void pwm(uint8_t PINRGB, uint8_t Valor_C)
{
	

	if (contador < Valor_C)
 29c:	78 03 00 00 	mvhi r3,0x0
 2a0:	38 63 07 f0 	ori r3,r3,0x7f0
 2a4:	28 63 00 00 	lw r3,(r3+0)
     
}
*/

void pwm(uint8_t PINRGB, uint8_t Valor_C)
{
 2a8:	20 42 00 ff 	andi r2,r2,0xff
 2ac:	20 21 00 ff 	andi r1,r1,0xff
	

	if (contador < Valor_C)
 2b0:	4c 62 00 08 	bge r3,r2,2d0 <pwm+0x34>
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 2b4:	78 02 00 00 	mvhi r2,0x0
 2b8:	38 42 07 dc 	ori r2,r2,0x7dc
 2bc:	28 42 00 00 	lw r2,(r2+0)
 2c0:	28 43 00 00 	lw r3,(r2+0)
 2c4:	b8 23 08 00 	or r1,r1,r3
 2c8:	58 41 00 04 	sw (r2+4),r1
 2cc:	c3 a0 00 00 	ret
	else
		gpio0->write = gpio0->read & (~npin);
 2d0:	78 02 00 00 	mvhi r2,0x0
 2d4:	38 42 07 dc 	ori r2,r2,0x7dc
 2d8:	28 42 00 00 	lw r2,(r2+0)
 2dc:	a4 20 08 00 	not r1,r1
 2e0:	28 43 00 00 	lw r3,(r2+0)
 2e4:	a0 23 08 00 	and r1,r1,r3
 2e8:	58 41 00 04 	sw (r2+4),r1
 2ec:	c3 a0 00 00 	ret

000002f0 <leer_datos>:
	
}


void leer_datos()
{
 2f0:	37 9c ff f8 	addi sp,sp,-8
 2f4:	5b 8b 00 08 	sw (sp+8),r11
 2f8:	5b 9d 00 04 	sw (sp+4),ra
 2fc:	78 0b 00 00 	mvhi r11,0x0
 300:	39 6b 07 d4 	ori r11,r11,0x7d4
 304:	29 62 00 00 	lw r2,(r11+0)



char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 308:	28 41 00 00 	lw r1,(r2+0)
 30c:	20 21 00 01 	andi r1,r1,0x1
 310:	44 20 ff fe 	be r1,r0,308 <leer_datos+0x18>
	return uart0->rxtx;
 314:	28 42 00 04 	lw r2,(r2+4)
	uint8_t channel=0;
	int w_c=0;
	

	tmp_var=uart_getchar();
		if(tmp_var=='<')
 318:	34 01 00 3c 	mvi r1,60
 31c:	20 42 00 ff 	andi r2,r2,0xff
 320:	44 41 00 06 	be r2,r1,338 <leer_datos+0x48>
					v_ch3 = w_c;
			}
		}
		else
		{
		irq_enable();
 324:	fb ff ff 87 	calli 140 <irq_enable>
		}




}
 328:	2b 9d 00 04 	lw ra,(sp+4)
 32c:	2b 8b 00 08 	lw r11,(sp+8)
 330:	37 9c 00 08 	addi sp,sp,8
 334:	c3 a0 00 00 	ret
	

	tmp_var=uart_getchar();
		if(tmp_var=='<')
		{
			irq_disable();	         
 338:	fb ff ff 85 	calli 14c <irq_disable>
 33c:	29 61 00 00 	lw r1,(r11+0)



char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 340:	28 22 00 00 	lw r2,(r1+0)
 344:	20 42 00 01 	andi r2,r2,0x1
 348:	44 40 ff fe 	be r2,r0,340 <leer_datos+0x50>
	return uart0->rxtx;
 34c:	28 22 00 04 	lw r2,(r1+4)



char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 350:	28 22 00 00 	lw r2,(r1+0)
 354:	20 42 00 01 	andi r2,r2,0x1
 358:	44 40 ff fe 	be r2,r0,350 <leer_datos+0x60>
	return uart0->rxtx;
 35c:	28 21 00 04 	lw r1,(r1+4)
		}




}
 360:	2b 9d 00 04 	lw ra,(sp+4)
 364:	2b 8b 00 08 	lw r11,(sp+8)
 368:	37 9c 00 08 	addi sp,sp,8
 36c:	c3 a0 00 00 	ret

00000370 <irq_handler>:
/***************************************************************************
 * IRQ handling
 */

void irq_handler(uint32_t pending)
{
 370:	37 9c ff f8 	addi sp,sp,-8
 374:	5b 8b 00 08 	sw (sp+8),r11
 378:	5b 9d 00 04 	sw (sp+4),ra

	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
	contador =contador+1;
 37c:	78 01 00 00 	mvhi r1,0x0
 380:	38 21 07 f0 	ori r1,r1,0x7f0
 */

void irq_handler(uint32_t pending)
{

	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 384:	78 02 00 00 	mvhi r2,0x0
	contador =contador+1;
 388:	28 24 00 00 	lw r4,(r1+0)
 */

void irq_handler(uint32_t pending)
{

	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 38c:	38 42 07 d8 	ori r2,r2,0x7d8
 390:	28 43 00 00 	lw r3,(r2+0)
	contador =contador+1;
 394:	34 82 00 01 	addi r2,r4,1
 */

void irq_handler(uint32_t pending)
{

	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 398:	34 04 00 0e 	mvi r4,14
 39c:	58 64 00 00 	sw (r3+0),r4
	contador =contador+1;
 3a0:	58 22 00 00 	sw (r1+0),r2
     if (contador >255)
 3a4:	34 03 00 ff 	mvi r3,255
 3a8:	4c 62 00 02 	bge r3,r2,3b0 <irq_handler+0x40>
		contador =0;
 3ac:	58 20 00 00 	sw (r1+0),r0
	//uart_putchar(contador);
	pwm(PIN_R, v_ch1);
 3b0:	78 01 00 00 	mvhi r1,0x0
 3b4:	38 21 07 ec 	ori r1,r1,0x7ec
 3b8:	28 22 00 00 	lw r2,(r1+0)
 3bc:	78 0b 00 00 	mvhi r11,0x0
 3c0:	39 6b 02 9c 	ori r11,r11,0x29c
 3c4:	34 01 00 02 	mvi r1,2
 3c8:	d9 60 00 00 	call r11
	pwm(PIN_G, v_ch2);
 3cc:	78 01 00 00 	mvhi r1,0x0
 3d0:	38 21 07 e4 	ori r1,r1,0x7e4
 3d4:	28 22 00 00 	lw r2,(r1+0)
 3d8:	34 01 00 04 	mvi r1,4
 3dc:	d9 60 00 00 	call r11
	pwm(PIN_B, v_ch3);
 3e0:	78 01 00 00 	mvhi r1,0x0
 3e4:	38 21 07 e8 	ori r1,r1,0x7e8
 3e8:	28 22 00 00 	lw r2,(r1+0)
 3ec:	34 01 00 08 	mvi r1,8
 3f0:	d9 60 00 00 	call r11

	if ( uart0->ucr & UART_DR)
 3f4:	78 01 00 00 	mvhi r1,0x0
 3f8:	38 21 07 d4 	ori r1,r1,0x7d4
 3fc:	28 21 00 00 	lw r1,(r1+0)
 400:	28 21 00 00 	lw r1,(r1+0)
 404:	20 21 00 01 	andi r1,r1,0x1
 408:	44 20 00 02 	be r1,r0,410 <irq_handler+0xa0>
		leer_datos();
 40c:	fb ff ff b9 	calli 2f0 <leer_datos>

	
}
 410:	2b 9d 00 04 	lw ra,(sp+4)
 414:	2b 8b 00 08 	lw r11,(sp+8)
 418:	37 9c 00 08 	addi sp,sp,8
 41c:	c3 a0 00 00 	ret

00000420 <msleep>:
 */
void msleep(uint32_t msec)
{
	uint32_t tcr;

	timer0->compare0 = (FCPU/1000)*msec;
 420:	78 04 00 00 	mvhi r4,0x0
 424:	38 84 07 d0 	ori r4,r4,0x7d0
 428:	28 83 00 00 	lw r3,(r4+0)
 42c:	78 02 00 00 	mvhi r2,0x0
 430:	38 42 07 d8 	ori r2,r2,0x7d8
 434:	28 42 00 00 	lw r2,(r2+0)
 438:	88 23 08 00 	mul r1,r1,r3
 43c:	58 41 00 04 	sw (r2+4),r1
	timer0->counter0 = 0;
 440:	58 40 00 08 	sw (r2+8),r0
	timer0->tcr0 = TIMER_EN;
 444:	34 01 00 08 	mvi r1,8
 448:	58 41 00 00 	sw (r2+0),r1

	do {
 		tcr = timer0->tcr0;
 44c:	28 41 00 00 	lw r1,(r2+0)
 	} while ( ! (tcr & TIMER_TRIG) );
 450:	20 21 00 01 	andi r1,r1,0x1
 454:	44 20 ff fe 	be r1,r0,44c <msleep+0x2c>
}
 458:	c3 a0 00 00 	ret

0000045c <usleep>:

void usleep(uint32_t usec)
{
	uint32_t tcr;

	timer0->compare0 = (FCPU/1000000)*usec;
 45c:	78 02 00 00 	mvhi r2,0x0
 460:	38 42 07 d8 	ori r2,r2,0x7d8
 464:	28 42 00 00 	lw r2,(r2+0)
 468:	08 21 00 64 	muli r1,r1,100
 46c:	58 41 00 04 	sw (r2+4),r1
	timer0->counter0 = 0;
 470:	58 40 00 08 	sw (r2+8),r0
	timer0->tcr0 = TIMER_EN   ;
 474:	34 01 00 08 	mvi r1,8
 478:	58 41 00 00 	sw (r2+0),r1

	do {
 		tcr = timer0->tcr0;
 47c:	28 41 00 00 	lw r1,(r2+0)
 	} while ( ! (tcr & TIMER_TRIG) );
 480:	20 21 00 01 	andi r1,r1,0x1
 484:	44 20 ff fe 	be r1,r0,47c <usleep+0x20>
}
 488:	c3 a0 00 00 	ret

0000048c <nsleep>:

void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	timer0->compare0 = (FCPU/1000000)*nsec;
 48c:	78 02 00 00 	mvhi r2,0x0
 490:	38 42 07 d8 	ori r2,r2,0x7d8
 494:	28 42 00 00 	lw r2,(r2+0)
 498:	08 21 00 64 	muli r1,r1,100
 49c:	58 41 00 04 	sw (r2+4),r1
	timer0->counter0 = 0;
 4a0:	58 40 00 08 	sw (r2+8),r0
	timer0->tcr0 = TIMER_EN;
 4a4:	34 01 00 08 	mvi r1,8
 4a8:	58 41 00 00 	sw (r2+0),r1

	do {
 		tcr = timer0->tcr0;
 4ac:	28 41 00 00 	lw r1,(r2+0)
 	} while ( ! (tcr & TIMER_TRIG) );
 4b0:	20 21 00 01 	andi r1,r1,0x1
 4b4:	44 20 ff fe 	be r1,r0,4ac <nsleep+0x20>
}
 4b8:	c3 a0 00 00 	ret

000004bc <tic_init0>:
     
}

void tic_init0()
{
	timer0->compare0 = (FCPU/1000000)*5;
 4bc:	78 01 00 00 	mvhi r1,0x0
 4c0:	38 21 07 d8 	ori r1,r1,0x7d8
 4c4:	28 22 00 00 	lw r2,(r1+0)
 4c8:	34 01 01 f4 	mvi r1,500
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR| TIMER_IRQEN;
 4cc:	34 03 00 0e 	mvi r3,14
     
}

void tic_init0()
{
	timer0->compare0 = (FCPU/1000000)*5;
 4d0:	58 41 00 04 	sw (r2+4),r1
	timer0->counter0 = 0;
 4d4:	58 40 00 08 	sw (r2+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR| TIMER_IRQEN;
	contador=0;
 4d8:	78 01 00 00 	mvhi r1,0x0

void tic_init0()
{
	timer0->compare0 = (FCPU/1000000)*5;
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR| TIMER_IRQEN;
 4dc:	58 43 00 00 	sw (r2+0),r3
	contador=0;
 4e0:	38 21 07 f0 	ori r1,r1,0x7f0
 4e4:	58 20 00 00 	sw (r1+0),r0

}
 4e8:	c3 a0 00 00 	ret

000004ec <set_pin>:
/**********************************************************
 * GPIO Functions
 */

void set_pin(uint8_t value, uint8_t npin)
{
 4ec:	20 21 00 ff 	andi r1,r1,0xff
 4f0:	20 42 00 ff 	andi r2,r2,0xff
     if (value)
 4f4:	5c 20 00 09 	bne r1,r0,518 <set_pin+0x2c>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 4f8:	78 01 00 00 	mvhi r1,0x0
 4fc:	38 21 07 dc 	ori r1,r1,0x7dc
 500:	28 21 00 00 	lw r1,(r1+0)
 504:	a4 40 10 00 	not r2,r2
 508:	28 23 00 00 	lw r3,(r1+0)
 50c:	a0 43 10 00 	and r2,r2,r3
 510:	58 22 00 04 	sw (r1+4),r2
 514:	c3 a0 00 00 	ret
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 518:	78 01 00 00 	mvhi r1,0x0
 51c:	38 21 07 dc 	ori r1,r1,0x7dc
 520:	28 21 00 00 	lw r1,(r1+0)
 524:	28 23 00 00 	lw r3,(r1+0)
 528:	b8 43 10 00 	or r2,r2,r3
 52c:	58 22 00 04 	sw (r1+4),r2
 530:	c3 a0 00 00 	ret

00000534 <pin_inv>:
}

void pin_inv(uint8_t npin)
{
	uint32_t val;
	val = (~gpio0->read) & npin;
 534:	78 02 00 00 	mvhi r2,0x0
 538:	38 42 07 dc 	ori r2,r2,0x7dc
 53c:	28 42 00 00 	lw r2,(r2+0)
		gpio0->write = gpio0->read & (~npin);

}

void pin_inv(uint8_t npin)
{
 540:	20 21 00 ff 	andi r1,r1,0xff
	uint32_t val;
	val = (~gpio0->read) & npin;
 544:	28 43 00 00 	lw r3,(r2+0)
 548:	a4 60 18 00 	not r3,r3
 * GPIO Functions
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
 54c:	a0 23 18 00 	and r3,r1,r3
 550:	5c 60 00 06 	bne r3,r0,568 <pin_inv+0x34>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 554:	28 43 00 00 	lw r3,(r2+0)
 558:	a4 20 08 00 	not r1,r1
 55c:	a0 23 08 00 	and r1,r1,r3
 560:	58 41 00 04 	sw (r2+4),r1
 564:	c3 a0 00 00 	ret
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 568:	28 43 00 00 	lw r3,(r2+0)
 56c:	b8 23 08 00 	or r1,r1,r3
 570:	58 41 00 04 	sw (r2+4),r1
 574:	c3 a0 00 00 	ret

00000578 <uart_getchar>:
 */



char uart_getchar()
{   
 578:	78 01 00 00 	mvhi r1,0x0
 57c:	38 21 07 d4 	ori r1,r1,0x7d4
 580:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 584:	28 41 00 00 	lw r1,(r2+0)
 588:	20 21 00 01 	andi r1,r1,0x1
 58c:	44 20 ff fe 	be r1,r0,584 <uart_getchar+0xc>
	return uart0->rxtx;
 590:	28 41 00 04 	lw r1,(r2+4)
}
 594:	20 21 00 ff 	andi r1,r1,0xff
 598:	c3 a0 00 00 	ret

0000059c <uart_putchar>:

void uart_putchar(char c)
{
 59c:	78 02 00 00 	mvhi r2,0x0
 5a0:	38 42 07 d4 	ori r2,r2,0x7d4
 5a4:	28 43 00 00 	lw r3,(r2+0)
 5a8:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 5ac:	28 62 00 00 	lw r2,(r3+0)
 5b0:	20 42 00 10 	andi r2,r2,0x10
 5b4:	5c 40 ff fe 	bne r2,r0,5ac <uart_putchar+0x10>
	uart0->rxtx = c;
 5b8:	58 61 00 04 	sw (r3+4),r1
}
 5bc:	c3 a0 00 00 	ret

000005c0 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 5c0:	40 24 00 00 	lbu r4,(r1+0)
 5c4:	44 80 00 0b 	be r4,r0,5f0 <uart_putstr+0x30>
 5c8:	78 02 00 00 	mvhi r2,0x0
 5cc:	38 42 07 d4 	ori r2,r2,0x7d4
 5d0:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 5d4:	28 62 00 00 	lw r2,(r3+0)
 5d8:	20 42 00 10 	andi r2,r2,0x10
 5dc:	5c 40 ff fe 	bne r2,r0,5d4 <uart_putstr+0x14>
	uart0->rxtx = c;
 5e0:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 5e4:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 5e8:	40 24 00 00 	lbu r4,(r1+0)
 5ec:	5c 82 ff fa 	bne r4,r2,5d4 <uart_putstr+0x14>
 5f0:	c3 a0 00 00 	ret

000005f4 <sleept1>:


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 5f4:	78 01 00 00 	mvhi r1,0x0
 5f8:	38 21 07 d8 	ori r1,r1,0x7d8
 5fc:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr1 = TIMER_EN;
 600:	34 01 00 08 	mvi r1,8


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 604:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 608:	58 41 00 0c 	sw (r2+12),r1
	do {
 		tcr = timer0->tcr1;
 60c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 610:	20 21 00 01 	andi r1,r1,0x1
 614:	44 20 ff fe 	be r1,r0,60c <sleept1+0x18>
}
 618:	c3 a0 00 00 	ret

0000061c <config_dmx>:


void config_dmx()
{
//configurar pin DMX_PIN como pin de salida 
	gpio0->dir |= DMX_PIN;
 61c:	78 01 00 00 	mvhi r1,0x0
 620:	38 21 07 dc 	ori r1,r1,0x7dc
 624:	28 21 00 00 	lw r1,(r1+0)
    //   gpio0->dir = gpio0->dir  | DMX_PIN;
    // config Use timer 1
	timer0->compare1 = (FCPU/1000000)*(TBIT)-80; // for usecond
 628:	78 02 00 00 	mvhi r2,0x0
 62c:	38 42 07 d8 	ori r2,r2,0x7d8


void config_dmx()
{
//configurar pin DMX_PIN como pin de salida 
	gpio0->dir |= DMX_PIN;
 630:	28 23 00 08 	lw r3,(r1+8)
    //   gpio0->dir = gpio0->dir  | DMX_PIN;
    // config Use timer 1
	timer0->compare1 = (FCPU/1000000)*(TBIT)-80; // for usecond
 634:	28 42 00 00 	lw r2,(r2+0)


void config_dmx()
{
//configurar pin DMX_PIN como pin de salida 
	gpio0->dir |= DMX_PIN;
 638:	38 63 00 01 	ori r3,r3,0x1
 63c:	58 23 00 08 	sw (r1+8),r3
    //   gpio0->dir = gpio0->dir  | DMX_PIN;
    // config Use timer 1
	timer0->compare1 = (FCPU/1000000)*(TBIT)-80; // for usecond
 640:	34 03 01 40 	mvi r3,320
 644:	58 43 00 10 	sw (r2+16),r3
	gpio0->write = gpio0->read | DMX_PIN;
 648:	28 22 00 00 	lw r2,(r1+0)
 64c:	38 42 00 01 	ori r2,r2,0x1
 650:	58 22 00 04 	sw (r1+4),r2
 
}
 654:	c3 a0 00 00 	ret

00000658 <pin_inv_old>:


void pin_inv_old(uint32_t num)
{
 658:	37 9c ff f8 	addi sp,sp,-8
 65c:	5b 8b 00 08 	sw (sp+8),r11
 660:	5b 9d 00 04 	sw (sp+4),ra
	uint32_t i;
	uint32_t pin_act;
	pin_act = (~gpio0->read) & DMX_PIN;
 664:	78 02 00 00 	mvhi r2,0x0
 668:	38 42 07 dc 	ori r2,r2,0x7dc
 66c:	28 43 00 00 	lw r3,(r2+0)
 
}


void pin_inv_old(uint32_t num)
{
 670:	b8 20 58 00 	mv r11,r1
	uint32_t i;
	uint32_t pin_act;
	pin_act = (~gpio0->read) & DMX_PIN;
     set_pin(pin_act, DMX_PIN);
 674:	34 02 00 01 	mvi r2,1

void pin_inv_old(uint32_t num)
{
	uint32_t i;
	uint32_t pin_act;
	pin_act = (~gpio0->read) & DMX_PIN;
 678:	28 61 00 00 	lw r1,(r3+0)
 67c:	20 21 00 01 	andi r1,r1,0x1
     set_pin(pin_act, DMX_PIN);
 680:	18 21 00 01 	xori r1,r1,0x1
 684:	fb ff ff 9a 	calli 4ec <set_pin>
	for(i=0;i<num;i++)
 688:	45 60 00 0d 	be r11,r0,6bc <pin_inv_old+0x64>
 68c:	78 01 00 00 	mvhi r1,0x0
 690:	38 21 07 d8 	ori r1,r1,0x7d8
 694:	28 23 00 00 	lw r3,(r1+0)
 698:	34 04 00 00 	mvi r4,0

void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN;
 69c:	34 01 00 08 	mvi r1,8


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 6a0:	58 60 00 14 	sw (r3+20),r0
	timer0->tcr1 = TIMER_EN;
 6a4:	58 61 00 0c 	sw (r3+12),r1
	do {
 		tcr = timer0->tcr1;
 6a8:	28 62 00 0c 	lw r2,(r3+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 6ac:	20 42 00 01 	andi r2,r2,0x1
 6b0:	44 40 ff fe 	be r2,r0,6a8 <pin_inv_old+0x50>
{
	uint32_t i;
	uint32_t pin_act;
	pin_act = (~gpio0->read) & DMX_PIN;
     set_pin(pin_act, DMX_PIN);
	for(i=0;i<num;i++)
 6b4:	34 84 00 01 	addi r4,r4,1
 6b8:	55 64 ff fa 	bgu r11,r4,6a0 <pin_inv_old+0x48>
		sleept1();
}
 6bc:	2b 9d 00 04 	lw ra,(sp+4)
 6c0:	2b 8b 00 08 	lw r11,(sp+8)
 6c4:	37 9c 00 08 	addi sp,sp,8
 6c8:	c3 a0 00 00 	ret

000006cc <dmx_channel_send>:
 }



void dmx_channel_send(uint8_t value)
{
 6cc:	37 9c ff ec 	addi sp,sp,-20
 6d0:	5b 8b 00 14 	sw (sp+20),r11
 6d4:	5b 8c 00 10 	sw (sp+16),r12
 6d8:	5b 8d 00 0c 	sw (sp+12),r13
 6dc:	5b 8e 00 08 	sw (sp+8),r14
 6e0:	5b 9d 00 04 	sw (sp+4),ra
 6e4:	78 0d 00 00 	mvhi r13,0x0
 6e8:	20 2c 00 ff 	andi r12,r1,0xff
	uint8_t bit, i;
       pin_inv_old(1); // bita start
 6ec:	34 01 00 01 	mvi r1,1
 6f0:	fb ff ff da 	calli 658 <pin_inv_old>
 6f4:	34 0b 00 08 	mvi r11,8
 6f8:	39 ad 07 d8 	ori r13,r13,0x7d8

void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN;
 6fc:	34 0e 00 08 	mvi r14,8
       pin_inv_old(1); // bita start
 	//nsleep(4000);
	for(i=0;i<8;i++)
	{
		bit=value & 0x01;
 		set_pin(bit, DMX_PIN);	
 700:	21 81 00 01 	andi r1,r12,0x1
 704:	34 02 00 01 	mvi r2,1
 708:	fb ff ff 79 	calli 4ec <set_pin>


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 70c:	29 a2 00 00 	lw r2,(r13+0)
 	//nsleep(4000);
	for(i=0;i<8;i++)
	{
		bit=value & 0x01;
 		set_pin(bit, DMX_PIN);	
		value=value>>1;
 710:	01 8c 00 01 	srui r12,r12,1


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 714:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 718:	58 4e 00 0c 	sw (r2+12),r14
	do {
 		tcr = timer0->tcr1;
 71c:	28 43 00 0c 	lw r3,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 720:	20 63 00 01 	andi r3,r3,0x1
 724:	44 60 ff fe 	be r3,r0,71c <dmx_channel_send+0x50>
 728:	35 6b ff ff 	addi r11,r11,-1
 72c:	21 6b 00 ff 	andi r11,r11,0xff
void dmx_channel_send(uint8_t value)
{
	uint8_t bit, i;
       pin_inv_old(1); // bita start
 	//nsleep(4000);
	for(i=0;i<8;i++)
 730:	5d 60 ff f4 	bne r11,r0,700 <dmx_channel_send+0x34>
		bit=value & 0x01;
 		set_pin(bit, DMX_PIN);	
		value=value>>1;
		sleept1();
        }
	gpio0->write = gpio0->read | DMX_PIN;
 734:	78 01 00 00 	mvhi r1,0x0
 738:	38 21 07 dc 	ori r1,r1,0x7dc
 73c:	28 21 00 00 	lw r1,(r1+0)
 740:	28 23 00 00 	lw r3,(r1+0)
 744:	38 63 00 01 	ori r3,r3,0x1
 748:	58 23 00 04 	sw (r1+4),r3


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 74c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 750:	34 01 00 08 	mvi r1,8
 754:	58 41 00 0c 	sw (r2+12),r1
	do {
 		tcr = timer0->tcr1;
 758:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 75c:	20 21 00 01 	andi r1,r1,0x1
 760:	44 20 ff fe 	be r1,r0,758 <dmx_channel_send+0x8c>


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 764:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 768:	34 01 00 08 	mvi r1,8
 76c:	58 41 00 0c 	sw (r2+12),r1
	do {
 		tcr = timer0->tcr1;
 770:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 774:	20 21 00 01 	andi r1,r1,0x1
 778:	44 20 ff fe 	be r1,r0,770 <dmx_channel_send+0xa4>
        }
	gpio0->write = gpio0->read | DMX_PIN;
	sleept1();
	sleept1();
	
	}
 77c:	2b 9d 00 04 	lw ra,(sp+4)
 780:	2b 8b 00 14 	lw r11,(sp+20)
 784:	2b 8c 00 10 	lw r12,(sp+16)
 788:	2b 8d 00 0c 	lw r13,(sp+12)
 78c:	2b 8e 00 08 	lw r14,(sp+8)
 790:	37 9c 00 14 	addi sp,sp,20
 794:	c3 a0 00 00 	ret

00000798 <dmx_init_send>:
}



void dmx_init_send()
{
 798:	37 9c ff fc 	addi sp,sp,-4
 79c:	5b 9d 00 04 	sw (sp+4),ra
	pin_inv_old(22);
 7a0:	34 01 00 16 	mvi r1,22
 7a4:	fb ff ff ad 	calli 658 <pin_inv_old>
	pin_inv_old(2);
 7a8:	34 01 00 02 	mvi r1,2
 7ac:	fb ff ff ab 	calli 658 <pin_inv_old>
	dmx_channel_send(0);    	
 7b0:	34 01 00 00 	mvi r1,0
 7b4:	fb ff ff c6 	calli 6cc <dmx_channel_send>
 }
 7b8:	2b 9d 00 04 	lw ra,(sp+4)
 7bc:	37 9c 00 04 	addi sp,sp,4
 7c0:	c3 a0 00 00 	ret
