
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         000008b8  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000018  000008b8  000008b8  0000090c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         0000001c  000008d0  000008d0  00000924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000010  000008ec  000008ec  00000940  2**2
                  ALLOC
  4 .debug_abbrev 000003fc  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a22  00000000  00000000  00000d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000006a0  00000000  00000000  0000175e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000130  00000000  00000000  00001e00  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000019e  00000000  00000000  00001f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 000000ce  00000000  00000000  000020ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000060  00000000  00000000  0000219c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000218  00000000  00000000  000021fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  00002414  2**0
                  CONTENTS, READONLY
 13 .debug_loc    0000031f  00000000  00000000  00002425  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000a0  00000000  00000000  00002744  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 8d 	calli 300 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 08 f0 	ori gp,gp,0x8f0
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 08 ec 	ori r1,r1,0x8ec
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 08 fc 	ori r3,r3,0x8fc

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
#include "soc-hw.h"
#include "txdmx.h"


int main()
{
 208:	37 9c ff ec 	addi sp,sp,-20
 20c:	5b 8b 00 14 	sw (sp+20),r11
 210:	5b 8c 00 10 	sw (sp+16),r12
 214:	5b 8d 00 0c 	sw (sp+12),r13
 218:	5b 8e 00 08 	sw (sp+8),r14
 21c:	5b 9d 00 04 	sw (sp+4),ra
	config_dmx();
 220:	f8 00 01 3d 	calli 714 <config_dmx>
	gpio0->dir = 0xFF;
 224:	78 01 00 00 	mvhi r1,0x0
 228:	38 21 08 d8 	ori r1,r1,0x8d8
 22c:	28 21 00 00 	lw r1,(r1+0)
 230:	34 02 00 ff 	mvi r2,255
 234:	78 0e 00 00 	mvhi r14,0x0
 238:	58 22 00 08 	sw (r1+8),r2
	gpio0->write = 0xFF;
 23c:	58 22 00 04 	sw (r1+4),r2

	tic_init0();
 240:	f8 00 00 51 	calli 384 <tic_init0>

	irq_set_mask(0x02);
 244:	34 01 00 02 	mvi r1,2
 248:	78 0d 00 00 	mvhi r13,0x0
 24c:	78 0c 00 00 	mvhi r12,0x0
 250:	78 0b 00 00 	mvhi r11,0x0
 254:	fb ff ff c1 	calli 158 <irq_set_mask>
 258:	39 ce 08 e0 	ori r14,r14,0x8e0
	irq_enable();
 25c:	fb ff ff b9 	calli 140 <irq_enable>
 260:	39 ad 08 e4 	ori r13,r13,0x8e4
 264:	39 8c 08 ec 	ori r12,r12,0x8ec
 268:	39 6b 08 d0 	ori r11,r11,0x8d0

	for(;;)
	{
			dmx_init_send();
 26c:	f8 00 01 88 	calli 88c <dmx_init_send>
			sleept1();
 270:	f8 00 01 1f 	calli 6ec <sleept1>
			dmx_channel_send(v_ch1);
 274:	41 c1 00 03 	lbu r1,(r14+3)
 278:	f8 00 01 53 	calli 7c4 <dmx_channel_send>
			sleept1();
 27c:	f8 00 01 1c 	calli 6ec <sleept1>
			dmx_channel_send(v_ch2);
 280:	41 a1 00 03 	lbu r1,(r13+3)
 284:	f8 00 01 50 	calli 7c4 <dmx_channel_send>
			sleept1();
 288:	f8 00 01 19 	calli 6ec <sleept1>
			dmx_channel_send(v_ch3);
 28c:	41 81 00 03 	lbu r1,(r12+3)
 290:	f8 00 01 4d 	calli 7c4 <dmx_channel_send>
			sleept1();
 294:	f8 00 01 16 	calli 6ec <sleept1>
			if ( uart0->ucr & UART_DR)
 298:	29 61 00 00 	lw r1,(r11+0)
 29c:	28 21 00 00 	lw r1,(r1+0)
 2a0:	20 21 00 01 	andi r1,r1,0x1
 2a4:	44 20 ff f2 	be r1,r0,26c <main+0x64>
				leer_datos();				
 2a8:	f8 00 00 95 	calli 4fc <leer_datos>
 2ac:	e3 ff ff f0 	bi 26c <main+0x64>

000002b0 <pwm>:
}


void pwm(uint8_t PINRGB, int Valor_C)
{
	if (contador < Valor_C)
 2b0:	78 03 00 00 	mvhi r3,0x0
 2b4:	38 63 08 f8 	ori r3,r3,0x8f8
 2b8:	28 63 00 00 	lw r3,(r3+0)

}


void pwm(uint8_t PINRGB, int Valor_C)
{
 2bc:	20 21 00 ff 	andi r1,r1,0xff
	if (contador < Valor_C)
 2c0:	4c 62 00 08 	bge r3,r2,2e0 <pwm+0x30>
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 2c4:	78 02 00 00 	mvhi r2,0x0
 2c8:	38 42 08 d8 	ori r2,r2,0x8d8
 2cc:	28 42 00 00 	lw r2,(r2+0)
 2d0:	28 43 00 00 	lw r3,(r2+0)
 2d4:	b8 23 08 00 	or r1,r1,r3
 2d8:	58 41 00 04 	sw (r2+4),r1
 2dc:	c3 a0 00 00 	ret
	else
		gpio0->write = gpio0->read & (~npin);
 2e0:	78 02 00 00 	mvhi r2,0x0
 2e4:	38 42 08 d8 	ori r2,r2,0x8d8
 2e8:	28 42 00 00 	lw r2,(r2+0)
 2ec:	a4 20 08 00 	not r1,r1
 2f0:	28 43 00 00 	lw r3,(r2+0)
 2f4:	a0 23 08 00 	and r1,r1,r3
 2f8:	58 41 00 04 	sw (r2+4),r1
 2fc:	c3 a0 00 00 	ret

00000300 <irq_handler>:
/***************************************************************************
 * IRQ handling
 */

void irq_handler(uint32_t pending)
{
 300:	37 9c ff fc 	addi sp,sp,-4
 304:	5b 9d 00 04 	sw (sp+4),ra

	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
     
	contador =contador+1;
 308:	78 01 00 00 	mvhi r1,0x0
 30c:	38 21 08 f8 	ori r1,r1,0x8f8
 */

void irq_handler(uint32_t pending)
{

	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 310:	78 02 00 00 	mvhi r2,0x0
     
	contador =contador+1;
 314:	28 24 00 00 	lw r4,(r1+0)
 */

void irq_handler(uint32_t pending)
{

	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 318:	38 42 08 d4 	ori r2,r2,0x8d4
 31c:	28 43 00 00 	lw r3,(r2+0)
     
	contador =contador+1;
 320:	34 82 00 01 	addi r2,r4,1
 */

void irq_handler(uint32_t pending)
{

	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 324:	34 04 00 0e 	mvi r4,14
 328:	58 64 00 00 	sw (r3+0),r4
     
	contador =contador+1;
 32c:	58 22 00 00 	sw (r1+0),r2
     if (contador > 255)
 330:	34 03 00 ff 	mvi r3,255
 334:	4c 62 00 02 	bge r3,r2,33c <irq_handler+0x3c>
		contador =0;
 338:	58 20 00 00 	sw (r1+0),r0


	pwm(PIN_R, v_ch1);
 33c:	78 01 00 00 	mvhi r1,0x0
 340:	38 21 08 e0 	ori r1,r1,0x8e0
 344:	28 22 00 00 	lw r2,(r1+0)
 348:	34 01 00 02 	mvi r1,2
 34c:	fb ff ff d9 	calli 2b0 <pwm>
	pwm(PIN_G, v_ch2);
 350:	78 01 00 00 	mvhi r1,0x0
 354:	38 21 08 e4 	ori r1,r1,0x8e4
 358:	28 22 00 00 	lw r2,(r1+0)
 35c:	34 01 00 04 	mvi r1,4
 360:	fb ff ff d4 	calli 2b0 <pwm>
	pwm(PIN_B, v_ch3);
 364:	78 01 00 00 	mvhi r1,0x0
 368:	38 21 08 ec 	ori r1,r1,0x8ec
 36c:	28 22 00 00 	lw r2,(r1+0)
 370:	34 01 00 08 	mvi r1,8
 374:	fb ff ff cf 	calli 2b0 <pwm>


}
 378:	2b 9d 00 04 	lw ra,(sp+4)
 37c:	37 9c 00 04 	addi sp,sp,4
 380:	c3 a0 00 00 	ret

00000384 <tic_init0>:
 */


void tic_init0()
{
	timer0->compare0 = (FCPU/1000000)*40;
 384:	78 01 00 00 	mvhi r1,0x0
 388:	38 21 08 d4 	ori r1,r1,0x8d4
 38c:	28 22 00 00 	lw r2,(r1+0)
 390:	34 01 0f a0 	mvi r1,4000
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR| TIMER_IRQEN;
 394:	34 03 00 0e 	mvi r3,14
 */


void tic_init0()
{
	timer0->compare0 = (FCPU/1000000)*40;
 398:	58 41 00 04 	sw (r2+4),r1
	timer0->counter0 = 0;
 39c:	58 40 00 08 	sw (r2+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR| TIMER_IRQEN;
	contador=0;
 3a0:	78 01 00 00 	mvhi r1,0x0

void tic_init0()
{
	timer0->compare0 = (FCPU/1000000)*40;
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR| TIMER_IRQEN;
 3a4:	58 43 00 00 	sw (r2+0),r3
	contador=0;
 3a8:	38 21 08 f8 	ori r1,r1,0x8f8
 3ac:	58 20 00 00 	sw (r1+0),r0
}
 3b0:	c3 a0 00 00 	ret

000003b4 <set_pin>:
/**********************************************************
 * GPIO Functions
 */

void set_pin(uint8_t value, uint8_t npin)
{
 3b4:	20 21 00 ff 	andi r1,r1,0xff
 3b8:	20 42 00 ff 	andi r2,r2,0xff
     if (value)
 3bc:	5c 20 00 09 	bne r1,r0,3e0 <set_pin+0x2c>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 3c0:	78 01 00 00 	mvhi r1,0x0
 3c4:	38 21 08 d8 	ori r1,r1,0x8d8
 3c8:	28 21 00 00 	lw r1,(r1+0)
 3cc:	a4 40 10 00 	not r2,r2
 3d0:	28 23 00 00 	lw r3,(r1+0)
 3d4:	a0 43 10 00 	and r2,r2,r3
 3d8:	58 22 00 04 	sw (r1+4),r2
 3dc:	c3 a0 00 00 	ret
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 3e0:	78 01 00 00 	mvhi r1,0x0
 3e4:	38 21 08 d8 	ori r1,r1,0x8d8
 3e8:	28 21 00 00 	lw r1,(r1+0)
 3ec:	28 23 00 00 	lw r3,(r1+0)
 3f0:	b8 43 10 00 	or r2,r2,r3
 3f4:	58 22 00 04 	sw (r1+4),r2
 3f8:	c3 a0 00 00 	ret

000003fc <set_pinDMX>:
		gpio0->write = gpio0->read & (~npin);

}

void set_pinDMX(uint8_t value)
{
 3fc:	20 21 00 ff 	andi r1,r1,0xff
     if (value)
 400:	5c 20 00 08 	bne r1,r0,420 <set_pinDMX+0x24>
		gpio0->write = gpio0->read | 0x01;
	else
		gpio0->write = gpio0->read & 0xFE;
 404:	78 01 00 00 	mvhi r1,0x0
 408:	38 21 08 d8 	ori r1,r1,0x8d8
 40c:	28 21 00 00 	lw r1,(r1+0)
 410:	28 22 00 00 	lw r2,(r1+0)
 414:	20 42 00 fe 	andi r2,r2,0xfe
 418:	58 22 00 04 	sw (r1+4),r2
 41c:	c3 a0 00 00 	ret
}

void set_pinDMX(uint8_t value)
{
     if (value)
		gpio0->write = gpio0->read | 0x01;
 420:	78 01 00 00 	mvhi r1,0x0
 424:	38 21 08 d8 	ori r1,r1,0x8d8
 428:	28 21 00 00 	lw r1,(r1+0)
 42c:	28 22 00 00 	lw r2,(r1+0)
 430:	38 42 00 01 	ori r2,r2,0x1
 434:	58 22 00 04 	sw (r1+4),r2
 438:	c3 a0 00 00 	ret

0000043c <pin_inv>:
}

void pin_inv(uint8_t npin)
{
	uint32_t val;
	val = (~gpio0->read) & npin;
 43c:	78 02 00 00 	mvhi r2,0x0
 440:	38 42 08 d8 	ori r2,r2,0x8d8
 444:	28 42 00 00 	lw r2,(r2+0)
		gpio0->write = gpio0->read & 0xFE;

}

void pin_inv(uint8_t npin)
{
 448:	20 21 00 ff 	andi r1,r1,0xff
	uint32_t val;
	val = (~gpio0->read) & npin;
 44c:	28 43 00 00 	lw r3,(r2+0)
 450:	a4 60 18 00 	not r3,r3
 * GPIO Functions
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
 454:	a0 23 18 00 	and r3,r1,r3
 458:	5c 60 00 06 	bne r3,r0,470 <pin_inv+0x34>
		gpio0->write = gpio0->read | npin;
	else
		gpio0->write = gpio0->read & (~npin);
 45c:	28 43 00 00 	lw r3,(r2+0)
 460:	a4 20 08 00 	not r1,r1
 464:	a0 23 08 00 	and r1,r1,r3
 468:	58 41 00 04 	sw (r2+4),r1
 46c:	c3 a0 00 00 	ret
 */

void set_pin(uint8_t value, uint8_t npin)
{
     if (value)
		gpio0->write = gpio0->read | npin;
 470:	28 43 00 00 	lw r3,(r2+0)
 474:	b8 23 08 00 	or r1,r1,r3
 478:	58 41 00 04 	sw (r2+4),r1
 47c:	c3 a0 00 00 	ret

00000480 <uart_getchar>:
/***************************************************************************
 * UART Functions
 */

char uart_getchar()
{   
 480:	78 01 00 00 	mvhi r1,0x0
 484:	38 21 08 d0 	ori r1,r1,0x8d0
 488:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 48c:	28 41 00 00 	lw r1,(r2+0)
 490:	20 21 00 01 	andi r1,r1,0x1
 494:	44 20 ff fe 	be r1,r0,48c <uart_getchar+0xc>
	return uart0->rxtx;
 498:	28 41 00 04 	lw r1,(r2+4)
}
 49c:	20 21 00 ff 	andi r1,r1,0xff
 4a0:	c3 a0 00 00 	ret

000004a4 <uart_putchar>:

void uart_putchar(char c)
{
 4a4:	78 02 00 00 	mvhi r2,0x0
 4a8:	38 42 08 d0 	ori r2,r2,0x8d0
 4ac:	28 43 00 00 	lw r3,(r2+0)
 4b0:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 4b4:	28 62 00 00 	lw r2,(r3+0)
 4b8:	20 42 00 10 	andi r2,r2,0x10
 4bc:	5c 40 ff fe 	bne r2,r0,4b4 <uart_putchar+0x10>
	uart0->rxtx = c;
 4c0:	58 61 00 04 	sw (r3+4),r1
}
 4c4:	c3 a0 00 00 	ret

000004c8 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 4c8:	40 24 00 00 	lbu r4,(r1+0)
 4cc:	44 80 00 0b 	be r4,r0,4f8 <uart_putstr+0x30>
 4d0:	78 02 00 00 	mvhi r2,0x0
 4d4:	38 42 08 d0 	ori r2,r2,0x8d0
 4d8:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 4dc:	28 62 00 00 	lw r2,(r3+0)
 4e0:	20 42 00 10 	andi r2,r2,0x10
 4e4:	5c 40 ff fe 	bne r2,r0,4dc <uart_putstr+0x14>
	uart0->rxtx = c;
 4e8:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 4ec:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 4f0:	40 24 00 00 	lbu r4,(r1+0)
 4f4:	5c 82 ff fa 	bne r4,r2,4dc <uart_putstr+0x14>
 4f8:	c3 a0 00 00 	ret

000004fc <leer_datos>:
    		set_pin(0,PINRGB);     
}


void leer_datos()
{
 4fc:	37 9c ff ec 	addi sp,sp,-20
 500:	5b 8b 00 14 	sw (sp+20),r11
 504:	5b 8c 00 10 	sw (sp+16),r12
 508:	5b 8d 00 0c 	sw (sp+12),r13
 50c:	5b 8e 00 08 	sw (sp+8),r14
 510:	5b 9d 00 04 	sw (sp+4),ra
 514:	78 0b 00 00 	mvhi r11,0x0
 518:	39 6b 08 d0 	ori r11,r11,0x8d0
 51c:	29 62 00 00 	lw r2,(r11+0)
 * UART Functions
 */

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 520:	28 41 00 00 	lw r1,(r2+0)
 524:	20 21 00 01 	andi r1,r1,0x1
 528:	44 20 ff fe 	be r1,r0,520 <leer_datos+0x24>
	return uart0->rxtx;
 52c:	28 41 00 04 	lw r1,(r2+4)
}


void leer_datos()
{
	tmp_var=uart_getchar();
 530:	78 0c 00 00 	mvhi r12,0x0
 534:	39 8c 08 f0 	ori r12,r12,0x8f0
 */

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
	return uart0->rxtx;
 538:	20 21 00 ff 	andi r1,r1,0xff
}


void leer_datos()
{
	tmp_var=uart_getchar();
 53c:	31 81 00 00 	sb (r12+0),r1
	if(tmp_var=='<')
 540:	34 02 00 3c 	mvi r2,60
 544:	44 22 00 08 	be r1,r2,564 <leer_datos+0x68>
				uart_putchar(v_ch2);
				uart_putchar(v_ch3);	
	
			}
		}
}
 548:	2b 9d 00 04 	lw ra,(sp+4)
 54c:	2b 8b 00 14 	lw r11,(sp+20)
 550:	2b 8c 00 10 	lw r12,(sp+16)
 554:	2b 8d 00 0c 	lw r13,(sp+12)
 558:	2b 8e 00 08 	lw r14,(sp+8)
 55c:	37 9c 00 14 	addi sp,sp,20
 560:	c3 a0 00 00 	ret
void leer_datos()
{
	tmp_var=uart_getchar();
	if(tmp_var=='<')
		{
			uart_putstr("\nok <\n");
 564:	78 01 00 00 	mvhi r1,0x0
 568:	38 21 08 b8 	ori r1,r1,0x8b8
 56c:	fb ff ff d7 	calli 4c8 <uart_putstr>
 570:	29 61 00 00 	lw r1,(r11+0)
 * UART Functions
 */

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 574:	28 22 00 00 	lw r2,(r1+0)
 578:	20 42 00 01 	andi r2,r2,0x1
 57c:	44 40 ff fe 	be r2,r0,574 <leer_datos+0x78>
	return uart0->rxtx;
 580:	28 23 00 04 	lw r3,(r1+4)
{
	tmp_var=uart_getchar();
	if(tmp_var=='<')
		{
			uart_putstr("\nok <\n");
			tmp_num=uart_getchar();
 584:	78 02 00 00 	mvhi r2,0x0
 588:	38 42 08 f1 	ori r2,r2,0x8f1
 */

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
	return uart0->rxtx;
 58c:	20 63 00 ff 	andi r3,r3,0xff
{
	tmp_var=uart_getchar();
	if(tmp_var=='<')
		{
			uart_putstr("\nok <\n");
			tmp_num=uart_getchar();
 590:	30 43 00 00 	sb (r2+0),r3
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 594:	28 22 00 00 	lw r2,(r1+0)
 598:	20 42 00 10 	andi r2,r2,0x10
 59c:	5c 40 ff fe 	bne r2,r0,594 <leer_datos+0x98>
	uart0->rxtx = c;
 5a0:	58 23 00 04 	sw (r1+4),r3
 * UART Functions
 */

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 5a4:	28 22 00 00 	lw r2,(r1+0)
 5a8:	20 42 00 01 	andi r2,r2,0x1
 5ac:	44 40 ff fe 	be r2,r0,5a4 <leer_datos+0xa8>
	return uart0->rxtx;
 5b0:	28 24 00 04 	lw r4,(r1+4)
 5b4:	20 84 00 ff 	andi r4,r4,0xff
	if(tmp_var=='<')
		{
			uart_putstr("\nok <\n");
			tmp_num=uart_getchar();
				uart_putchar(tmp_num);
			tmp_var=uart_getchar();
 5b8:	31 84 00 00 	sb (r12+0),r4
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 5bc:	28 22 00 00 	lw r2,(r1+0)
 5c0:	20 42 00 10 	andi r2,r2,0x10
 5c4:	5c 40 ff fe 	bne r2,r0,5bc <leer_datos+0xc0>
	uart0->rxtx = c;
 5c8:	58 24 00 04 	sw (r1+4),r4
			uart_putstr("\nok <\n");
			tmp_num=uart_getchar();
				uart_putchar(tmp_num);
			tmp_var=uart_getchar();
				uart_putchar(tmp_var);
			if (tmp_var == 'c')
 5cc:	34 01 00 63 	mvi r1,99
 5d0:	44 81 00 29 	be r4,r1,674 <leer_datos+0x178>
			{
			if (tmp_num <= 3)
					channel = tmp_num;				
			}
			else if (tmp_var == 'w') 
 5d4:	34 01 00 77 	mvi r1,119
 5d8:	5c 81 ff dc 	bne r4,r1,548 <leer_datos+0x4c>
			{
				w_c = tmp_num;
	   			if (channel==1)
 5dc:	78 02 00 00 	mvhi r2,0x0
 5e0:	38 42 08 e8 	ori r2,r2,0x8e8
			if (tmp_num <= 3)
					channel = tmp_num;				
			}
			else if (tmp_var == 'w') 
			{
				w_c = tmp_num;
 5e4:	78 01 00 00 	mvhi r1,0x0
	   			if (channel==1)
 5e8:	40 42 00 00 	lbu r2,(r2+0)
			if (tmp_num <= 3)
					channel = tmp_num;				
			}
			else if (tmp_var == 'w') 
			{
				w_c = tmp_num;
 5ec:	38 21 08 f4 	ori r1,r1,0x8f4
 5f0:	58 23 00 00 	sw (r1+0),r3
	   			if (channel==1)
 5f4:	34 01 00 01 	mvi r1,1
 5f8:	44 41 00 25 	be r2,r1,68c <leer_datos+0x190>
					v_ch1 = w_c;
				else if (channel==2) 
 5fc:	34 01 00 02 	mvi r1,2
 600:	44 41 00 2b 	be r2,r1,6ac <leer_datos+0x1b0>
					v_ch2 = w_c;
				else if (channel==3) 
 604:	34 01 00 03 	mvi r1,3
 608:	44 41 00 31 	be r2,r1,6cc <leer_datos+0x1d0>
 60c:	78 0e 00 00 	mvhi r14,0x0
 610:	78 0d 00 00 	mvhi r13,0x0
 614:	78 0c 00 00 	mvhi r12,0x0
 618:	39 ce 08 e0 	ori r14,r14,0x8e0
 61c:	39 ad 08 e4 	ori r13,r13,0x8e4
 620:	39 8c 08 ec 	ori r12,r12,0x8ec
					v_ch3 = w_c;

				uart_putstr("\n asignacion \n");
 624:	78 01 00 00 	mvhi r1,0x0
 628:	38 21 08 c0 	ori r1,r1,0x8c0
 62c:	fb ff ff a7 	calli 4c8 <uart_putstr>
				uart_putchar(v_ch1);
 630:	41 c3 00 03 	lbu r3,(r14+3)
 634:	29 61 00 00 	lw r1,(r11+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 638:	28 22 00 00 	lw r2,(r1+0)
 63c:	20 42 00 10 	andi r2,r2,0x10
 640:	5c 40 ff fe 	bne r2,r0,638 <leer_datos+0x13c>
				else if (channel==3) 
					v_ch3 = w_c;

				uart_putstr("\n asignacion \n");
				uart_putchar(v_ch1);
				uart_putchar(v_ch2);
 644:	41 a4 00 03 	lbu r4,(r13+3)
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
	uart0->rxtx = c;
 648:	58 23 00 04 	sw (r1+4),r3
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 64c:	28 22 00 00 	lw r2,(r1+0)
 650:	20 42 00 10 	andi r2,r2,0x10
 654:	5c 40 ff fe 	bne r2,r0,64c <leer_datos+0x150>
					v_ch3 = w_c;

				uart_putstr("\n asignacion \n");
				uart_putchar(v_ch1);
				uart_putchar(v_ch2);
				uart_putchar(v_ch3);	
 658:	41 83 00 03 	lbu r3,(r12+3)
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
	uart0->rxtx = c;
 65c:	58 24 00 04 	sw (r1+4),r4
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 660:	28 22 00 00 	lw r2,(r1+0)
 664:	20 42 00 10 	andi r2,r2,0x10
 668:	5c 40 ff fe 	bne r2,r0,660 <leer_datos+0x164>
	uart0->rxtx = c;
 66c:	58 23 00 04 	sw (r1+4),r3
 670:	e3 ff ff b6 	bi 548 <leer_datos+0x4c>
				uart_putchar(tmp_num);
			tmp_var=uart_getchar();
				uart_putchar(tmp_var);
			if (tmp_var == 'c')
			{
			if (tmp_num <= 3)
 674:	34 01 00 03 	mvi r1,3
 678:	54 61 ff b4 	bgu r3,r1,548 <leer_datos+0x4c>
					channel = tmp_num;				
 67c:	78 01 00 00 	mvhi r1,0x0
 680:	38 21 08 e8 	ori r1,r1,0x8e8
 684:	30 23 00 00 	sb (r1+0),r3
 688:	e3 ff ff b0 	bi 548 <leer_datos+0x4c>
			}
			else if (tmp_var == 'w') 
			{
				w_c = tmp_num;
	   			if (channel==1)
					v_ch1 = w_c;
 68c:	78 0e 00 00 	mvhi r14,0x0
 690:	39 ce 08 e0 	ori r14,r14,0x8e0
 694:	78 0d 00 00 	mvhi r13,0x0
 698:	78 0c 00 00 	mvhi r12,0x0
 69c:	59 c3 00 00 	sw (r14+0),r3
 6a0:	39 ad 08 e4 	ori r13,r13,0x8e4
 6a4:	39 8c 08 ec 	ori r12,r12,0x8ec
 6a8:	e3 ff ff df 	bi 624 <leer_datos+0x128>
				else if (channel==2) 
					v_ch2 = w_c;
 6ac:	78 0d 00 00 	mvhi r13,0x0
 6b0:	39 ad 08 e4 	ori r13,r13,0x8e4
 6b4:	78 0e 00 00 	mvhi r14,0x0
 6b8:	78 0c 00 00 	mvhi r12,0x0
 6bc:	59 a3 00 00 	sw (r13+0),r3
 6c0:	39 ce 08 e0 	ori r14,r14,0x8e0
 6c4:	39 8c 08 ec 	ori r12,r12,0x8ec
 6c8:	e3 ff ff d7 	bi 624 <leer_datos+0x128>
				else if (channel==3) 
					v_ch3 = w_c;
 6cc:	78 0c 00 00 	mvhi r12,0x0
 6d0:	39 8c 08 ec 	ori r12,r12,0x8ec
 6d4:	78 0e 00 00 	mvhi r14,0x0
 6d8:	78 0d 00 00 	mvhi r13,0x0
 6dc:	59 83 00 00 	sw (r12+0),r3
 6e0:	39 ce 08 e0 	ori r14,r14,0x8e0
 6e4:	39 ad 08 e4 	ori r13,r13,0x8e4
 6e8:	e3 ff ff cf 	bi 624 <leer_datos+0x128>

000006ec <sleept1>:


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 6ec:	78 01 00 00 	mvhi r1,0x0
 6f0:	38 21 08 d4 	ori r1,r1,0x8d4
 6f4:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr1 = TIMER_EN;
 6f8:	34 01 00 08 	mvi r1,8


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 6fc:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 700:	58 41 00 0c 	sw (r2+12),r1
	do {
 		tcr = timer0->tcr1;
 704:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 708:	20 21 00 01 	andi r1,r1,0x1
 70c:	44 20 ff fe 	be r1,r0,704 <sleept1+0x18>
}
 710:	c3 a0 00 00 	ret

00000714 <config_dmx>:


void config_dmx()
{
//configurar pin DMX_PIN como pin de salida 
	gpio0->dir |= DMX_PIN;
 714:	78 01 00 00 	mvhi r1,0x0
 718:	38 21 08 d8 	ori r1,r1,0x8d8
 71c:	28 21 00 00 	lw r1,(r1+0)
    //   gpio0->dir = gpio0->dir  | DMX_PIN;
    // config Use timer 1
	timer0->compare1 = (FCPU/1000000)*(TBIT); // for usecond
 720:	78 02 00 00 	mvhi r2,0x0
 724:	38 42 08 d4 	ori r2,r2,0x8d4


void config_dmx()
{
//configurar pin DMX_PIN como pin de salida 
	gpio0->dir |= DMX_PIN;
 728:	28 23 00 08 	lw r3,(r1+8)
    //   gpio0->dir = gpio0->dir  | DMX_PIN;
    // config Use timer 1
	timer0->compare1 = (FCPU/1000000)*(TBIT); // for usecond
 72c:	28 42 00 00 	lw r2,(r2+0)


void config_dmx()
{
//configurar pin DMX_PIN como pin de salida 
	gpio0->dir |= DMX_PIN;
 730:	38 63 00 01 	ori r3,r3,0x1
 734:	58 23 00 08 	sw (r1+8),r3
    //   gpio0->dir = gpio0->dir  | DMX_PIN;
    // config Use timer 1
	timer0->compare1 = (FCPU/1000000)*(TBIT); // for usecond
 738:	34 03 01 90 	mvi r3,400
 73c:	58 43 00 10 	sw (r2+16),r3
	gpio0->write = gpio0->read | DMX_PIN;
 740:	28 22 00 00 	lw r2,(r1+0)
 744:	38 42 00 01 	ori r2,r2,0x1
 748:	58 22 00 04 	sw (r1+4),r2
 
}
 74c:	c3 a0 00 00 	ret

00000750 <pin_inv_old>:


void pin_inv_old(uint32_t num)
{
 750:	37 9c ff f8 	addi sp,sp,-8
 754:	5b 8b 00 08 	sw (sp+8),r11
 758:	5b 9d 00 04 	sw (sp+4),ra
	uint32_t i;
	uint32_t pin_act;
	pin_act = (~gpio0->read) & DMX_PIN;
 75c:	78 02 00 00 	mvhi r2,0x0
 760:	38 42 08 d8 	ori r2,r2,0x8d8
 764:	28 43 00 00 	lw r3,(r2+0)
 
}


void pin_inv_old(uint32_t num)
{
 768:	b8 20 58 00 	mv r11,r1
	uint32_t i;
	uint32_t pin_act;
	pin_act = (~gpio0->read) & DMX_PIN;
     set_pin(pin_act, DMX_PIN);
 76c:	34 02 00 01 	mvi r2,1

void pin_inv_old(uint32_t num)
{
	uint32_t i;
	uint32_t pin_act;
	pin_act = (~gpio0->read) & DMX_PIN;
 770:	28 61 00 00 	lw r1,(r3+0)
 774:	20 21 00 01 	andi r1,r1,0x1
     set_pin(pin_act, DMX_PIN);
 778:	18 21 00 01 	xori r1,r1,0x1
 77c:	fb ff ff 0e 	calli 3b4 <set_pin>
	for(i=0;i<num;i++)
 780:	45 60 00 0d 	be r11,r0,7b4 <pin_inv_old+0x64>
 784:	78 01 00 00 	mvhi r1,0x0
 788:	38 21 08 d4 	ori r1,r1,0x8d4
 78c:	28 23 00 00 	lw r3,(r1+0)
 790:	34 04 00 00 	mvi r4,0

void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN;
 794:	34 01 00 08 	mvi r1,8


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 798:	58 60 00 14 	sw (r3+20),r0
	timer0->tcr1 = TIMER_EN;
 79c:	58 61 00 0c 	sw (r3+12),r1
	do {
 		tcr = timer0->tcr1;
 7a0:	28 62 00 0c 	lw r2,(r3+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 7a4:	20 42 00 01 	andi r2,r2,0x1
 7a8:	44 40 ff fe 	be r2,r0,7a0 <pin_inv_old+0x50>
{
	uint32_t i;
	uint32_t pin_act;
	pin_act = (~gpio0->read) & DMX_PIN;
     set_pin(pin_act, DMX_PIN);
	for(i=0;i<num;i++)
 7ac:	34 84 00 01 	addi r4,r4,1
 7b0:	55 64 ff fa 	bgu r11,r4,798 <pin_inv_old+0x48>
		sleept1();
}
 7b4:	2b 9d 00 04 	lw ra,(sp+4)
 7b8:	2b 8b 00 08 	lw r11,(sp+8)
 7bc:	37 9c 00 08 	addi sp,sp,8
 7c0:	c3 a0 00 00 	ret

000007c4 <dmx_channel_send>:
 }



void dmx_channel_send(uint8_t value)
{
 7c4:	37 9c ff ec 	addi sp,sp,-20
 7c8:	5b 8b 00 14 	sw (sp+20),r11
 7cc:	5b 8c 00 10 	sw (sp+16),r12
 7d0:	5b 8d 00 0c 	sw (sp+12),r13
 7d4:	5b 8e 00 08 	sw (sp+8),r14
 7d8:	5b 9d 00 04 	sw (sp+4),ra
 7dc:	78 0d 00 00 	mvhi r13,0x0
 7e0:	20 2c 00 ff 	andi r12,r1,0xff
	uint8_t bit, i;
     pin_inv_old(1); // bita start
 7e4:	34 01 00 01 	mvi r1,1
 7e8:	fb ff ff da 	calli 750 <pin_inv_old>
 7ec:	34 0b 00 08 	mvi r11,8
 7f0:	39 ad 08 d4 	ori r13,r13,0x8d4

void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN;
 7f4:	34 0e 00 08 	mvi r14,8
     pin_inv_old(1); // bita start
 	//nsleep(4000);
	for(i=0;i<8;i++)
	{
		bit=value & 0x01;
 		set_pinDMX(bit);	
 7f8:	21 81 00 01 	andi r1,r12,0x1
 7fc:	fb ff ff 00 	calli 3fc <set_pinDMX>


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 800:	29 a2 00 00 	lw r2,(r13+0)
 	//nsleep(4000);
	for(i=0;i<8;i++)
	{
		bit=value & 0x01;
 		set_pinDMX(bit);	
		value=value>>1;
 804:	01 8c 00 01 	srui r12,r12,1


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 808:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 80c:	58 4e 00 0c 	sw (r2+12),r14
	do {
 		tcr = timer0->tcr1;
 810:	28 43 00 0c 	lw r3,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 814:	20 63 00 01 	andi r3,r3,0x1
 818:	44 60 ff fe 	be r3,r0,810 <dmx_channel_send+0x4c>
 81c:	35 6b ff ff 	addi r11,r11,-1
 820:	21 6b 00 ff 	andi r11,r11,0xff
void dmx_channel_send(uint8_t value)
{
	uint8_t bit, i;
     pin_inv_old(1); // bita start
 	//nsleep(4000);
	for(i=0;i<8;i++)
 824:	5d 60 ff f5 	bne r11,r0,7f8 <dmx_channel_send+0x34>
		bit=value & 0x01;
 		set_pinDMX(bit);	
		value=value>>1;
		sleept1();
        }
	gpio0->write = gpio0->read | DMX_PIN;
 828:	78 01 00 00 	mvhi r1,0x0
 82c:	38 21 08 d8 	ori r1,r1,0x8d8
 830:	28 21 00 00 	lw r1,(r1+0)
 834:	28 23 00 00 	lw r3,(r1+0)
 838:	38 63 00 01 	ori r3,r3,0x1
 83c:	58 23 00 04 	sw (r1+4),r3


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 840:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 844:	34 01 00 08 	mvi r1,8
 848:	58 41 00 0c 	sw (r2+12),r1
	do {
 		tcr = timer0->tcr1;
 84c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 850:	20 21 00 01 	andi r1,r1,0x1
 854:	44 20 ff fe 	be r1,r0,84c <dmx_channel_send+0x88>


void sleept1()
{
	uint32_t tcr;
	timer0->counter1 = 0;
 858:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 85c:	34 01 00 08 	mvi r1,8
 860:	58 41 00 0c 	sw (r2+12),r1
	do {
 		tcr = timer0->tcr1;
 864:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 868:	20 21 00 01 	andi r1,r1,0x1
 86c:	44 20 ff fe 	be r1,r0,864 <dmx_channel_send+0xa0>
		sleept1();
        }
	gpio0->write = gpio0->read | DMX_PIN;
	sleept1();
	sleept1();
}
 870:	2b 9d 00 04 	lw ra,(sp+4)
 874:	2b 8b 00 14 	lw r11,(sp+20)
 878:	2b 8c 00 10 	lw r12,(sp+16)
 87c:	2b 8d 00 0c 	lw r13,(sp+12)
 880:	2b 8e 00 08 	lw r14,(sp+8)
 884:	37 9c 00 14 	addi sp,sp,20
 888:	c3 a0 00 00 	ret

0000088c <dmx_init_send>:
}



void dmx_init_send()
{
 88c:	37 9c ff fc 	addi sp,sp,-4
 890:	5b 9d 00 04 	sw (sp+4),ra
	pin_inv_old(22);
 894:	34 01 00 16 	mvi r1,22
 898:	fb ff ff ae 	calli 750 <pin_inv_old>
	pin_inv_old(2);
 89c:	34 01 00 02 	mvi r1,2
 8a0:	fb ff ff ac 	calli 750 <pin_inv_old>
	dmx_channel_send(0);    	
 8a4:	34 01 00 00 	mvi r1,0
 8a8:	fb ff ff c7 	calli 7c4 <dmx_channel_send>
 }
 8ac:	2b 9d 00 04 	lw ra,(sp+4)
 8b0:	37 9c 00 04 	addi sp,sp,4
 8b4:	c3 a0 00 00 	ret
